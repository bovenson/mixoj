-- phpMyAdmin SQL Dump
-- version 4.0.10deb1
-- http://www.phpmyadmin.net
--
-- 主机: localhost
-- 生成日期: 2016-06-17 17:39:19
-- 服务器版本: 5.5.46-0ubuntu0.14.04.2
-- PHP 版本: 5.5.9-1ubuntu4.16

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `mixoj`
--

-- --------------------------------------------------------

--
-- 表的结构 `auth_group`
--

CREATE TABLE IF NOT EXISTS `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `auth_group_permissions`
--

CREATE TABLE IF NOT EXISTS `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_group_permissions_group_id_0cd325b0_uniq` (`group_id`,`permission_id`),
  KEY `auth_group_permissi_permission_id_84c5c92e_fk_auth_permission_id` (`permission_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `auth_permission`
--

CREATE TABLE IF NOT EXISTS `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_permission_content_type_id_01ab375a_uniq` (`content_type_id`,`codename`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=34 ;

--
-- 转存表中的数据 `auth_permission`
--

INSERT INTO `auth_permission` (`id`, `name`, `content_type_id`, `codename`) VALUES
(1, 'Can add log entry', 1, 'add_logentry'),
(2, 'Can change log entry', 1, 'change_logentry'),
(3, 'Can delete log entry', 1, 'delete_logentry'),
(4, 'Can add permission', 2, 'add_permission'),
(5, 'Can change permission', 2, 'change_permission'),
(6, 'Can delete permission', 2, 'delete_permission'),
(7, 'Can add group', 3, 'add_group'),
(8, 'Can change group', 3, 'change_group'),
(9, 'Can delete group', 3, 'delete_group'),
(10, 'Can add user', 4, 'add_user'),
(11, 'Can change user', 4, 'change_user'),
(12, 'Can delete user', 4, 'delete_user'),
(13, 'Can add content type', 5, 'add_contenttype'),
(14, 'Can change content type', 5, 'change_contenttype'),
(15, 'Can delete content type', 5, 'delete_contenttype'),
(16, 'Can add session', 6, 'add_session'),
(17, 'Can change session', 6, 'change_session'),
(18, 'Can delete session', 6, 'delete_session'),
(19, 'Can add problem', 7, 'add_problem'),
(20, 'Can change problem', 7, 'change_problem'),
(21, 'Can delete problem', 7, 'delete_problem'),
(22, 'Can add problem status', 8, 'add_problemstatus'),
(23, 'Can change problem status', 8, 'change_problemstatus'),
(24, 'Can delete problem status', 8, 'delete_problemstatus'),
(25, 'Can add oj', 9, 'add_oj'),
(26, 'Can change oj', 9, 'change_oj'),
(27, 'Can delete oj', 9, 'delete_oj'),
(28, 'Can add problem degree', 10, 'add_problemdegree'),
(29, 'Can change problem degree', 10, 'change_problemdegree'),
(30, 'Can delete problem degree', 10, 'delete_problemdegree'),
(31, 'Can add spoj problem', 11, 'add_spojproblem'),
(32, 'Can change spoj problem', 11, 'change_spojproblem'),
(33, 'Can delete spoj problem', 11, 'delete_spojproblem');

-- --------------------------------------------------------

--
-- 表的结构 `auth_user`
--

CREATE TABLE IF NOT EXISTS `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) NOT NULL,
  `last_login` datetime DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(30) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `email` varchar(254) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;

--
-- 转存表中的数据 `auth_user`
--

INSERT INTO `auth_user` (`id`, `password`, `last_login`, `is_superuser`, `username`, `first_name`, `last_name`, `email`, `is_staff`, `is_active`, `date_joined`) VALUES
(1, 'pbkdf2_sha256$24000$EHQZM6pM3t81$qhUeaBDHyVVyznkyr1y7paIfJ3RZTv6yH2sjeeqx83k=', '2016-05-31 16:46:18', 1, 'admin', '', '', '', 1, 1, '2016-05-31 16:45:59'),
(2, 'pbkdf2_sha256$24000$AeKXEbMJFiVf$dpYd03kVCktuceqf8j9IXihZx1nP6l85mDprz2m+7nw=', NULL, 1, 'acm', '', '', '', 1, 1, '2016-05-31 16:46:13');

-- --------------------------------------------------------

--
-- 表的结构 `auth_user_groups`
--

CREATE TABLE IF NOT EXISTS `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_groups_user_id_94350c0c_uniq` (`user_id`,`group_id`),
  KEY `auth_user_groups_group_id_97559544_fk_auth_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `auth_user_user_permissions`
--

CREATE TABLE IF NOT EXISTS `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_user_permissions_user_id_14a6b632_uniq` (`user_id`,`permission_id`),
  KEY `auth_user_user_perm_permission_id_1fbb5f2c_fk_auth_permission_id` (`permission_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `chinauniversity`
--

CREATE TABLE IF NOT EXISTS `chinauniversity` (
  `name` varchar(100) NOT NULL,
  `parent` varchar(100) DEFAULT NULL,
  `abbr` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `chinauniversity`
--

INSERT INTO `chinauniversity` (`name`, `parent`, `abbr`) VALUES
('Agricultural University Of Anhui', 'China', ''),
('Agricultural University Of He nan', 'China', ''),
('Agricultural University Of Hebei', 'China', ''),
('Agricultural University Of Hunan', 'China', ''),
('Agricultural University Of Jiangxi', 'China', ''),
('Agricultural University Of Nanjing', 'China', ''),
('Agricultural University Of Shanxi', 'China', ''),
('Agricultural University Of Shenyang', 'China', ''),
('Agricultural University Of South China', 'China', ''),
('Agricultural University Of Southwest', 'China', ''),
('Agricultural University Of The Inner Mongol', 'China', ''),
('Anhui Normal University', 'China', ''),
('Anhui University of Engineering Science   Technology', 'China', ''),
('Anhui University of Science and Technology', 'China', ''),
('Anhui University of Technology', 'China', ''),
('Aviation Engineering Institutes Of Nanchang', 'China', ''),
('Beijing Foreign Studies University', 'China', ''),
('Beijing Forestry University', 'China', ''),
('Beijing Jiaotong University', 'China', ''),
('Beijing Language and Culture University', 'China', ''),
('Beijing Normal University', 'China', ''),
('Beijing Sport University', 'China', ''),
('Beijing University', 'China', ''),
('Beijing University Of Chinese Medicine', 'China', ''),
('Beijing University Of Posts and Telecommunications', 'China', ''),
('Beijing University Studies', 'China', ''),
('Central China Agricultural University', 'China', ''),
('Central China Normal University', 'China', ''),
('Central China University Science and Technology', 'China', ''),
('Central Judicial Police Officer s Institutes', 'China', ''),
('Central University For Nationalities', 'China', ''),
('Ceramic Institutes Of Jingdezhen', 'China', ''),
('Changjiang University', 'China', ''),
('Changsha University', 'China', ''),
('China Agricultural University', 'China', ''),
('China Measures The Institute', 'China', ''),
('China Medicine University', 'China', ''),
('China Mining University', 'China', ''),
('China Science Technology University', 'China', ''),
('China University Of Geosciences', 'China', ''),
('China University Of Petroleum Beijing', 'China', ''),
('China University Of Political Science and Law', 'China', ''),
('Chinese Marine University', 'China', ''),
('Chinese Medical Sciences University', 'China', ''),
('Chinese Peking Union Medical College', 'China', ''),
('Chinese People  S Institute Of Armed Police Force', 'China', ''),
('Chongqing Sanxia Institute', 'China', ''),
('Civil Aeronautical Engineering Institutes Of China', 'China', ''),
('Collects The American University', 'China', ''),
('Colleges Of Traditional Chinese Medicine Of Fujian', 'China', ''),
('Colleges Of Traditional Chinese Medicine Of Guangxi', 'China', ''),
('Colleges Of Traditional Chinese Medicine Of Shanxi', 'China', ''),
('Donghua University', 'China', ''),
('East China Institute Of Technology', 'China', ''),
('East China Normal University', 'China', ''),
('East China University Of Politics and Law', 'China', ''),
('East China University Of Science', 'China', ''),
('Electronic Engineering Institutes Of Guilin', 'China', ''),
('Electronic University Of Science  Technology Of Hangzhou', 'China', ''),
('Finance and Economics Institute Of The Inner Mongol', 'China', ''),
('Finance and Economics University Of Jiangxi', 'China', ''),
('Finance and Economics University Of Tianjin', 'China', ''),
('Five City University', 'China', ''),
('Fudan University', 'China', ''),
('Fujian Normal University', 'China', ''),
('Fujian University of Technology', 'China', ''),
('Guangdong University of Technology', 'China', ''),
('Guangxi Medical University', 'China', ''),
('Guangxi Normal University', 'China', ''),
('Guangxi Teachers College', 'China', ''),
('Guangxi Technical College', 'China', ''),
('Guangxi University', 'China', ''),
('Guangzhou University', 'China', ''),
('Hainan Medical College', 'China', ''),
('Hainan Teachers College', 'China', ''),
('Hangzhou University', 'China', ''),
('He nan Normal University', 'China', ''),
('He nan University', 'China', ''),
('He nan University of Technology', 'China', ''),
('Hebei Institute Of Civil Engineering', 'China', ''),
('Hebei Medical University', 'China', ''),
('Hebei Normal University', 'China', ''),
('Hebei University of Technology', 'China', ''),
('HeFei University of Technology', 'China', ''),
('Huaqiao University', 'China', ''),
('Hubei College Of Traditional Chinese Medicine', 'China', ''),
('Hubei Institute For Nationalities', 'China', ''),
('Hubei Institute Of Fine Acts', 'China', ''),
('Hubei Normal University', 'China', ''),
('Hubei University', 'China', ''),
('Hubei University Of Technology', 'China', ''),
('Hunan Normal University', 'China', ''),
('Hunan University', 'China', ''),
('Industrial and Commercial University Of Chongqing', 'China', ''),
('Inner Mongol Normal University', 'China', ''),
('Inner Mongol University of Technology', 'China', ''),
('Institute Of Technology Of Dalian', 'China', ''),
('Institute Of Unity and Coherence In Writing Of Chongqing', 'China', ''),
('Institutes Of Chifeng', 'China', ''),
('Institutes Of HulunBuir', 'China', ''),
('Institutes Of Jiaxing', 'China', ''),
('Institutes Of Technology Of Changsha', 'China', ''),
('Institutes Of Technology Of He nan', 'China', ''),
('Institutes Of Technology Of Hebei', 'China', ''),
('Institutes Of Technology Of Jiangxi', 'China', ''),
('Institutes Of Technology Of Nanjing', 'China', ''),
('Institutes Of Technology Of South China', 'China', ''),
('Institutes Of Technology Of Taiyuan', 'China', ''),
('Institutes Of Technology Of Tianjin', 'China', ''),
('Institutes Of Technology Of Zhejiang', 'China', ''),
('Ji nan University', 'China', ''),
('Jianghan University', 'China', ''),
('Jiangxi Normal University', 'China', ''),
('Liaoning Project Technology University', 'China', ''),
('Liaoning University', 'China', ''),
('Light Engineering Institutes Of Zhengzhou', 'China', ''),
('Management Colleges Of Aircraft Industry Of Zhengzhou', 'China', ''),
('Manages The Medical College Long', 'China', ''),
('Marine University Of Zhanjiang', 'China', ''),
('Maritime Affairs University Of Dalian', 'China', ''),
('Medical Colleges Of Guilin', 'China', ''),
('Medical Colleges Of The Inner Mongol', 'China', ''),
('Medical University Of Anhui', 'China', ''),
('Medical University Of Chongqing', 'China', ''),
('Medical University Of Fujian', 'China', ''),
('Medical University Of Tianjin', 'China', ''),
('Middle and Southern University', 'China', ''),
('Mountain Western Medicine S University', 'China', ''),
('Nanchang University of Technology', 'China', ''),
('Nanjing Aero Space University', 'China', ''),
('Nanjing University', 'China', ''),
('Nankai University', 'China', ''),
('National Medical College Of Right Rivers', 'China', ''),
('National University Of The Inner Mongol', 'China', ''),
('North China Electric Power University', 'China', ''),
('North China Institute of Water Conservancy and Hydroelectric Power', 'China', ''),
('Northeastern University', 'China', ''),
('Oceanography Institute Of Zhejiang', 'China', ''),
('Post and Telecommunications Institutes Of Chongqing', 'China', ''),
('Railway Institutes Of Shijiazhuang', 'China', ''),
('Renmin University Of China', 'China', ''),
('River Sea University', 'China', ''),
('Scientific and Technological Institutes Of Zhejiang', 'China', ''),
('Shandong Agricultural University', 'China', ''),
('Shandong Normal University', 'China', ''),
('Shandong Traditional Chinese Medicine University', 'China', ''),
('Shandong University', 'China', ''),
('Shanghai Conservatory Of Music', 'China', ''),
('Shanghai Institute Of Foreign Trade', 'China', ''),
('Shanghai Institute Of Technology', 'China', ''),
('Shanghai International Studies University', 'China', ''),
('Shanghai Jiao Tong University', 'China', ''),
('Shanghai Maritime University', 'China', ''),
('Shanghai Normal University', 'China', ''),
('Shanghai Theatre Academy', 'China', ''),
('Shanghai University', 'China', ''),
('Shanghai University Of Electric Power', 'China', ''),
('Shanghai University Of Engineering Science', 'China', ''),
('Shanghai University Of Finance', 'China', ''),
('Shanghai University Of Sport', 'China', ''),
('Shanghai University Of Technology', 'China', ''),
('Shanxi Finance and Economics University', 'China', ''),
('Shanxi Normal University', 'China', ''),
('Shenyang University of Technology', 'China', ''),
('Shenzhen University', 'China', ''),
('South Center University For Nationalities', 'China', ''),
('Southeast China University', 'China', ''),
('Southwest Politics and Law University', 'China', ''),
('Southwestern Normal University', 'China', ''),
('Technical Colleges Of Guilin', 'China', ''),
('Technical Colleges Of Zhuzhou', 'China', ''),
('Technological Institute Of Qingdao Harbor', 'China', ''),
('The Central University Of Finance and Economics', 'China', ''),
('Tianjin Normal University', 'China', ''),
('Tianjin University of Technology', 'China', ''),
('Tongji University', 'China', ''),
('Traditional Chinese Medicine University Of Guangzhou', 'China', ''),
('Traffic Institutes Of Chongqing', 'China', ''),
('Traffic University Of East China', 'China', ''),
('Tropical Agricultural University Of South China', 'China', ''),
('Tsinghua University', 'China', ''),
('University Of Agriculture and Forestry In Fujian', 'China', ''),
('University Of Anhui', 'China', ''),
('University Of Business   Economics In Hebei', 'China', ''),
('University Of Chongqing', 'China', ''),
('University Of Dalian', 'China', ''),
('University Of Fuzhou', 'China', ''),
('University Of Hainan', 'China', ''),
('University Of Hebei', 'China', ''),
('University Of International Business and Economics', 'China', ''),
('University Of Ji nan', 'China', ''),
('University Of Jishou', 'China', ''),
('University Of Nanchang', 'China', ''),
('University Of Nanhua', 'China', ''),
('University Of Ningbo', 'China', ''),
('University Of Qingdao', 'China', ''),
('University Of Science and Technology Beijing', 'China', ''),
('University Of Science and Technology Of He nan', 'China', ''),
('University Of Science and Technology Of Hebei', 'China', ''),
('University Of Science and Technology Of Hunan', 'China', ''),
('University Of Science and Technology Of Shandong', 'China', ''),
('University Of Science and Technology Of Taiyuan', 'China', ''),
('University Of Science and Technology Of The Inner Mongol', 'China', ''),
('University Of Science and Technology Of Tianjin', 'China', ''),
('University Of Shantou', 'China', ''),
('University Of Shanxi', 'China', ''),
('University Of Shenyang', 'China', ''),
('University Of Suzhou', 'China', ''),
('University Of The Inner Mongol', 'China', ''),
('University Of The South', 'China', ''),
('University Of Tianjin', 'China', ''),
('University Of Xiangtan', 'China', ''),
('University Of Yantai', 'China', ''),
('University On The Mountain Of Swallows', 'China', ''),
('Urban Construction Institutes Of Tianjin', 'China', ''),
('Western Anhui University', 'China', ''),
('Wuhan Conservatory Of Music', 'China', ''),
('Wuhan Institute Of Sport', 'China', ''),
('Wuhan Institute Of Technology', 'China', ''),
('Wuhan University', 'China', ''),
('Wuhan University Of Science and Engineering', 'China', ''),
('Wuhan University Of Technology', 'China', ''),
('Xiamen University', 'China', ''),
('Yang en University', 'China', ''),
('Zhejiang Normal University', 'China', ''),
('Zhejiang University', 'China', ''),
('Zhejiang University of Technology', 'China', ''),
('Zhengzhou University', 'China', ''),
('Zhongnan University Of Economics   Law', 'China', ''),
('Zhongshan University', 'China', '');

-- --------------------------------------------------------

--
-- 表的结构 `city`
--

CREATE TABLE IF NOT EXISTS `city` (
  `name` varchar(100) NOT NULL,
  `parent` varchar(100) DEFAULT NULL,
  `abbr` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `city`
--

INSERT INTO `city` (`name`, `parent`, `abbr`) VALUES
('Aabenraa', 'Denmark', ''),
('Aalborg', 'Denmark', ''),
('Aalesund', 'Norway', ''),
('Aarhus', 'Denmark', ''),
('Abadan', 'Iran', ''),
('Abu Dhabi', 'United Arab Emirates', ''),
('Acapulco', 'Mexico', ''),
('Adelaide', 'Australia', ''),
('Alexandria', 'Egypt', ''),
('Algiers', 'Algeria', ''),
('Amsterdam', 'Netherlands', ''),
('Ancona', 'Italy', ''),
('Annaba', 'Algeria', ''),
('Antwerp', 'Belgium', ''),
('Aqaba', 'Jordan', ''),
('Arica', 'Chile', ''),
('Athens', 'Greece', ''),
('Auckland', 'New Zealand', ''),
('Bahia Blanca', 'Argentina', ''),
('Bandar Khomeini', 'Iran', ''),
('Bangkok', 'Thailand', ''),
('Barcelona', 'Spain', ''),
('Bassein', 'Myanmar', ''),
('Bilbao', 'Spain', ''),
('Bombay', 'Indonesia', ''),
('Bordeaux', 'France', ''),
('Boston', 'United States of America', ''),
('Bourgas', 'Bulgaria', ''),
('Bremen', 'Germany', ''),
('Brisbane', 'Australia', ''),
('Bruseel', 'Belgium', ''),
('Buenos Aires', 'Argentina', ''),
('Bunbury', 'Australia', ''),
('Bushire', 'Iran', ''),
('Butterworth Malacca Penang', 'Malaysia', ''),
('Cadiz', 'Spain', ''),
('Calcutta', 'Indonesia', ''),
('Callao', 'Peru', ''),
('Cape Town', 'South Africa', ''),
('Caracas Maracaibo', 'Venezuela', ''),
('Cebu', 'Philippines', ''),
('Chalna', 'Bangladesh', ''),
('Chicago', 'United States of America', ''),
('Chittagong', 'Bangladesh', ''),
('Chris Church Dunedin', 'New Zealand', ''),
('Colombo', 'Sri Lanka', ''),
('Colon', 'Panama', ''),
('Constantsa', 'Romania', ''),
('Copenhagen', 'Denmark', ''),
('Cork', 'Ireland', ''),
('Cotonou', 'Benin', ''),
('Croatia', 'Croatia', ''),
('Dacca', 'Bangladesh', ''),
('Dammam', 'Saudi Arabia', ''),
('Darwin', 'Australia', ''),
('Detroit', 'United States of America', ''),
('Doha', 'Qatar', ''),
('Douala', 'Cameroon', ''),
('Dubai', 'United Arab Emirates', ''),
('Dublin', 'Ireland', ''),
('Dunkirk Le Havre Marsei', 'France', ''),
('Durban', 'South Africa', ''),
('Durresi', 'Albania', ''),
('East London', 'South Africa', ''),
('Ensenada', 'Mexico', ''),
('Frankfurt', 'Germany', ''),
('Fukuo', 'Japan', ''),
('Gdynia', 'Poland', ''),
('Geneva', 'Italy', ''),
('Ghent', 'Belgium', ''),
('Gothenburg', 'Sweden', ''),
('Guaymas', 'Mexico', ''),
('Gwadur', 'Pakistan', ''),
('Hai Phong', 'Viet Nam', ''),
('Haifa', 'Israel', ''),
('Halmstad', 'Sweden', ''),
('Hamina', 'Finland', ''),
('Hanoi', 'Viet Nam', ''),
('Haugesund', 'Norway', ''),
('Helsingborg', 'Sweden', ''),
('Helsingor', 'Denmark', ''),
('Helsinki', 'Finland', ''),
('Hiroshima', 'Japan', ''),
('Ho Chi Minh City', 'Viet Nam', ''),
('Houston', 'United States of America', ''),
('Humburg', 'Germany', ''),
('Hungnam', 'North Korea', ''),
('Inchon', 'South Korea', ''),
('Iquique', 'Chile', ''),
('Jeddah', 'Saudi Arabia', ''),
('Kagoshima', 'Japan', ''),
('Kakinada', 'Indonesia', ''),
('Kaliningrad', 'Russian Federation', ''),
('Karachi', 'Pakistan', ''),
('Kawasaki', 'Japan', ''),
('Kemi', 'Finland', ''),
('Kholmsk Leninggrad', 'Russian Federation', ''),
('Kitakyushu', 'Japan', ''),
('Kobe', 'Japan', ''),
('La Guaira', 'Venezuela', ''),
('La Paz', 'Mexico', ''),
('Launceston', 'Australia', ''),
('Lisbon', 'Portugal', ''),
('Liverpool', 'United Kingdom', ''),
('London', 'United Kingdom', ''),
('Los Angeles', 'United States of America', ''),
('Lyttelton', 'New Zealand', ''),
('Majunga', 'Madagascar', ''),
('Malaga', 'Spain', ''),
('Malmo', 'Sweden', ''),
('Malta', 'Malta', ''),
('Manchester', 'United Kingdom', ''),
('Manila', 'Philippines', ''),
('Manzanillo', 'Mexico', ''),
('Melborne', 'Australia', ''),
('Miami', 'United States of America', ''),
('Mikpo Pusan', 'South Korea', ''),
('Mobile', 'United States of America', ''),
('Monrovia', 'Liberia', ''),
('Montreal', 'Canada', ''),
('Muscat', 'Oman', ''),
('Nagasaki', 'Japan', ''),
('Nagoya', 'Japan', ''),
('Nakhodka Murmansk', 'Russian Federation', ''),
('Nampo', 'North Korea', ''),
('Nandar Abbas', 'Iran', ''),
('Napier', 'New Zealand', ''),
('Naples', 'Italy', ''),
('New Castle', 'United Kingdom', ''),
('New Plymouth', 'New Zealand', ''),
('New York', 'United States of America', ''),
('Oakland', 'United States of America', ''),
('Odessa', 'Ukraine', ''),
('Oran', 'Algeria', ''),
('Osaka', 'Japan', ''),
('Oslo', 'Norway', ''),
('Oulu', 'Finland', ''),
('Panama', 'Panama', ''),
('Paramaribo', 'Suriname', ''),
('Paranagua', 'Brazil', ''),
('Perth', 'Australia', ''),
('Philadedlphi', 'United States of America', ''),
('Piraeus', 'Greece', ''),
('Port Elizabeth', 'South Africa', ''),
('Port Kelang', 'Malaysia', ''),
('Port Kembla', 'Australia', ''),
('Port of Argentina', 'Argentina', ''),
('Port Said', 'Egypt', ''),
('Portland New Orleans', 'United States of America', ''),
('Porto Novo', 'Benin', ''),
('Puerto Cabello', 'Venezuela', ''),
('Quebec', 'Canada', ''),
('Rabat', 'Morocco', ''),
('Rangoon', 'Myanmar', ''),
('Recife', 'Brazil', ''),
('Reykjavik', 'Iceland', ''),
('Rijeka', 'Croatia', ''),
('Rio de janeiro', 'Brazil', ''),
('Rio Grande Salvador', 'Brazil', ''),
('Rostock', 'Germany', ''),
('Rotterdam', 'Netherlands', ''),
('San Diego', 'United States of America', ''),
('San Francisco', 'United States of America', ''),
('San Juan', 'Peru', ''),
('Santander', 'Spain', ''),
('Santos', 'Brazil', ''),
('Sete', 'France', ''),
('Sharjah', 'United Arab Emirates', ''),
('sola', 'Norway', ''),
('Suez', 'Egypt', ''),
('Sydney', 'Australia', ''),
('Szozecin', 'Poland', ''),
('Tabaco', 'Philippines', ''),
('Talin', 'Estonia', ''),
('Tamatave', 'Madagascar', ''),
('Tampico', 'Mexico', ''),
('Tangier', 'Morocco', ''),
('Tel Aviv', 'Israel', ''),
('Thessaloniki', 'Greece', ''),
('Tokyo', 'Japan', ''),
('Toronto', 'Canada', ''),
('Toulon', 'France', ''),
('Trincomalee', 'Sri Lanka', ''),
('Turku', 'Finland', ''),
('Umm Said', 'Qatar', ''),
('Valona', 'Albania', ''),
('Valparaiso', 'Chile', ''),
('Vancouver', 'Canada', ''),
('Varna', 'Bulgaria', ''),
('Vasa', 'Finland', ''),
('Venice', 'Italy', ''),
('Victoria', 'Malta', ''),
('Visby', 'Sweden', ''),
('Vosochny', 'Russian Federation', ''),
('Wallhamn', 'Sweden', ''),
('Wellington', 'New Zealand', ''),
('Yalta', 'Russian Federation', ''),
('Yekaterinburg', 'Russian Federation', ''),
('Yokohama', 'Japan', ''),
('Zeebrugge', 'Belgium', '');

-- --------------------------------------------------------

--
-- 表的结构 `continent`
--

CREATE TABLE IF NOT EXISTS `continent` (
  `name` varchar(100) NOT NULL,
  `parent` varchar(100) DEFAULT NULL,
  `abbr` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `continent`
--

INSERT INTO `continent` (`name`, `parent`, `abbr`) VALUES
('Africa', 'Root', ''),
('Asia', 'Root', ''),
('Europe', 'Root', 'European'),
('North America', 'Root', ''),
('Oceania', 'Root', ''),
('South America', 'Root', '');

-- --------------------------------------------------------

--
-- 表的结构 `country`
--

CREATE TABLE IF NOT EXISTS `country` (
  `name` varchar(100) NOT NULL,
  `parent` varchar(100) DEFAULT NULL,
  `abbr` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `country`
--

INSERT INTO `country` (`name`, `parent`, `abbr`) VALUES
('Afghanistan', 'Asia', 'AF'),
('Albania', 'Europe', 'AL'),
('Algeria', 'Africa', 'DZ'),
('Andorra', 'Europe', 'AD'),
('Angola', 'Africa', 'AO'),
('Antigua and Barbuda', 'North America', 'AG'),
('Argentina', 'South America', 'AR'),
('Armenia', 'Asia', 'AM'),
('Australia', 'Oceania', 'AU'),
('Austria', 'Europe', 'AT'),
('Azerbaijan', 'Asia', 'AZ'),
('Bahamas', 'North America', 'BS'),
('Bahrain', 'Asia', 'BH'),
('Bangladesh', 'Asia', 'BD'),
('Barbados', 'North America', 'BB'),
('Belarus', 'Europe', 'BY'),
('Belgium', 'Europe', 'BE'),
('Benin', 'Africa', 'BJ'),
('Bermuda', 'North America', 'BM'),
('Bhutan', 'Asia', 'BT'),
('Bolivia', 'South America', 'BO'),
('Botswana', 'Africa', 'BW'),
('Brazil', 'South America', 'BR'),
('Bulgaria', 'Europe', 'BG'),
('Burkina Faso', 'Africa', 'BF'),
('Burundi', 'Africa', 'BI'),
('Cameroon', 'Africa', 'CM'),
('Canada', 'North America', 'CA'),
('Cape Verde', 'Africa', 'CV'),
('Central African Republic', 'Africa', 'CF'),
('Chad', 'Africa', 'TD'),
('Chile', 'South America', 'CL'),
('China', 'Asia', 'CN'),
('Colombia', 'South America', 'CO'),
('Comoros', 'Africa', 'KM'),
('Congo', 'Africa', 'CG'),
('Congo Democratic Republic', 'Africa', 'CD'),
('Cook Islands', 'Oceania', 'CK'),
('Costa Rica', 'North America', 'CR'),
('Croatia', 'Europe', 'HR'),
('Cuba', 'North America', 'CU'),
('Czech Republic', 'Europe', 'CZ'),
('Denmark', 'Europe', 'DK'),
('Djibouti', 'Africa', 'DJ'),
('Dominica', 'North America', 'DM'),
('East Timor', 'Asia', 'TP'),
('Ecuador', 'South America', 'EC'),
('Egypt', 'Africa', 'EG'),
('El Salvador', 'North America', 'SV'),
('Equatorial Guinea', 'Africa', 'GQ'),
('Estonia', 'Europe', 'EE'),
('Ethiopia', 'Africa', 'ET'),
('Finland', 'Europe', 'FI'),
('France', 'Europe', 'FR'),
('French Guiana', 'South America', 'GF'),
('Gabon', 'Africa', 'GA'),
('Gambia', 'Africa', 'GM'),
('Georgia', 'Asia', 'GE'),
('Germany', 'Europe', 'DE'),
('Ghana', 'Africa', 'GH'),
('Gibraltar', 'Europe', 'GI'),
('Great Britain', 'Europe', 'GB'),
('Greece', 'Europe', 'GR'),
('Grenada', 'North America', 'GD'),
('Guam', 'Oceania', 'GU'),
('Guatemala', 'North America', 'GT'),
('Guinea', 'Africa', 'GN'),
('GuineaBissau', 'Africa', 'GW'),
('Guyana', 'South America', 'GY'),
('Honduras', 'North America', 'HN'),
('Hungary', 'Europe', 'HU'),
('Iceland', 'Europe', 'IS'),
('India', 'Asia', 'IN'),
('Indonesia', 'Asia', 'ID'),
('Iran', 'Asia', 'IR'),
('Iraq', 'Asia', 'IQ'),
('Ireland', 'Europe', 'IE'),
('Israel', 'Asia', 'IL'),
('Italy', 'Europe', 'IT'),
('Jamaica', 'North America', 'JM'),
('Japan', 'Asia', 'JP'),
('Jordan', 'Asia', 'JO'),
('Kazakhstan', 'Asia', 'KZ'),
('Kenya', 'Africa', 'KE'),
('Kiribati', 'Oceania', 'KI'),
('Kuwait', 'Asia', 'KW'),
('Laos', 'Asia', 'LA'),
('Lebanon', 'Asia', 'LB'),
('Lesotho', 'Africa', 'LS'),
('Liberia', 'Africa', 'LR'),
('Libya', 'Africa', 'LY'),
('Lithuania', 'Europe', 'LT'),
('Luxembourg', 'Europe', 'LU'),
('Madagascar', 'Africa', 'MG'),
('Malawi', 'Africa', 'MW'),
('Malaysia', 'Asia', 'MY'),
('Maldives', 'Asia', 'MV'),
('Mali', 'Africa', 'ML'),
('Malta', 'Europe', 'MT'),
('Marshall Islands', 'Oceania', 'MH'),
('Mauritania', 'Africa', 'MR'),
('Mauritius', 'Africa', 'MU'),
('Mexico', 'North America', 'MX'),
('Moldova', 'Europe', 'MD'),
('Monaco', 'Europe', 'MC'),
('Mongolia', 'Asia', 'MN'),
('Morocco', 'Africa', 'MA'),
('Mozambique', 'Africa', 'MZ'),
('Myanmar', 'Asia', 'MM'),
('Namibia', 'Africa', 'NA'),
('Nauru', 'Oceania', 'NR'),
('Nepal', 'Asia', 'NP'),
('Netherlands', 'Europe', 'NL'),
('New Zealand', 'Oceania', 'NZ'),
('Nicaragua', 'North America', 'NI'),
('Niger', 'Africa', 'NE'),
('Nigeria', 'Africa', 'NG'),
('Northern Mariana Islands', 'Oceania', 'MP'),
('Norway', 'Europe', 'NO'),
('Oman', 'Asia', 'OM'),
('Pakistan', 'Asia', 'PK'),
('Palau', 'Oceania', 'PW'),
('Panama', 'North America', 'PA'),
('Papua New Guinea', 'Oceania', 'PG'),
('Paraguay', 'South America', 'PY'),
('Peru', 'South America', 'PE'),
('Philippines', 'Asia', 'PH'),
('Poland', 'Europe', 'PL'),
('Portugal', 'Europe', 'PT'),
('Qatar', 'Asia', 'QA'),
('Romania', 'Europe', 'RO'),
('Russian Federation', 'Europe', 'RU'),
('Saint Kitts and Nevis', 'North America', 'KN'),
('Saint Lucia', 'North America', 'LC'),
('San Marino', 'Europe', 'SM'),
('Saudi Arabia', 'Asia', 'SA'),
('Senegal', 'Africa', 'SN'),
('Seychelles', 'Africa', 'SC'),
('Sierra Leone', 'Africa', 'SL'),
('Singapore', 'Asia', 'SG'),
('Slovak Republic', 'Europe', 'SK'),
('Solomon Islands', 'Oceania', 'Sb'),
('South Africa', 'Africa', 'ZA'),
('South Korea', 'Asia', 'KR'),
('Spain', 'Europe', 'ES'),
('Sri Lanka', 'Asia', 'LK'),
('Sudan', 'Africa', 'SD'),
('Suriname', 'South America', 'SR'),
('Swaziland', 'Africa', 'SZ'),
('Sweden', 'Europe', 'SE'),
('Switzerland', 'Europe', 'CH'),
('Tajikistan', 'Asia', 'TJ'),
('Tanzania', 'Africa', 'TZ'),
('Thailand', 'Asia', 'TH'),
('Tokelau', 'Oceania', 'TK'),
('Trinidad and Tobago', 'North America', 'TT'),
('Tunisia', 'Africa', 'TN'),
('Turkmenistan', 'Asia', 'TM'),
('Ukraine', 'Europe', 'UA'),
('United Arab Emirates', 'Asia', 'AE'),
('United Kingdom', 'Europe', 'UK'),
('United States', 'North America', 'US'),
('United States of America', 'North America', 'USA'),
('Uzbekistan', 'Asia', 'UZ'),
('Venezuela', 'South America', 'VE'),
('Viet Nam', 'Asia', 'VN');

-- --------------------------------------------------------

--
-- 表的结构 `custom`
--

CREATE TABLE IF NOT EXISTS `custom` (
  `name` varchar(100) NOT NULL,
  `parent` varchar(100) DEFAULT NULL,
  `abbr` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `custom`
--

INSERT INTO `custom` (`name`, `parent`, `abbr`) VALUES
('2011', 'Asia', ''),
('2011year', 'Asia', ''),
('Central European', 'Europe', ''),
('Changchun', 'China', ''),
('Changsha', 'China', ''),
('ChengDu', 'China', ''),
('ningxia', 'China', ''),
('NWERC', 'Europe', ''),
('USACO', 'United States of America', '');

-- --------------------------------------------------------

--
-- 表的结构 `django_admin_log`
--

CREATE TABLE IF NOT EXISTS `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime NOT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin__content_type_id_c4bce8eb_fk_django_content_type_id` (`content_type_id`),
  KEY `django_admin_log_user_id_c564eba6_fk_auth_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `django_content_type`
--

CREATE TABLE IF NOT EXISTS `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_76bd3d3b_uniq` (`app_label`,`model`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=12 ;

--
-- 转存表中的数据 `django_content_type`
--

INSERT INTO `django_content_type` (`id`, `app_label`, `model`) VALUES
(1, 'admin', 'logentry'),
(3, 'auth', 'group'),
(2, 'auth', 'permission'),
(4, 'auth', 'user'),
(5, 'contenttypes', 'contenttype'),
(9, 'mixojapp', 'oj'),
(7, 'mixojapp', 'problem'),
(10, 'mixojapp', 'problemdegree'),
(8, 'mixojapp', 'problemstatus'),
(11, 'mixojapp', 'spojproblem'),
(6, 'sessions', 'session');

-- --------------------------------------------------------

--
-- 表的结构 `django_migrations`
--

CREATE TABLE IF NOT EXISTS `django_migrations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=14 ;

--
-- 转存表中的数据 `django_migrations`
--

INSERT INTO `django_migrations` (`id`, `app`, `name`, `applied`) VALUES
(1, 'contenttypes', '0001_initial', '2016-05-28 20:03:32'),
(2, 'auth', '0001_initial', '2016-05-28 20:03:32'),
(3, 'admin', '0001_initial', '2016-05-28 20:03:33'),
(4, 'admin', '0002_logentry_remove_auto_add', '2016-05-28 20:03:33'),
(5, 'contenttypes', '0002_remove_content_type_name', '2016-05-28 20:03:33'),
(6, 'auth', '0002_alter_permission_name_max_length', '2016-05-28 20:03:33'),
(7, 'auth', '0003_alter_user_email_max_length', '2016-05-28 20:03:33'),
(8, 'auth', '0004_alter_user_username_opts', '2016-05-28 20:03:33'),
(9, 'auth', '0005_alter_user_last_login_null', '2016-05-28 20:03:33'),
(10, 'auth', '0006_require_contenttypes_0002', '2016-05-28 20:03:33'),
(11, 'auth', '0007_alter_validators_add_error_messages', '2016-05-28 20:03:33'),
(12, 'mixojapp', '0001_initial', '2016-05-28 20:03:33'),
(13, 'sessions', '0001_initial', '2016-05-28 20:03:33');

-- --------------------------------------------------------

--
-- 表的结构 `django_session`
--

CREATE TABLE IF NOT EXISTS `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_de54fa62` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `django_session`
--

INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES
('311e8rzrdtnw5zgco1zwq9goqyi0mms3', 'Y2FmYTQ1MDNkYjg4NGY0MDkyMzhjZDU1ZThmYWY1NjBiNzYyZDRmMzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIxZTUwOGYwOGY2MDAwZjk5YzU4OGI4YWZhNmIwYzllMjFiYWI5Yzc0In0=', '2016-06-14 16:46:18');

-- --------------------------------------------------------

--
-- 表的结构 `knowledge_tree`
--

CREATE TABLE IF NOT EXISTS `knowledge_tree` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) NOT NULL,
  `name` varchar(20) DEFAULT NULL,
  `synonym` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`,`pid`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=32 ;

--
-- 转存表中的数据 `knowledge_tree`
--

INSERT INTO `knowledge_tree` (`id`, `pid`, `name`, `synonym`) VALUES
(2, -1, '数论', ''),
(3, -1, '模拟', ''),
(4, -1, '动规', '动态规划,dp'),
(5, -1, '图', ''),
(6, 5, '最短路', ''),
(7, 5, '最长路', ''),
(8, 5, '最大流', ''),
(9, 5, '最小流', ''),
(10, 5, '松弛', 'Relaxation'),
(11, 5, 'Dijkstra', '迪杰斯特拉'),
(12, 5, 'Floyd', '弗洛伊德'),
(13, 5, '图的DFS', '深度优先,深搜'),
(14, 5, '图的BFS', '广度优先,广搜'),
(15, 5, '拓扑排序', ''),
(16, -1, '树', ''),
(17, 16, '树的DFS', '深度优先,深搜,DFS'),
(18, 16, '树的BFS', '广度优先,广搜,BFS'),
(19, 16, '二叉树', ''),
(20, 19, '二叉搜索树', ''),
(21, -1, '排序', ''),
(22, 21, '快速排序', '快排 quicksort,qsort quick_sort'),
(23, 21, '堆排序', 'heapsort,heap_sort,最小堆,最大堆'),
(24, -1, '分治', ''),
(25, -1, '贪心', ''),
(26, 25, '活动选择', ''),
(27, 25, '哈夫曼编码', '赫夫曼编码'),
(28, -1, '未分类', ''),
(29, -1, '几何', '');

-- --------------------------------------------------------

--
-- 表的结构 `mixojapp_oj`
--

CREATE TABLE IF NOT EXISTS `mixojapp_oj` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `id_start` varchar(100) NOT NULL,
  `id_end` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3284 ;

--
-- 转存表中的数据 `mixojapp_oj`
--

INSERT INTO `mixojapp_oj` (`id`, `name`, `id_start`, `id_end`) VALUES
(3274, 'Poj', '0', '0'),
(3275, 'Zoj', '0', '0'),
(3276, 'UVALive', '0', '0'),
(3277, 'Sgu', '0', '0'),
(3278, 'Ural', '0', '0'),
(3279, 'Hust', '0', '0'),
(3280, 'Hysbz', '0', '0'),
(3281, 'Hdu', '0', '0'),
(3282, 'Codeforces', '0', '0'),
(3283, 'UVA', '0', '0');

-- --------------------------------------------------------

--
-- 表的结构 `mixojapp_problem`
--

CREATE TABLE IF NOT EXISTS `mixojapp_problem` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(150) NOT NULL,
  `sourceid` varchar(20) DEFAULT NULL,
  `ojname` varchar(30) NOT NULL,
  `time_limit` varchar(20) DEFAULT NULL,
  `memory_limit` varchar(20) DEFAULT NULL,
  `title` longtext NOT NULL,
  `description` longtext,
  `pinput` longtext,
  `poutput` longtext,
  `sample_input` longtext,
  `sample_output` longtext,
  `hint` longtext,
  `source` longtext,
  `ac_rate` varchar(10) DEFAULT NULL,
  `user_ac_rate` varchar(10) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `knowledge_tree_node_id` int(11) NOT NULL,
  `knowledge_tree_node_name` varchar(30) NOT NULL,
  `hot_degree` double DEFAULT NULL,
  `difficult` double DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `url` (`url`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=287 ;

--
-- 转存表中的数据 `mixojapp_problem`
--

INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(1, 'http://poj.org/problem?id=1100', '1100', 'Poj', ' 1000MS', ' 10000K', 'Dreisam Equations', '<div class="ptx" lang="en-US">During excavations in the Dreisamwuste, a desert on some far away and probably uncivilized planet, sheets of paper containing mysterious symbols had been found. After a long investigation, the project scientists have concluded that the symbols might be parts of equations. If this were true, it would be proof that the Dreisamwuste was civilized a long long time ago. \r<br>The problem, however, is that the only symbols found on the sheets are digits, parantheses and equality signs. There is strong evidence that the people living in the Dreisamwuste knew only of three arithmetic operations: addition, subtraction, and multiplication. It is also known that the people of the Dreisamwuste did not have prioritization rules for arithmetic operations - they evaluate all terms strictly left to right. For example, for them the term 3 + 3 * 5 would be equal to 30, and not 18. \r<br> <br>But currently, the sheets do not contain any arithmetic operators. So if the hypothesis is true, and the numbers on the sheets form equations, then the operators must have faded away over time. \r<br> <br>You are the computer expert who is supposed to find out whether the hypothesis is sensible or not. For some given equations (without arithmetic operators) you must find out if there is a possibility to place +, -, and * in the expression, so that it yields a valid equation. For example, on one sheet, the string "18=7 (5 3) 2" has been discovered. Here, one possible solution is "18=7+(5-3)*2". But if there was a sheet containing "5=3 3", then this would mean that the Dreisamwuste people did not mean an equation when writing this. </br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Each equation to deal with occupies one line in the input. Each line begins with a positive integer (less than 2<sup>30</sup>) followed by an equality sign =. (For your convenience, the Dreisamwuste inhabitants used equations with trivial left sides only.) This is followed by up to 12 positive integers forming the right side of the equation. (The product of these numbers will be less than 2<sup>30</sup>.) There might be some parentheses around groups of one or more numbers. There will be no line containing more than 80 characters. There is no other limit for the amount of the parentheses in the equation. There will always be at least one space or parenthesis between two numbers, otherwise the occurrence of white space is unrestricted. \r<br> <br>The line containing only the number 0 terminates the input, it should not be processed. </br></br></div>', '<div class="ptx" lang="en-US">For each equation, output the line "Equation #n:", where n is the number of the equation. Then, output one line containing a solution to the problem, i. e. the equation with the missing +, -, and * signs inserted. Do not print any white space in the equation. \r<br> <br>If there is no way to insert operators to make the equation valid, then output the line "Impossible". \r<br> <br>Output one blank line after each test case. </br></br></br></br></div>', '<pre class="sio">18 = 7 (5 3) 2\r\n30 = 3 3 5\r\n18 = 3 3 5\r\n5 = 3 3\r\n0</pre>', '<pre class="sio">Equation #1:\r\n18=7+(5-3)*2\r\n\r\nEquation #2:\r\n30=3+3*5\r\n\r\nEquation #3:\r\nImpossible\r\n\r\nEquation #4:\r\nImpossible</pre>', '<div class="ptx" lang="en-US">In case of mutiple answers, output the least one in order (+ &lt; - &lt; *).</div>', 'Mid-Central European Regional Contest 1999', '20.32%', '54.32%', '2016-06-16 16:31:03', 18, '树的BFS', -0.940235831218385, -1.46522944371594),
(2, 'http://poj.org/problem?id=1101', '1101', 'Poj', ' 1000MS', ' 10000K', 'The Game', '<div class="ptx" lang="en-US">One morning, you wake up and think: "I am such a good programmer. Why not make some money?'''' So you decide to write a computer game. \r<br>The game takes place on a rectangular board consisting of w * h squares. Each square might or might not contain a game piece, as shown in the picture. \r<br> <br>One important aspect of the game is whether two game pieces can be connected by a path which satisfies the two following properties: \r<br> <br>It consists of straight segments, each one being either horizontal or vertical. \r<br> <br> <br>It does not cross any other game pieces. \r<br> <br>(It is allowed that the path leaves the board temporarily.) \r<br> <br>Here is an example: \r<br><center><img src="http://poj.org/images/1101/1101_1.jpg"/></center> <br>The game pieces at (1,3) and at (4, 4) can be connected. The game pieces at (2, 3) and (3, 4) cannot be connected; each path would cross at least one other game piece. \r<br> <br>The part of the game you have to write now is the one testing whether two game pieces can be connected according to the rules above. </br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input contains descriptions of several different game situations. The first line of each description contains two integers w and h (1 &lt;= w,h &lt;= 75), the width and the height of the board. The next h lines describe the contents of the board; each of these lines contains exactly w characters: a "X" if there is a game piece at this location, and a space if there is no game piece. \r<br> <br>Each description is followed by several lines containing four integers x1, y1, x2, y2 each satisfying 1 &lt;= x1,x2 &lt;= w, 1 &lt;= y1,y2 &lt;= h. These are the coordinates of two game pieces. (The upper left corner has the coordinates (1, 1).) These two game pieces will always be different. The list of pairs of game pieces for a board will be terminated by a line containing "0 0 0 0". \r<br> <br>The entire input is terminated by a test case starting with w=h=0. This test case should not be procesed. </br></br></br></br></div>', '<div class="ptx" lang="en-US">For each board, output the line "Board #n:", where n is the number of the board. Then, output one line for each pair of game pieces associated with the board description. Each of these lines has to start with "Pair m: ", where m is the number of the pair (starting the count with 1 for each board). Follow this by "ksegments.", where k is the minimum number of segments for a path connecting the two game pieces, or "impossible.", if it is not possible to connect the two game pieces as described above. \r<br> <br>Output a blank line after each board. </br></br></div>', '<pre class="sio">5 4\r\nXXXXX\r\nX   X\r\nXXX X\r\n XXX \r\n2 3 5 3\r\n1 3 4 4\r\n2 3 3 4\r\n0 0 0 0\r\n0 0</pre>', '<pre class="sio">Board #1:\r\nPair 1: 4 segments.\r\nPair 2: 3 segments.\r\nPair 3: impossible.</pre>', '', 'Mid-Central European Regional Contest 1999', '30.40%', '82.52%', '2016-06-16 16:31:03', 18, '树的BFS', -0.729844323018854, -0.628065579062273),
(3, 'http://poj.org/problem?id=1102', '1102', 'Poj', ' 1000MS', ' 10000K', 'LC-Display', '<div class="ptx" lang="en-US">A friend of you has just bought a new computer. Until now, the most powerful computer he ever used has been a pocket calculator. Now, looking at his new computer, he is a bit disappointed, because he liked the LC-display of his calculator so much. So you decide to write a program that displays numbers in an LC-display-like style on his computer. </div>', '<div class="ptx" lang="en-US">The input contains several lines, one for each number to be displayed. Each line contains two integers s, n (1 &lt;= s &lt;= 10, 0 &lt;= n &lt;= 99 999 999), where n is the number to be displayed and s is the size in which it shall be displayed. \r<br> <br>The input file will be terminated by a line containing two zeros. This line should not be processed. </br></br></div>', '<div class="ptx" lang="en-US">Output the numbers given in the input file in an LC-display-style using s "-" signs for the horizontal segments and s "|" signs for the vertical ones. Each digit occupies exactly s+2 columns and 2s+3 rows. (Be sure to fill all the white space occupied by the digits with blanks, also for the last digit.) There has to be exactly one column of blanks between two digits. \r<br> <br>Output a blank line after each number. (You will find a sample of each digit in the sample output.) </br></br></div>', '<pre class="sio">2 12345\r\n3 67890\r\n0 0</pre>', '<pre class="sio">      --   --        -- \r\n   |    |    | |  | | \r\n   |    |    | |  | | \r\n      --   --   --   -- \r\n   | |       |    |    |\r\n   | |       |    |    |\r\n      --   --        -- \r\n\r\n ---   ---   ---   ---   --- \r\n|         | |   | |   | |   |\r\n|         | |   | |   | |   |\r\n|         | |   | |   | |   |\r\n ---         ---   --- \r\n|   |     | |   |     | |   |\r\n|   |     | |   |     | |   |\r\n|   |     | |   |     | |   |\r\n ---         ---   ---   ---</pre>', '', 'Mid-Central European Regional Contest 1999', '40.02%', '92.00%', '2016-06-16 16:31:03', 3, '模拟', -0.566912595910605, 0.1708943790695),
(4, 'http://poj.org/problem?id=1103', '1103', 'Poj', ' 1000MS', ' 10000K', 'Maze', '<div class="ptx" lang="en-US">By filling a rectangle with slashes (/) and backslashes (\\), you can generate nice little mazes. Here is an example: \r<br><center><img src="http://poj.org/images/1103/1103_1.gif"/></center> <br>As you can see, paths in the maze cannot branch, so the whole maze only contains cyclic paths and paths entering somewhere and leaving somewhere else. We are only interested in the cycles. In our example, there are two of them. \r<br> <br>Your task is to write a program that counts the cycles and finds the length of the longest one. The length is defined as the number of small squares the cycle consists of (the ones bordered by gray lines in the picture). In this example, the long cycle has length 16 and the short one length 4. \r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input contains several maze descriptions. Each description begins with one line containing two integers w and h (1 &lt;= w,h &lt;= 75), the width and the height of the maze. The next h lines represent the maze itself, and contain w characters each; all these characters will be either "/" or "\\". \r<br> <br>The input is terminated by a test case beginning with w = h = 0. This case should not be processed. </br></br></div>', '<div class="ptx" lang="en-US">For each maze, first output the line "Maze #n:", where n is the number of the maze. Then, output the line "k Cycles; the longest has length l.", where k is the number of cycles in the maze and l the length of the longest of the cycles. If the maze does not contain any cycles, output the line "There are no cycles.". \r<br> <br>Output a blank line after each test case. </br></br></div>', '<pre class="sio">6 4\r\n\\//\\\\/\r\n\\///\\/\r\n//\\\\/\\\r\n\\/\\///\r\n3 3\r\n///\r\n\\//\r\n\\\\\\\r\n0 0</pre>', '<pre class="sio">Maze #1:\r\n2 Cycles; the longest has length 16.\r\n\r\nMaze #2:\r\nThere are no cycles.</pre>', '', 'Mid-Central European Regional Contest 1999', '39.87%', '82.71%', '2016-06-16 16:31:03', 19, '二叉树', -0.966494205827864, 0.158436583464534),
(5, 'http://poj.org/problem?id=1104', '1104', 'Poj', ' 1000MS', ' 32768K', 'Robbery', '<div class="ptx" lang="en-US">Inspector Robstop is very angry. Last night, a bank has been robbed and the robber has not been caught. And this happened already for the third time this year, even though he did everything in his power to stop the robber: as quickly as possible, all roads leading out of the city were blocked, making it impossible for the robber to escape. Then, the inspector asked all the people in the city to watch out for the robber, but the only messages he got were of the form "We don''t see him." \r<br>But this time, he has had enough! Inspector Robstop decides to analyze how the robber could have escaped. To do that, he asks you to write a program which takes all the information the inspector could get about the robber in order to find out where the robber has been at which time. \r<br> <br>Coincidentally, the city in which the bank was robbed has a rectangular shape. The roads leaving the city are blocked for a certain period of time t, and during that time, several observations of the form "The robber isn''t in the rectangle Ri at time ti" are reported. Assuming that the robber can move at most one unit per time step, your program must try to find the exact position of the robber at each time step. </br></br></br></div>', '<div class="ptx" lang="en-US">The input contains the description of several robberies. The first line of each description consists of three numbers W, H, t (1 &lt;= W,H,t &lt;= 100) where W is the width, H the height of the city and t is the time during which the city is locked. \r<br> <br>The next contains a single integer n (0 &lt;= n &lt;= 100), the number of messages the inspector received. The next n lines (one for each of the messages) consist of five integers ti, Li, Ti, Ri, Bi each. The integer ti is the time at which the observation has been made (1 &lt;= ti &lt;= t), and Li, Ti, Ri, Bi are the left, top, right and bottom respectively of the (rectangular) area which has been observed. (1 &lt;= Li &lt;= Ri &lt;= W, 1 &lt;= Ti &lt;= Bi &lt;= H; the point (1, 1) is the upper left hand corner, and (W, H) is the lower right hand corner of the city.) The messages mean that the robber was not in the given rectangle at time ti. \r<br> <br>The input is terminated by a test case starting with W = H = t = 0. This case should not be processed. </br></br></br></br></div>', '<div class="ptx" lang="en-US">For each robbery, first output the line "Robbery #k:", where k is the number of the robbery. Then, there are three possibilities: \r<br> <br>If it is impossible that the robber is still in the city considering the messages, output the line "The robber has escaped." \r<br> <br>In all other cases, assume that the robber really is in the city. Output one line of the form "Time step : The robber has been at x,y." for each time step, in which the exact location can be deduced. (x and y are the column resp. row of the robber in time step .) Output these lines ordered by time . \r<br> <br>If nothing can be deduced, output the line "Nothing known." and hope that the inspector will not get even more angry. \r<br> <br>Output a blank line after each processed case. </br></br></br></br></br></br></br></br></div>', '<pre class="sio">4 4 5\r\n4\r\n1 1 1 4 3\r\n1 1 1 3 4\r\n4 1 1 3 4\r\n4 4 2 4 4\r\n10 10 3\r\n1\r\n2 1 1 10 10\r\n0 0 0</pre>', '<pre class="sio">Robbery #1:\r\nTime step 1: The robber has been at 4,4.\r\nTime step 2: The robber has been at 4,3.\r\nTime step 3: The robber has been at 4,2.\r\nTime step 4: The robber has been at 4,1.\r\n\r\nRobbery #2:\r\nThe robber has escaped.</pre>', '', 'Mid-Central European Regional Contest 1999', '39.05%', '78.76%', '2016-06-16 16:31:03', 18, '树的BFS', -0.973822753221447, 0.0903339674907241),
(6, 'http://poj.org/problem?id=1105', '1105', 'Poj', ' 1000MS', ' 10000K', 'S-Trees', '<div class="ptx" lang="en-US">A Strange Tree (S-tree) over the variable set Xn = {x1,x2,...,xn} is a binary tree representing a Boolean function f:{0,1}-&gt;{0,1}. Each path of the S-tree begins at the root node and consists of n+1 nodes. Each of the S-tree''s nodes has a depth, which is the amount of nodes between itself and the root (so the root has depth 0). The nodes with depth less than n are called non-terminal nodes. All non-terminal nodes have two children: the right child and the left child. Each non-terminal node is marked with some variable xi from the variable set Xn. All non-terminal nodes with the same depth are marked with the same variable, and non-terminal nodes with different depth are marked with different variables. So, there is a unique variable xi1 corresponding to the root, a unique variable xi2 corresponding to the nodes with depth 1, and so on. The sequence of the variables xi1,xi2,...,xin is called the variable ordering. The nodes having depth n are called terminal nodes. They have no children and are marked with either 0 or 1. Note that the variable ordering and the distribution of 0''s and 1''s on terminal nodes are sufficient to completely describe an S-tree. \r<br>As stated earlier, each S-tree represents a Boolean function f. If you have an S-tree and values for the variables x1,x2,...,xn, then it is quite simple to find out what f(x1,x2,...,xn) is: start with the root. Now repeat the following: if the node you are at is labelled with a variable xi, then depending on whether the value of the variable is 1 or 0, you go its right or left child, respectively. Once you reach a terminal node, its label gives the value of the function. \r<br><center><img src="http://poj.org/images/1105/1105_1.gif"/></center> <br><center>Figure 1: S-trees for the x1 and (x2 or x3) function </center> <br>On the picture, two S-trees representing the same Boolean function,f(x1,x2,x3) = x1 and (x2 or x3), are shown. For the left tree, the variable ordering is x1, x2, x3, and for the right tree it is x3, x1, x2. \r<br> <br>The values of the variables x1,x2,...,xn, are given as a Variable Values Assignment (VVA) \r<br><center>(x1 = b1, x2 = b2, ..., xn = bn)</center> <br>with b1,b2,...,bn in {0,1}. For instance, ( x1 = 1, x2 = 1 x3 = 0) would be a valid VVA for n = 3, resulting for the sample function above in the value f(1,1,0) = 1 and (1 or 0) = 1. The corresponding paths are shown bold in the picture. \r<br> <br>Your task is to write a program which takes an S-tree and some VVAs and computes f(x1,x2,...,xn) as described above. </br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input contains the description of several S-trees with associated VVAs which you have to process. Each description begins with a line containing a single integer n, 1 &lt;= n &lt;= 7, the depth of the S-tree. This is followed by a line describing the variable ordering of the S-tree. The format of that line is xi1 xi2 ...xin. (There will be exactly n different space-separated strings). So, for n = 3 and the variable ordering x3, x1, x2, this line would look as follows: \r<br>x3 x1 x2 \r<br> <br>In the next line the distribution of 0''s and 1''s over the terminal nodes is given. There will be exactly 2^n characters (each of which can be 0 or 1), followed by the new-line character. The characters are given in the order in which they appear in the S-tree, the first character corresponds to the leftmost terminal node of the S-tree, the last one to its rightmost terminal node. \r<br> <br>The next line contains a single integer m, the number of VVAs, followed by m lines describing them. Each of the m lines contains exactly n characters (each of which can be 0 or 1), followed by a new-line character. Regardless of the variable ordering of the S-tree, the first character always describes the value of x1, the second character describes the value of x2, and so on. So, the line \r<br> <br>110 \r<br> <br>corresponds to the VVA ( x1 = 1, x2 = 1, x3 = 0). \r<br> <br>The input is terminated by a test case starting with n = 0. This test case should not be processed. </br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">For each S-tree, output the line "S-Tree #j:", where j is the number of the S-tree. Then print a line that contains the value of f(x1,x2,...,xn) for each of the given m VVAs, where f is the function defined by the S-tree. \r<br> <br>Output a blank line after each test case. </br></br></div>', '<pre class="sio">3\r\nx1 x2 x3\r\n00000111\r\n4\r\n000\r\n010\r\n111\r\n110\r\n3\r\nx3 x1 x2\r\n00010011\r\n4\r\n000\r\n010\r\n111\r\n110\r\n0</pre>', '<pre class="sio">S-Tree #1:\r\n0011\r\n\r\nS-Tree #2:\r\n0011</pre>', '', 'Mid-Central European Regional Contest 1999', '53.66%', '89.20%', '2016-06-16 16:31:04', 19, '二叉树', -0.957867613139477, 1.30372325941434),
(7, 'http://poj.org/problem?id=1106', '1106', 'Poj', ' 1000MS', ' 10000K', 'Transmitters', '<div class="ptx" lang="en-US">In a wireless network with multiple transmitters sending on the same frequencies, it is often a requirement that signals don''t overlap, or at least that they don''t conflict. One way of accomplishing this is to restrict a transmitter''s coverage area. This problem uses a shielded transmitter that only broadcasts in a semicircle. \r<br> <br>A transmitter T is located somewhere on a 1,000 square meter grid. It broadcasts in a semicircular area of radius r. The transmitter may be rotated any amount, but not moved. Given N points anywhere on the grid, compute the maximum number of points that can be simultaneously reached by the transmitter''s signal. Figure 1 shows the same data points with two different transmitter rotations. \r<br><center><img src="http://poj.org/images/1106/1106_1.gif"/></center> <br>All input coordinates are integers (0-1000). The radius is a positive real number greater than 0. Points on the boundary of a semicircle are considered within that semicircle. There are 1-150 unique points to examine per transmitter. No points are at the same location as the transmitter. \r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">Input consists of information for one or more independent transmitter problems. Each problem begins with one line containing the (x,y) coordinates of the transmitter followed by the broadcast radius, r. The next line contains the number of points N on the grid, followed by N sets of (x,y) coordinates, one set per line. The end of the input is signalled by a line with a negative radius; the (x,y) values will be present but indeterminate. Figures 1 and 2 represent the data in the first two example data sets below, though they are on different scales. Figures 1a and 2 show transmitter rotations that result in maximal coverage. </div>', '<div class="ptx" lang="en-US">For each transmitter, the output contains a single line with the maximum number of points that can be contained in some semicircle. </div>', '<pre class="sio">25 25 3.5\r\n7\r\n25 28\r\n23 27\r\n27 27\r\n24 23\r\n26 23\r\n24 29\r\n26 29\r\n350 200 2.0\r\n5\r\n350 202\r\n350 199\r\n350 198\r\n348 200\r\n352 200\r\n995 995 10.0\r\n4\r\n1000 1000\r\n999 998\r\n990 992\r\n1000 999\r\n100 100 -2.5</pre>', '<pre class="sio">3\r\n4\r\n4</pre>', '', 'Mid-Central USA 2001', '52.98%', '93.37%', '2016-06-16 16:31:04', 29, '几何', -0.865138502391894, 1.2472479193385),
(8, 'http://poj.org/problem?id=1107', '1107', 'Poj', ' 1000MS', ' 10000K', 'W''s Cipher', '<div class="ptx" lang="en-US">Weird Wally''s Wireless Widgets, Inc. manufactures an eclectic assortment of small, wireless, network capable devices, ranging from dog collars, to pencils, to fishing bobbers. All these devices have very small memories. Encryption algorithms like Rijndael, the candidate for the Advanced Encryption Standard (AES) are demonstrably secure but they don''t fit in such a tiny memory. In order to provide some security for transmissions to and from the devices, WWWW uses the following algorithm, which you are to implement.\r<br> <br>Encrypting a message requires three integer keys, k1, k2, and k3. The letters [a-i] form one group, [j-r] a second group, and everything else ([s-z] and underscore) the third group. Within each group the letters are rotated left by ki positions in the message. Each group is rotated independently of the other two. Decrypting the message means doing a right rotation by ki positions within each group.\r<br> <br>Consider the message the_quick_brown_fox encrypted with ki values of 2, 3 and 1. The encrypted string is _icuo_bfnwhoq_kxert. The figure below shows the decrypting right rotations for one character in each of the three character groups.  \r<br><center><img src="http://poj.org/images/1107/1107_1.png"/></center> <br>Looking at all the letters in the group [a-i] we see {i,c,b,f,h,e} appear at positions {2,3,7,8,11,17} within the encrypted message. After a right rotation of k1=2, these positions contain the letters {h,e,i,c,b,f}. The table below shows the intermediate strings that come from doing all the rotations in the first group, then all rotations in the second group, then all the rotations in the third group. Rotating letters in one group will not change any letters in any of the other groups.\r<br><center><img src="http://poj.org/images/1107/1107_2.gif"/></center> <br>All input strings contain only lowercase letters and underscores(_). Each string will be at most 80 characters long. The ki are all positive integers in the range 1-100.\r<br/></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Input consists of information for one or more encrypted messages. Each problem begins with one line containing k1, k2, and k3 followed by a line containing the encrypted message. The end of the input is signalled by a line with all key values of 0.</div>', '<div class="ptx" lang="en-US">For each encrypted message, the output is a single line containing the decrypted string. </div>', '<pre class="sio">2 3 1\r\n_icuo_bfnwhoq_kxert\r\n1 1 1\r\nbcalmkyzx\r\n3 7 4\r\nwcb_mxfep_dorul_eov_qtkrhe_ozany_dgtoh_u_eji\r\n2 4 3\r\ncjvdksaltbmu\r\n0 0 0\r\n</pre>', '<pre class="sio">the_quick_brown_fox\r\nabcklmxyz\r\nthe_quick_brown_fox_jumped_over_the_lazy_dog\r\najsbktcludmv</pre>', '', 'Mid-Central USA 2001', '50.06%', '93.67%', '2016-06-16 16:31:04', 3, '模拟', -0.853104540804646, 1.00473616489518),
(9, 'http://poj.org/problem?id=1108', '1108', 'Poj', ' 1000MS', ' 10000K', 'Split Windows', '<div class="ptx" lang="en-US">The Dotty Software Company makes software that is displayed on inexpensive text based terminals. One application for this system has a main window that can be subdivided into further subwindows. Your task is to take a description of the screen layout after a sequence of window splits and draw the minimum sized window grid that is consistent with the description.\r<br>In this problem we will concentrate on the boundaries of windows, so all the characters inside of windows will be left blank. Each window that is not further subdivided has a label. Each label is a distinct uppercase letter. For a text terminal the boundaries of windows must be drawn with characters, chosen as follows: A capital letter label is placed in the upper left-hand corner of each undivided window. Asterisks,''*'', appear in corners of windows where there is not a label. Dashes, ''-'', appear on upper and lower boundaries where there are not corners. Vertical bars, ''|'', appear on side boundaries where there are not corners.\r<br> <br>For example, the sequence of splits below would generate Window 1: Initially there could be an application window labeled M, that is split next into left and right subwindows, adding label R, and the left subwindow is split into top and bottom subwindows, adding the label C.\r<br><center><img src="http://poj.org/images/1108/1108_1.gif"/></center> <br>For each pattern of splits there is a binary tree of characters that can describe it. The window splitting and tree structures are described together, building up from the simplest cases.\r<br> <br>1. A window may be an undivided rectangle. Such a window has a capital letter as label. The tree for the window contains just the label.\r<br> <br>2. A window may either be split into left and right subwindows or into top and bottom subwindows, and the corresponding trees have as root the boundary character for the split: a vertical line ''|'' or a horizontal dash ''-'' respectively. The root has left and right subtrees corresponding to the top and bottom or left and right subwindows respectively.\r<br> <br>Tree 1, above, and Trees 2-4, below, would be consistent with Windows 1-4. Note that Tree 4 contains Trees 2 and 3. \r<br><center><img src="http://poj.org/images/1108/1108_2.gif"/></center> <br><center><img src="http://poj.org/images/1108/1108_3.gif"/></center> <br>The trees may be more succinctly expressed via a preorder traversal:\r<br> <br>1. The preorder traversal of a tree with just one node (containing a letter) is that letter.\r<br> <br>2. The preorder traversal of a tree with a left and a right subtree is the character from the root of the tree (''-'' or ''|'') followed by the preorder traversal of the left subtree, and then the preorder traversal of the right subtree.\r<br> <br>The preorder traversals for Trees 1 through 4 are\r<br> <br>|-MCR -|-ABC-D|E-FG -P-|Q|RST |-|-ABC-D|E-FG-P-|Q|RST\r<br> <br>Each undivided window must have space for at least one character inside. Hence each tree of splits will be associated with a minimum window size. Windows 1-4 are minimum sized windows for Trees 1-4. Each window illustrates the fact that even in a minimum sized window, not all undivided windows contain only one character.\r<br> <br>Consider Tree 4 and Window 4. The main window is split into a left window with Tree 2 and right window with Tree 3. The left window is like Window 2, but the right window is not just like Window 3. The heights of left and right subwindows must match, so the right window must be stretched.\r<br> <br>The stretching rule depends on a definition of the size of windows. For dimension calculations it is easiest to imagine that a window contains its interior and a half character wide boundary on all sides, so the total dimensions of a window are one more than the dimensions of the interior. Hence the minimum dimensions of a window are 2 by 2, since a window must contain one character inside, and we add one for the boundary. This definition also means that the sum of the widths of left and right subwindows is the width of their enclosing window. The sum of the heights of top and bottom subwindows is the height of their enclosing window.\r<br> <br>The right window in Window 4 must be stretched to match the height 10 of the left window. The right window is split into a top with tree P having minimum height 2 and a bottom with tree -|Q|RST having minimum height 4. The rule for the dimensions in the stretched window is that the heights of the subwindows expand in proportion to their minimum heights, if possible. Some symbols may help here: Let D = 10 be the height of the combined stretched window. We want to determine D1 and D2, the stretched heights of the top and bottom subwindow. Call the corresponding minimum dimensions d = 6, d1 = 2, and d2 = 4. If the window were expanded from a total height d to D in proportion, we would have D1 = d1*(D/d) = 2*(10/6) = 3.333...and D2 = d2*(D/d) = 6.666.... Since the results are not integers we increase D1 to 4 and decrease D2 to 6.\r<br> <br>There is a similar calculation for the bottom window with tree -|Q|RST. It is further subdivided into a top with tree |Q|RS and a bottom with tree T, each having minimum height 2 = d1 = d2. The heights need to add up to D = 6, so they are increased proportionally to D1 = D2 = 2*(6/4) = 3 (exact integers).\r<br> <br>The final dimensions of an enclosing window are always determined before the final dimensions of its subwindows. In this example only heights needed to be apportioned. If all horizontal and vertical splits were interchanged in this example, producing a tree -|-|ABC|D-E|FG|P|-Q-RST, then widths would be apportioned correspondingly, as shown in the third part of the sample output below. If the proportion calculations do not work out to integers, it is always the top or left subwindow whose dimension is increased to the next integer.\r<br/></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of input contains one integer, which is the total number of preorder traversals describing window structures. This line is followed by one line for each preorder traversal. Each preorder traversal will contain appropriate dividers ''|'' and ''-'' and from 1 to 26 uppercase letters.</div>', '<div class="ptx" lang="en-US">For each preorder traversal, print the number of the preorder traversal on one line followed by the minimum sized window grid that the traversal could represent. </div>', '<pre class="sio">3\r\n|-MCR\r\n|-|-ABC-D|E-FG-P-|Q|RST\r\n-|-|ABC|D-E|FG|P|-Q-RST </pre>', '<pre class="sio">1\r\nM-R-*\r\n| | |\r\nC-* |\r\n| | |\r\n*-*-*\r\n2\r\nA-C-P-----*\r\n| | |     |\r\nB-* |     |\r\n| | |     |\r\nD-*-Q-R-S-*\r\n|   | | | |\r\nE-F-* | | |\r\n| | T-*-*-*\r\n| G-*     |\r\n| | |     |\r\n*-*-*-----*\r\n3\r\nA-B-D-E---*\r\n| | | |   |\r\nC-*-* F-G-*\r\n|   | | | |\r\nP---Q-*T*-*\r\n|   |  |  |\r\n|   R--*  |\r\n|   |  |  |\r\n|   S--*  |\r\n|   |  |  |\r\n*---*--*--*</pre>', '', 'Mid-Central USA 2001', '55.63%', '75.82%', '2016-06-16 16:31:04', 19, '二叉树', -0.992319898672408, 1.46733564169289),
(10, 'http://poj.org/problem?id=1109', '1109', 'Poj', ' 1000MS', ' 10000K', 'Index Generation', '<div class="ptx" lang="en-US">Most nonfiction and reference books have an index to help readers find references to specific terms or concepts in the text. Here is a sample index.\r<br> <br><tt>larch, 4, 237, 238, 414\r<br>+ Monty Python and, 64, 65, 66\r<br>+ planting of, 17\r<br>Lenny Kravitz, 50\r<br>+ going his way, 53\r<br>lumbago, 107\r<br>mango\r<br>+ Chris Kattan, 380\r<br>+ storage of, 87, 90\r<br>+ use in Nethack, 500, 501\r<br>+ Vitamin C content, 192</br></br></br></br></br></br></br></br></br></br></tt> <br> <br>Each index entry contains a primary entry followed by zero or more secondary entries, which begin with a ''+''. Entries will normally be followed by a list of page references, but a primary entry might not be if at least one secondary entry is present (as is the case with mango, above). Primary entries are sorted, and secondary entries following a primary entry are also sorted. Sorting is case-insensitive. Page references for an entry are in ascending order and do not include duplicates. (A duplicate could occur if there are two or more identical entries on the same page.)\r<br> <br>Your task is to read a document that has index information embedded within it and produce the index. Documents consist of one or more lines of ASCII text. The page number starts at 1, and the character ''&amp;'' indicates the start of a new page (which adds 1 to the current page number). Index entries are indicated by a marker, which in its most elaborate form has the following syntax:\r<br> <br>{text%primary$secondary} \r<br>Here text is the text to be indexed, primary is an alternative primary entry, and secondary is a secondary entry. Both ''%primary'' and ''$secondary'' are optional, but if both are present they must appear in the order given. If primary is present then it is used as the primary entry, and if not then text is used as the primary entry. If secondary is present then the marker adds a page reference for that secondary entry; otherwise it adds a page reference for the primary entry. A single marker cannot add a page reference for both a primary and secondary entry. Here are examples of each of the four possible types of marker, which correspond to four of the entries in the sample index above.\r<br> <br>... his {lumbago} was acting up, so ...\r<br>... {Lenny%Lenny Kravitz} lit up the crowd with his version of ...\r<br>... Monty Python often used the {larch$Monty Python and} in ...\r<br>... when storing {mangos%mango$storage of}, be sure to ...\r<br> <br/></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input consists of one or more documents, followed by a line containing only ''**'' that signals the end of the input. Documents are implictly numbered starting with 1. Each document consists of one or more lines of text followed by a line containing only ''*''. Each line of text will be at most 79 characters long, not counting end-of-line characters. For document i, output the line ''DOCUMENT i'' followed by the sorted index using the exact output format shown in the examples.</div>', '<div class="ptx" lang="en-US">Note:\r<br> <br>A document will contain at most 100 markers, with at most 20 primary entries. \r<br>A primary entry will have at most 5 secondary entries. \r<br>An entry will have at most 10 unique page references (not including duplicates). \r<br>The character ''&amp;'' will not appear anywhere within a marker, and will appear at most 500 times within a document. \r<br>The character ''*'' is used only to signal the end of a document or the end of the input. \r<br>The characters ''{'', ''}'', ''%'', and ''$'' will only be used to define markers, and will not appear in any text or entries. \r<br>A marker may span one or more lines. Every end-of-line within a marker must be converted to a single space. \r<br>A space within a marker (including a converted end-of-line) is normally included in the text/entry, just like any other character. However, any space that immediately follows ''{'', immediately precedes ''}'', or is immediately adjacent to ''%'' or ''$'' must be ignored. \r<br>The total length of a marker, measured from the opening ''{'' to the closing ''}'', and in which all embedded end-of-lines are converted to spaces, will be at most 79 characters. </br></br></br></br></br></br></br></br></br></br></div>', '<pre class="sio">Call me Ishmael.\r\n*\r\nOne {fish $unary}, two {fish$ binary},&amp;red; {fish $ scarlet}, blue {fish$\r\nazure}. &amp; By { Dr. Seuss }.\r\n*\r\nThis is a {simple } &amp; &amp; { document} that &amp;{\r\nsimply %simple\r\n$adverb\r\n} &amp; {illustrates %vision} &amp;&amp;&amp;&amp;&amp; one {simple-minded% simple} {Judge}''s {vision} \r\nfor what a {document } might { look % vision} like.\r\n*\r\n**</pre>', '<pre class="sio">DOCUMENT 1\r\nDOCUMENT 2\r\nDr. Seuss, 3\r\nfish\r\n+ azure, 2\r\n+ binary, 1\r\n+ scarlet, 2\r\n+ unary, 1\r\nDOCUMENT 3\r\ndocument, 3, 10\r\nJudge, 10\r\nsimple, 1, 10\r\n+ adverb, 4\r\nvision, 5, 10</pre>', '', 'Mid-Central USA 2001', '36.06%', '64.96%', '2016-06-16 16:31:04', 12, 'Floyd', -0.992725537827034, -0.157991424901583),
(11, 'http://poj.org/problem?id=1110', '1110', 'Poj', ' 1000MS', ' 10000K', 'Double Vision', '<div class="ptx" lang="en-US">The DoubleVision company designs inks and fonts that can be easily read by both humans and machines. They design their fonts on a rectangular grid. Shown below is a very simple 5x3 design for the first five digits.\r<br><center><pre>\r<br>.o. .o. oo. oo. o.o\r<br>o.o .o. ..o ..o o.o\r<br>o.o .o. .o. oo. ooo\r<br>o.o .o. o.. ..o ..o\r<br>.o. .o. ooo oo. ..o</br></br></br></br></br></pre></center> <br>The ink appears to be normal black ink, but just underneath the surface DoubleVision adds a special polymer that can be detected by an infrared scanner. A human sees the black ink but not the polymer, and a machine sees the polymer but not the black ink. The only problem is that the polymer is much more expensive than the ink, so DoubleVision wants to use as little of it as possible. They have discovered that with many fonts, each symbol can be uniquely identified by at most two pixels. By only adding the polymer to one or two pixels per symbol, they drastically lower costs while still ensuring 100% accuracy in their scanners. The font shown above has this property; pixels that uniquely identify each letter are highlighted with ''#''. (There are other choices that would work as well.)\r<br><center><pre>\r<br>.#. .o. #o. oo. o.#\r<br>#.o .#. ..o ..o o.o\r<br>o.o .o. .o. #o. ooo\r<br>o.o .o. #.. ..o ..o\r<br>.o. .o. ooo #o. ..o</br></br></br></br></br></pre></center> <br>Your job is to write a program to determine if a given font has this property, and if so highlight the pixels.\r<br> <br/></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input consists of one or more test cases, followed by a line containing ''0 0 0'' (three zeros) that signals the end of the input. Each test case begins with a line containing three positive integers n, r, and c, separated by a space: n is the number of symbols in the font, r is the number of rows in each grid, and c is the number of columns in each grid. The next r lines contain the image of each symbol, using the exact format shown in the examples: a dot ''.'' represents an empty part of the grid, a lowercase ''o'' represents a pixel, and adjacent grids are separated by a space. The total width of each line will be at most 79 characters (not counting end-of-line characters), and r will be at most 10. The test cases are implicitly numbered starting with 1.</div>', '<div class="ptx" lang="en-US">For test case i, first output a line that says ''Test i''. Then determine if each symbol can be uniquely identified with one or two pixels. If not, output a line with the word ''impossible''. Otherwise, output the font in the same format except that the identifying pixels for each symbol are replaced with ''#''. \r<br> <br>In general there may be several different pixels or pixel pairs that uniquely identify a symbol. To ensure that the output is unique, we add the following definition and rules. When comparing two pixels, the topmost-leftmost pixel is the one closest to the top of the grid. If both pixels are on the same row, then the topmost-leftmost is the one closest to the left of the grid.\r<br> <br>If one pixel will work, highlight the topmost-leftmost pixel that works. Never highlight a two-pixel solution if a one-pixel solution is possible. If two pixels are needed, highlight the pair with the topmost-leftmost pixel. If two or more pairs have the same topmost-leftmost pixel, highlight the one with the topmost-leftmost other pixel.\r<br/></br></br></br></br></div>', '<pre class="sio">3 2 2\r\noo oo .o\r\no. .o o.\r\n3 2 2\r\noo oo .o\r\no. .o oo\r\n5 5 3\r\n.o. .o. oo. oo. o.o\r\no.o .o. ..o ..o o.o\r\no.o .o. .o. oo. ooo\r\no.o .o. o.. ..o ..o\r\n.o. .o. ooo oo. ..o\r\n1 2 4\r\n.o..\r\n...o\r\n0 0 0</pre>', '<pre class="sio">Test 1\r\nimpossible\r\nTest 2\r\n#o #o .o\r\n#. .# ##\r\nTest 3\r\n.#. .o. #o. oo. o.#\r\n#.o .#. ..o ..o o.o\r\no.o .o. .o. #o. ooo\r\no.o .o. #.. ..o ..o\r\n.o. .o. ooo #o. ..o\r\nTest 4\r\n.#..\r\n...o</pre>', '', 'Mid-Central USA 2001', '51.88%', '78.85%', '2016-06-16 16:31:04', 19, '二叉树', -0.989209998486939, 1.15589075156875),
(12, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1001', '1001', 'Zoj', '2S', '65536K', 'A + B Problem', '', '', '', '', '', '', '', '39.96%', NULL, '2016-06-16 16:31:05', 28, '未分类', 5.40905596302435, 1.07840887823245),
(13, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1002', '1002', 'Zoj', '2S', '65536K', 'Fire Net', '\n<hr>\n<p>\nSuppose that we have a square city with straight streets.  A map of a city is a square\nboard with n rows and n columns, each representing a street or a piece of wall.\n<p>A blockhouse is a small castle that has four openings through which \nto shoot.  The four openings are facing North, East, South, and West, respectively. \nThere will be one machine gun shooting through each opening. \n<p>Here we assume that a bullet is so powerful that it can run across \nany distance and destroy a blockhouse on its way.  On the other hand,\na wall is so strongly built that can stop the bullets.\n<p>The goal is to place as <i>many</i> blockhouses in a city as\npossible so that no two can destroy each other.  A configuration of\nblockhouses is <b><i>legal</i></b> provided that no two blockhouses are on the same\nhorizontal row or vertical column in a map unless there is at least one wall\nseparating them.  In this problem we will consider small square \ncities (at most 4x4) that contain walls through which\nbullets cannot run through.  \n\n<p>The following image shows five pictures of the same board.  The\nfirst picture is the empty board, the second and third pictures show legal\nconfigurations, and the fourth and fifth pictures show illegal configurations.\nFor this board, the maximum number of blockhouses in a legal configuration\nis 5; the second picture shows one way to do it, but there are several\nother ways.\n\n<p><center><img height="152" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1002%2F1002.gif" width="800"/>\n<p>Your task is to write a program that, given a description of a map, \ncalculates the maximum number of blockhouses that can be placed in the\ncity in a legal configuration.\n\n<p>The input file contains one or more map descriptions, followed by\na line containing the number 0 that signals the end of the file.  Each\nmap description begins with a line containing a positive integer <i>n</i>\nthat is the size of the city; <i>n</i> will be at most 4. The next <i>n</i>\nlines each describe one row of the map, with a ''<tt>.</tt>'' indicating an\nopen space and an uppercase ''<tt>X</tt>'' indicating a wall.  There are no\nspaces in the input file.\n\n<p>For each test case, output one line containing the\nmaximum number of blockhouses that can be placed in the city\nin a legal configuration.\n\n<p><b>Sample input:</b>\n<pre>4\n.X..\n....\nXX..\n....\n2\nXX\n.X\n3\n.X.\nX.X\n.X.\n3\n...\n.XX\n.XX\n4\n....\n....\n....\n....\n0\n</pre>\n<p><b>Sample output:</b>\n<pre>5\n1\n5\n2\n4\n</pre>\n<hr>\r\n            \r\n            \r\n                ', '', '', '', '', '', 'Source:Zhejiang University Local Contest 2001', '32.24%', NULL, '2016-06-16 16:31:05', 17, 'DFS', 0.556531905312574, 0.259874167785639),
(14, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1003', '1003', 'Zoj', '2S', '65536K', 'Crashing Balloon', '\n<hr>\n<p>\n\nOn every June 1st, the Children''s Day, there will be a game named "crashing balloon" on TV.\n  The rule is very simple.  On the ground there are 100 labeled \nballoons, with the numbers 1 to 100.  After the referee shouts "Let''s go!"\nthe two players, who each starts with a score of  "1", race to crash\nthe balloons by their feet and, at the same time,\nmultiply their scores by the numbers written on the balloons they crash. \nAfter a minute, the little audiences are allowed to take the remaining balloons away, \nand each contestant reports his\\her score, the product of the numbers\non the balloons he\\she''s crashed.  The unofficial winner is the player who\nannounced the highest score.\n<p>Inevitably, though, disputes arise, and so the official winner is not\ndetermined until the disputes are resolved.  The player who claims\nthe lower score is entitled to challenge his\\her opponent''s score.  The\nplayer with the lower score is presumed to have told the truth, because\nif he\\she were to lie about his\\her score, he\\she would surely come up with a bigger\nbetter lie.  The challenge is upheld if the player with the higher\nscore has a score that cannot be achieved with balloons not crashed by the\nchallenging player.  So, if the challenge is successful, the player\nclaiming the lower score wins.\n<p>So, for example, if one player claims 343 points and the other claims\n49, then clearly the first player is lying; the only way to score 343 is\nby crashing balloons labeled 7 and 49, and the only way to score 49 is by crashing\na balloon labeled 49.  Since each of two scores requires crashing the\nballoon labeled 49, the one claiming 343 points is presumed to be lying.\n<p>On the other hand, if one player claims 162 points and the other claims\n81, it is possible for both to be telling the truth (e.g. one crashes balloons\n2, 3 and 27, while the other crashes balloon 81), so the challenge would not\nbe upheld.\n<p>By the way, if the challenger made a mistake on calculating his/her score, \nthen the challenge would not be upheld.  For example, if one player claims \n10001 points and the other claims 10003, then clearly none of them are telling\nthe truth.  In this case, the challenge would not be upheld.\n<p>Unfortunately, anyone who is willing to referee a game of crashing balloon is\nlikely to get over-excited in the hot atmosphere that \nhe\\she could not reasonably be expected to perform the intricate calculations\nthat refereeing requires.  Hence the need for you, sober programmer,\nto provide a software solution.\n<h1>\n<tt><font size="+1">Input</font></tt></h1>\nPairs of unequal, positive numbers, with each pair on a single line, that\nare claimed scores from a game of crashing balloon.\n<h1>\n<tt><font size="+1">Output</font></tt></h1>\nNumbers, one to a line, that are the winning scores, assuming that the\nplayer with the lower score always challenges the outcome.\n\n', '', '', '\n<pre>\n343 49\n3599 610\n62 36\n\n</pre>\n', '\n<pre>\n49\n610\n62\n</pre>\n<hr>\r\n            \r\n            \r\n                ', '', 'Source:Zhejiang University Local Contest 2001', '25.13%', NULL, '2016-06-16 16:31:05', 17, 'DFS', 0.15478050087622, -0.493983577198405);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(15, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1004', '1004', 'Zoj', '2S', '65536K', 'Anagrams by Stack', '\n<hr>\n<p>\nHow can anagrams result from sequences of stack operations?  There are two\nsequences of stack operators which can convert TROT to TORT:\n\n<pre>\n[\ni i i i o o o o\ni o i i o o i o\n]\n</pre>\n<p>\nwhere <i>i</i> stands for Push and <i>o</i> stands\nfor Pop.  Your program should, given\npairs of words produce sequences of stack operations which convert the first\nword to the second.\n\n', '\n<p>\nThe input will consist of several lines of input.  The first line of each\npair of input lines is to be considered as a source word (which does not\ninclude the end-of-line character).  The second line (again, not including\nthe end-of-line character) of each pair is a target word.  The end of input\nis marked by end of file.\n\n', '\n<p>\nFor each input pair, your program should produce a sorted list of valid\nsequences of <i>i</i> and <i>o</i> which produce\nthe target word from the source word.\nEach list should be delimited by\n<pre>\n[\n]\n</pre>\nand the sequences should be printed in "dictionary order".  Within each\nsequence, each <i>i</i> and <i>o</i> is\nfollowed by a single space and each sequence is\nterminated by a new line.\n\n<h4>Process</h4>\n<p>\nA stack is a data storage and retrieval structure permitting two\noperations:\n\n<dir>\n	Push - to insert an item and<br>\n	Pop - to retrieve the most recently pushed item\n</br></dir>\n<p>\nWe will use the symbol <i>i</i> (in) for push\nand <i>o</i> (out) for pop operations for an\ninitially empty stack of characters.  Given an input word, some sequences\nof push and pop operations are valid in that every character of the word is\nboth pushed and popped, and furthermore, no attempt is ever made to pop the\nempty stack.  For example, if the word FOO is input, then the sequence:\n\n<dir>\n<table>\n<tr><td valign="center"><tt>i i o i o o</tt></td><td>is valid, but</td></tr>\n<tr><td valign="center"><tt>i i o      </tt></td>\n<td>is not (it''s too short), neither is</td></tr>\n<tr><td valign="center"><tt>i i o o o i</tt></td>\n<td>(there''s an illegal pop of an empty stack)</td></tr>\n</table>\n</dir>\n<p>\nValid sequences yield rearrangements of the letters in an input word.  For\nexample, the input word FOO and the sequence <tt>i i o i o o</tt> produce the\nanagram OOF.  So also would the sequence <tt>i i i o o o</tt>.  You\nare to write a program to input pairs of words and\noutput all the valid sequences of <tt>i</tt> and\n<tt>o</tt> which will produce the second member of each pair from the first.\n\n', '\n<pre>\nmadam\nadamm\nbahama\nbahama\nlong\nshort\neric\nrice\n</pre>\n<a blank="" input="" line="" terminate="" to="">\n', '\n<pre>\n[\ni i i i o o o i o o \ni i i i o o o o i o \ni i o i o i o i o o \ni i o i o i o o i o \n]\n[\ni o i i i o o i i o o o \ni o i i i o o o i o i o \ni o i o i o i i i o o o \ni o i o i o i o i o i o \n]\n[\n]\n[\ni i o i o i o o \n]\n</pre>\n<hr>\r\n            \r\n            \r\n                ', '', 'Source:Zhejiang University Local Contest 2001', '40.23%', NULL, '2016-06-16 16:31:05', 17, 'DFS', -0.461475544556378, 1.10703638753564),
(16, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1005', '1005', 'Zoj', '2S', '65536K', 'Jugs', '\n<hr>\n<p>\nIn the movie "Die Hard 3", Bruce Willis and Samuel L. Jackson \nwere confronted with the following puzzle. They were given a 3-gallon \njug and a 5-gallon jug and were asked to fill the 5-gallon jug with \nexactly 4 gallons. This problem generalizes that puzzle.\n<p>You have two jugs, A and B, and an infinite supply of water. \nThere are three types of actions that you can use: (1) you can fill \na jug, (2) you can empty a jug, and (3) you can pour from one jug to \nthe other. Pouring from one jug to the other stops when the first jug \nis empty or the second jug is full, whichever comes first.  \nFor example, if A has 5 gallons and B has 6 gallons and a capacity \nof 8, then pouring from A to B leaves B full and 3 gallons in A.\n<p>A problem is given by a triple (Ca,Cb,N), where Ca and Cb are the \ncapacities of the jugs A and B, respectively, and N is the goal.  \nA solution is a sequence of steps that leaves exactly N gallons in \njug B. The possible steps are\n<p>fill A\n<br>fill B\n<br>empty A\n<br>empty B\n<br>pour A B\n<br>pour B A\n<br>success\n<p>where "pour A B" means "pour the contents of jug A into jug B", \nand "success" means that the goal has been accomplished.\n<p>You may assume that the input you are given does have a solution.\n<p><b>Input</b>\n<p>Input to your program consists of a series of input lines each \ndefining one puzzle. Input for each puzzle is a single line of three \npositive integers: Ca, Cb, and N. Ca and Cb are the capacities of \njugs A and B, and N is the goal. You can assume 0 &lt; Ca &lt;= Cb \nand N &lt;= Cb &lt;=1000 and that A and B are relatively prime to \none another.\n<p><b>Output</b>\n<p>Output from your program will consist of a series of instructions \nfrom the list of the potential output lines which will result in \neither of the jugs containing exactly N gallons of water. The last \nline of output for each puzzle should be the line "success". \nOutput lines start in column 1 and there should be no empty lines \nnor any trailing spaces.\n<p></p>', '', '', '\n<pre>\n3 5 4\n5 7 3\n\n</pre>\n', '\n<pre>\nfill B\npour B A\nempty A\npour B A\nfill B\npour B A\nsuccess\nfill A\npour A B\nfill A\npour A B\nempty B\npour A B\nsuccess</pre>\n<hr>\r\n            \r\n            \r\n                ', '', 'Source:Zhejiang University Local Contest 2001', '40.14%', NULL, '2016-06-16 16:31:05', 14, 'BFS', -0.384158523047343, 1.09749388443458),
(17, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1006', '1006', 'Zoj', '2S', '65536K', 'Do the Untwist', '\n<hr>\n<p>\n<b><i>Cryptography</i></b> deals with methods of secret communication that\ntransform a message (the <b><i>plaintext</i></b>) into a disguised form (the\n<b><i>ciphertext</i></b>) so that no one seeing the ciphertext will be able\nto  figure out the plaintext except the intended recipient.\nTransforming the plaintext to the ciphertext is <b><i>encryption</i></b>;\ntransforming the ciphertext to the plaintext is <b><i>decryption</i></b>.\n<b><i>Twisting</i></b> is a simple encryption method that requires that the\nsender and recipient both agree on a secret key <i>k</i>, which is a\npositive integer.\n\n<p>The twisting method uses four arrays: <i>plaintext</i> and <i>ciphertext</i>\nare arrays of characters, and <i>plaincode</i> and <i>ciphercode</i> are\narrays of integers.  All arrays are of length <i>n</i>, where <i>n</i> is the\nlength of the message to be encrypted.  Arrays are origin zero, so the\nelements are numbered from 0 to <i>n</i> <font face="Symbol">-</font> 1.  For this problem all\nmessages will contain only lowercase letters, the period, and the\nunderscore (representing a space).\n\n<p>The message to be encrypted is stored in <i>plaintext</i>.  Given a key\n<i>k</i>, the encryption method works as follows.  First convert the\nletters in <i>plaintext</i> to integer codes in <i>plaincode</i> according to\nthe following rule: ''<tt>_</tt>'' = 0, ''<tt>a</tt>'' = 1, ''<tt>b</tt>'' = 2, ..., ''<tt>z</tt>'' = 26,\nand ''<tt>.</tt>'' = 27.  Next, convert each code in <i>plaincode</i> to an\nencrypted code in <i>ciphercode</i> according to the following formula: for all\n<i>i</i> from 0 to <i>n</i> <font face="Symbol">-</font> 1,\n\n<blockquote><i>ciphercode</i>[<i>i</i>] = (<i>plaincode</i>[<i>ki</i> mod <i>n</i>] <font face="Symbol">-</font> <i>i</i>) mod 28.</blockquote>\n<p>(Here <i>x</i> mod <i>y</i> is the positive remainder when <i>x</i> is divided by <i>y</i>.\nFor example, 3 mod 7 = 3, 22 mod 8 = 6, and -1 mod 28 = 27.  You\ncan use the C ''<tt>%</tt>'' operator or Pascal ''<tt>mod</tt>'' operator to compute\nthis as long as you add <i>y</i> if the result is negative.)\nFinally, convert the codes in <i>ciphercode</i> back to letters in\n<i>ciphertext</i> according to the rule listed above.  The final twisted\nmessage is in <i>ciphertext</i>. Twisting the message <tt>cat</tt> using the key 5\nyields the following:\n\n<p><center><table border="">\n<tr align="CENTER"><td align="LEFT">Array</td> <td>0</td> <td>1</td> <td>2</td></tr>\n<tr align="CENTER"><td align="LEFT"><i>plaintext</i></td> <td>''c''</td> <td>''a''</td> <td>''t''</td></tr>\n<tr align="CENTER"><td align="LEFT"><i>plaincode</i></td> <td>3</td> <td>1</td> <td>20</td></tr>\n<tr align="CENTER"><td align="LEFT"><i>ciphercode</i></td> <td>3</td> <td>19</td> <td>27</td></tr>\n<tr align="CENTER"><td align="LEFT"><i>ciphertext</i></td> <td>''c''</td> <td>''s''</td> <td>''.''</td></tr>\n</table>\n<p>Your task is to write a program that can <em>untwist</em> messages,\n<i>i.e.</i>, convert the ciphertext back to the original\nplaintext given the key <i>k</i>.  For example, given the key 5 and\nciphertext ''<tt>cs.</tt>'', your program must output the plaintext ''<tt>cat</tt>''.\n\n<p>The input file contains one or more test cases, followed by a line\ncontaining only the number 0 that signals the end of the file.\nEach test case is on a line by itself and consists of the key <i>k</i>, a\nspace, and then a twisted message containing at least one and at most 70\ncharacters.  The key <i>k</i> will be a positive integer not greater than\n300.  For each test case, output the untwisted message on a line\nby itself.\n\n<p><em>Note</em>: you can assume that untwisting a message always yields\na unique result.  (For those of you with some knowledge of basic number\ntheory or abstract algebra, this will be the case provided that the\ngreatest common divisor of the key <i>k</i> and length <i>n</i> is 1, which it \nwill be for all test cases.)\n\n<p><b>Example input:</b>\n<pre>5 cs.\n101 thqqxw.lui.qswer\n3 b_ylxmhzjsys.virpbkr\n0\n</pre>\n<p><b>Example output:</b>\n<pre>cat\nthis_is_a_secret\nbeware._dogs_barking\n</pre>\n<hr>\r\n            \r\n            \r\n                ', '', '', '', '', '', 'Source:Zhejiang University Local Contest 2001', '44.00%', NULL, '2016-06-16 16:31:05', 2, '数论', -0.515542183815376, 1.50676123965798),
(18, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1007', '1007', 'Zoj', '10S', '32768K', 'Numerical Summation of a Series', '\n<hr>\n<p>\nProduce a table of the values of the series\n\n<p>\n<center>\n<img height="64" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1007%2F1007-1.gif" width="190"><br>\nEquation 1\n</br></img>\n<p>\nfor the 2001 values of <i>x</i>, <i>x</i>= 0.000, 0.001, 0.002, ..., 2.000.\nAll entries of the\ntable must have an absolute error less than 0.5e-12 (12 digits of\nprecision).  This problem is based on a problem from Hamming (1962), when\nmainframes were very slow by today''s microcomputer standards.\n\n', '\n<p>\nThis problem has no input.\n\n', '\n<p>\nThe output is to be\nformatted as two columns with the values of <i>x</i> and\n<font face="Symbol">y</font>(<i>x</i>)\nprinted as in the C printf or the Pascal writeln.\n\n<pre>\nprintf("%5.3f %16.12f\\n", x, psix )		writeln(x:5:3, psix:16:12)\n</pre>\n<p>\nAs an example, here are 4 acceptable lines out of 2001.\n\n<pre>\n0.000   1.644934066848\n...\n0.500   1.227411277760\n...\n1.000   1.000000000000\n...\n2.000   0.750000000000\n</pre>\n<p>\nThe values of <i>x</i> should start at 0.000 and increase by 0.001 until the line\nwith <i>x</i>=2.000 is output.\n\n<h4>Hint</h4>\n<p>\nThe problem with summing the sequence in equation 1 is that too many terms\nmay be required to complete the summation in the given time.  Additionally,\nif enough terms were to be summed, roundoff would render any typical double\nprecision computation useless for the desired precision.\n\n<p>\nTo improve the convergence of the summation process note that\n\n<center>\n<img height="56" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1007%2F1007-2.gif" width="204"><br>\nEquation 2\n</br></img>\n<p>\nwhich implies <font face="Symbol">y</font>(1)=1.0.\nOne can then produce a series\nfor <font face="Symbol">y</font>(<i>x</i>) - <font face="Symbol">y</font>(1)\nwhich converges faster than the original series.  This series not only\nconverges much faster, it also reduces roundoff loss.\n\n<p>\nThis process of finding a faster converging series may be repeated to produce sequences which converge more and more rapidly than the previous ones.\n\n<p>\nThe following inequality is helpful in determining how may items are required in\nsumming the series above.\n\n<center>\n<img height="66" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1007%2F1007-3.gif" width="369"><br>\nEquation 3\n</br></img>\n<hr>\r\n            \r\n            \r\n                ', '', '', '', 'Source:Zhejiang University Local Contest 2001', '42.87%', NULL, '2016-06-16 16:31:05', 2, '数论', -0.708040148001408, 1.38694981183351),
(19, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1008', '1008', 'Zoj', '10S', '32768K', 'Gnome Tetravex', '\n<hr>\n<p> Hart is engaged in playing an interesting game, Gnome Tetravex, these days. \n  In the game, at the beginning, the player is given n*n squares. Each square \n  is divided into four triangles marked four numbers (range from 0 to 9). In a \n  square, the triangles are the left triangle, the top triangle, the right triangle \n  and the bottom triangle. For example, Fig. 1 shows the initial state of 2*2 \n  squares.</p>\n<p align="center"> <img height="196" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1008%2F1008-1.jpg" width="238"><br>\n  Fig. 1 The initial state with 2*2 squares </br></img></p>\n<p>The player is required to move the squares to the termination state. In the \n  termination state, any two adjoining squares should make the adjacent triangle \n  marked with the same number. Fig. 2 shows one of the termination states of the \n  above example.<br>\n</br></p>\n<p align="center"><img height="198" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1008%2F1008-2.jpg" width="232"><br>\n  Fig. 2 One termination state of the above example</br></img></p>\n<p>It seems the game is not so hard. But indeed, Hart is not accomplished in the \n  game. He can finish the easiest game successfully. When facing with a more complex \n  game, he can find no way out.<br>\n<br>\n  One day, when Hart was playing a very complex game, he cried out, "The \n  computer is making a goose of me. It''s impossible to solve it." To such \n  a poor player, the best way to help him is to tell him whether the game could \n  be solved. If he is told the game is unsolvable, he needn''t waste so much time \n  on it.</br></br></p>\n<p><br>\n', '<br>\n<br>\n  The input file consists of several game cases. The first line of each game case \n  contains one integer n, 0 &lt;= n &lt;= 5, indicating the size of the game.<br>\n<br>\n  The following n*n lines describe the marking number of these triangles. Each \n  line consists of four integers, which in order represent the top triangle, the \n  right triangle, the bottom triangle and the left triangle of one square.<br>\n<br>\n  After the last game case, the integer 0 indicates the termination of the input \n  data set.</br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  You should make the decision whether the game case could be solved. For each \n  game case, print the game number, a colon, and a white space, then display your \n  judgment. If the game is solvable, print the string "Possible". Otherwise, \n  please print "Impossible" to indicate that there''s no way to solve \n  the problem.<br>\n<br>\n  Print a blank line between each game case.<br>\n<br>\n  Note: Any unwanted blank lines or white spaces are unacceptable.</br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  2<br>\n  5 9 1 4<br>\n  4 4 5 6<br>\n  6 8 5 4<br>\n  0 4 4 3<br>\n  2<br>\n  1 1 1 1<br>\n  2 2 2 2<br>\n  3 3 3 3<br>\n  4 4 4 4<br>\n  0</br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n<b>Output for the Sample Input</b><br>\n<br>\n  Game 1: Possible</br></br></br></p>\n<p>Game 2: Impossible<br>\n</br></p>\n<hr>\r\n            \r\n            \r\n                ', '', '', 'Source:Asia 2001, Shanghai (Mainland China)', '21.69%', NULL, '2016-06-16 16:31:05', 13, 'DFS', -0.280758234675342, -0.858719251283512),
(20, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1009', '1009', 'Zoj', '10S', '32768K', 'Enigma', '\n<hr>\n<p>In World War II, Germany once used an electronic encryption machine called \n  Enigma, which played a decisive role in the initial victories of Nazi Germany. \n  It was proved to be one of the most reliable encryption systems in history. \n  However, it was the blind trust on the reliability of the machine that brought \n  about the doom of its user. <br>\n<br>\n  The structure of a one-rotor Enigma is shown as follows (the Enigma has only \n  six keys):</br></br></p>\n<p align="center"><img height="225" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1009%2F1009-1.jpg" width="500"/></p>\n<p>The key element of the Enigma is the rotor, as shown in the second figure, \n  which uses electronic circuits to transform plaintext (input from keyboard) \n  into cryptograph (output on screen). When one key on the keyboard is pressed, \n  the corresponding cryptograph is shown on screen. Then the rotor will automatically \n  revolve a one-letter-step to a different position. The following figures illustrate \n  how the rotor works when letter "b" is pressed three successively \n  times:</p>\n<p align="center"><img height="532" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1009%2F1009-2.jpg" width="400"/></p>\n<p>When letter "b" is pressed for the first time, the signal goes through \n  the circuit and "A" is shown on screen. When the key is released, \n  the rotor revolves one-letter-step to a different position that changes all \n  the corresponding circuits so that each letter now has a different cryptograph. \n  When letter "b" is pressed for the second time, the corresponding \n  cryptograph is "C". So when letter "b" is pressed for the \n  third time, the cryptograph is "E" according to the principle specified \n  above.<br>\n<br>\n  Now the following figure shows the structure of a two-rotor Enigma.</br></br></p>\n<p align="center"><img height="144" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1009%2F1009-3.jpg" width="600"/></p>\n<p> The difference is that when a key is released, the second rotor won''t revolve \n  a step until the first one has finished one circle and returns to the original \n  position. This is also the same in the case of three-rotor Enigma. That is: \n  Only after the first rotor has finished one circle and return to the initial \n  status, the second rotor will revolve a step. And only after the second rotor \n  has finish one circle, the third rotor will revolve a step.<br>\n<br>\n  However, how did the Allied Forces obtain the information encrypted by Enigma? \n  A person named Hans-Thilo Schimdt was very essential. He acted as a spy and \n  provided the initial status of the three rotors in each Enigma to the Allied \n  Forces once a month. The Allied Forces thus got everything they wanted by deciphering \n  the intercepted cryptograph using the information offered by the spy.<br>\n<br>\n  Now, please design a program to obtain the plaintexts using the information \n  offered by the Allied Forces.</br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  The input file contains several test cases representing several three-rotor \n  Enigmas. The last test case in the input file is followed by a line containing \n  a number 0.<br>\n<br>\n  Each case begins with a line containing an integer m (1 &lt;= m &lt;= 26) which indicates \n  the number of sequential letters each rotor has. The first letter will always \n  be A. (for example, m = 6 tells each rotor has 6 keys from A to F). The following \n  three lines describe the initial status of the three rotors respectively. Each \n  of them contains a string consisting of m capital character. For instance, a \n  rotor with the initial status "BADFEC" indicates that the initial \n  encrypt mechanism is to convert "abcdef" to "BADFEC", that \n  is, original letter "a" corresponding to cryptograph letter "B", \n  "b" to "A", "c" to "D", "d" \n  to "F", "e" to "E" and "f" to "C". \n  The forth line of each case contains an integer n which tells the number of \n  cryptographs generated by the above Enigma. Then the following n lines are the \n  n cryptographs respectively, which consist of m capital characters each.</br></br></br></br></br></p>\n<p><b><br>\n  Output</br></b><br>\n<br>\n  For each test case, the output should consist of two parts. The first line is \n  the number of Enigma and a colon. The following lines are the plaintexts deciphered \n  from the corresponding cryptographs. Each plaintext should be printed in one \n  line. Note: The characters in the plaintext should be converted to the corresponding \n  lowercases before they are printed.<br>\n<br>\n  Insert a blank line between test cases.</br></br></br></br></p>\n<p><br>\n', '', '<br>\n<br>\n  6<br>\n  BADFEC<br>\n  ABCDEF<br>\n  ABCDEF<br>\n  1<br>\n  ACE<br>\n  0</br></br></br></br></br></br></br></br></br></p>\n<p><br>\n<b>Output for the Sample Input<br>\n</br></b><br>\n  Enigma 1:<br>\n  bbb<br>\n</br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', '', 'Source:Asia 2001, Shanghai (Mainland China)', '22.58%', NULL, '2016-06-16 16:31:05', 6, '最短路', -0.683131491831607, -0.764354498395214),
(21, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1010', '1010', 'Zoj', '2S', '65536K', 'Area', '\n<hr>\n<p>Jerry, a middle school student, addicts himself to mathematical research. Maybe \n  the problems he has thought are really too easy to an expert. But as an amateur, \n  especially as a 15-year-old boy, he had done very well. He is so rolling in \n  thinking the mathematical problem that he is easily to try to solve every problem \n  he met in a mathematical way. One day, he found a piece of paper on the desk. \n  His younger sister, Mary, a four-year-old girl, had drawn some lines. But those \n  lines formed a special kind of concave polygon by accident as Fig. 1 shows.</p>\n<p align="center"><img height="92" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1010%2F1010-1.jpg" width="119">\n<br>\n  Fig. 1 The lines his sister had drawn </br></img></p>\n<p>"Great!" he thought, "The polygon seems so regular. I had just \n  learned how to calculate the area of triangle, rectangle and circle. I''m sure \n  I can find out how to calculate the area of this figure." And so he did. \n  First of all, he marked the vertexes in the polygon with their coordinates as \n  Fig. 2 shows. And then he found the result--0.75 effortless.</p>\n<p align="center"><img height="140" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1010%2F1010-2.jpg" width="152"><br>\n  Fig.2 The polygon with the coordinates of vertexes</br></img></p>\n<p>Of course, he was not satisfied with the solution of such an easy problem. \n  "Mmm, if there''s a random polygon on the paper, then how can I calculate \n  the area?" he asked himself. Till then, he hadn''t found out the general \n  rules on calculating the area of a random polygon. He clearly knew that the \n  answer to this question is out of his competence. So he asked you, an erudite \n  expert, to offer him help. The kind behavior would be highly appreciated by \n  him.</p>\n<p><br>\n', '<br>\n<br>\n  The input data consists of several figures. The first line of the input for \n  each figure contains a single integer n, the number of vertexes in the figure. \n  (0 &lt;= n &lt;= 1000).<br>\n<br>\n  In the following n lines, each contain a pair of real numbers, which describes \n  the coordinates of the vertexes, (xi, yi). The figure in each test case starts \n  from the first vertex to the second one, then from the second to the third, \n  ���� and so on. At last, it closes from the nth vertex to the first one.<br>\n<br>\n  The input ends with an empty figure (n = 0). And this figure not be processed.</br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  As shown below, the output of each figure should contain the figure number and \n  a colon followed by the area of the figure or the string "Impossible".<br>\n<br>\n  If the figure is a polygon, compute its area (accurate to two fractional digits). \n  According to the input vertexes, if they cannot form a polygon (that is, one \n  line intersects with another which shouldn''t be adjoined with it, for example, \n  in a figure with four lines, the first line intersects with the third one), \n  just display "Impossible", indicating the figure can''t be a polygon. \n  If the amount of the vertexes is not enough to form a closed polygon, the output \n  message should be "Impossible" either.<br>\n<br>\n  Print a blank line between each test cases.</br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  5<br>\n  0 0<br>\n  0 1<br>\n  0.5 0.5<br>\n  1 1<br>\n  1 0<br>\n  4<br>\n  0 0<br>\n  0 1<br>\n  1 0<br>\n  1 1<br>\n  0</br></br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n<b>Output for the Sample Input</b><br>\n<br>\n  Figure 1: 0.75</br></br></br></p>\n<p>Figure 2: Impossible<br>\n</br></p>\n<hr>\r\n            \r\n            \r\n                ', '', '', 'Source:Asia 2001, Shanghai (Mainland China)', '23.26%', NULL, '2016-06-16 16:31:05', 2, '数论', -0.62485007302654, -0.692255586076065),
(22, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1011', '1011', 'Zoj', '2S', '65536K', 'NTA', '\n<hr>\n<p>The NTA (Non-deterministic Tree Automata) is a kind of tree structure device. \n  The device is built in a set of operating rules. With these rules the device \n  can produce several signals, which will form a signal system. In such a system, \n  one signal is the starting signal, several signals are the acceptable signals, \n  and the others are the auxiliary ones. A pair of signals is said to be an acceptable \n  pair if both two signals of the pair are acceptable.<br>\n<br>\n  The trees discussed here are all binary trees. Every non-leaf node has two successors. \n  In any finite tree, each node has a signal-transmitting element. When a signal \n  arrives at one node, the signal meets the signal transmitting substance, and \n  triggers off signal reactions, which will produce several pairs of signals. \n  Then the device selects a pair of signals non-deterministically and sends them \n  to its successors. The first signal in the signal pair is sent to the left successive \n  node and the second one is sent to the right successive node. <br>\n<br>\n  The whole operation for an NTA is as follows:<br>\n<br>\n  The device first sends the starting signal to the root node. According to the \n  signal transmitting substance at the root node, the device selects a pair of \n  signals non-deterministically and sends the first to the left son and the second \n  to the right son. Each of the two signals then meets the signal transmitting \n  substance at the corresponding node and produces another two signals. The course \n  proceeds down until the signals arrive at the leaves. <br>\n<br>\n  If a signal reaches one leaf and the leaf can produce a pair of acceptable signals, \n  we say the leaf is "shakable". A transmission of signals from the \n  root to leaves is said to be valid if all leaves are "shakable". A \n  tree structure with signal transmitting substance is valid if there exists such \n  a valid transmission. A tree is invalid if all the transmissions are invalid.<br>\n<br>\n  For simplicity, we denote the signal transmitting elements by consecutive lowercase \n  letters "a", "b", "c", etc.. The signals of an \n  NTA are consecutive numbers 0,1,2, ..., and so on. The first signal 0 is always \n  a starting signal. Thus the signals for a 4-signal NTA are "0" "1" \n  "2" and "3". Accepting signals are arranged at the end of \n  the number sequence so that if a 4-signal NTA has two accepting signals, the \n  accepting signals are "2" and "3". The transition rules \n  of signals are based on a transition table. For example, the following table \n  describes a transition table with four signals "0", "1", \n  "2", "3" and with three signal transmitting elements "a", \n  "b" and "c". </br></br></br></br></br></br></br></br></br></br></p>\n<p> </p>\n<table border="1" width="59%">\n<tr>\n<td width="20%">T</td>\n<td width="26%">a</td>\n<td width="28%">b</td>\n<td width="26%">c</td>\n</tr>\n<tr>\n<td width="20%">0</td>\n<td width="26%">(1,2)</td>\n<td width="28%">(2,1)</td>\n<td width="26%">(1,0)</td>\n</tr>\n<tr>\n<td width="20%">1</td>\n<td width="26%">(2,2)</td>\n<td width="28%">(0,2),(1,0)</td>\n<td width="26%">(3,2)</td>\n</tr>\n<tr>\n<td width="20%">2</td>\n<td width="26%">(2,2)</td>\n<td width="28%">(2,3)</td>\n<td width="26%">(1,2)</td>\n</tr>\n<tr>\n<td width="20%">3</td>\n<td width="26%">(1,2)</td>\n<td width="28%">(2,1)</td>\n<td width="26%">(3,2)</td>\n</tr>\n</table>\n<div align="center">\n<p> </p>\n</div>\n<p>In this transition table some reactions of signals on certain signal transmitting \n  elements are deterministic, and others are non-deterministic. In the example \n  above, if signal "1" reaches the node with the transmitting element \n  "b", the reaction is non-deterministic.<br>\n<br>\n  Now your task is to write a program to judge if a tree structure with certain \n  signal transmitting substance is valid.</br></br></p>\n<p><br>\n', '<br>\n<br>\n  The input file contains several cases. Each case describes a sequence of NTA \n  descriptions and some initial tree configurations. The first line for each case \n  consists of three integers n, m and k. The integer n is the number of signals, \n  m indicates the number of accepting signals, and k is number of signal transmitting \n  elements. The following n k lines describe the transition table in row-major \n  order. Each transition of a signal on signal transmitting element is given on \n  a separate line. On such line every two numbers represent a possible transition.<br>\n<br>\n  This is followed by the description of tree structures. For every tree structure \n  a number L is given on a separate line to indicate the level of the tree. The \n  following L+1 lines containing a sequence of letters describe the tree structure. \n  Each level is described in one line. There exist one space between two successive \n  letters. The 0-th level begins firstly. In the tree structure, the empty nodes \n  are marked by "*". The tree structure with L=-1 terminates the configurations \n  of tree structures for that NTA, and this structure should not be judged.<br>\n<br>\n  The input is terminated by a description starting with n=0, m=0 and k=0. This \n  description should not be processed.<br>\n<br>\n  Note: In each case, NTA will have at most l5 signals and 10 characters. The \n  level of each tree will be no more than 10.</br></br></br></br></br></br></br></br></br></p>\n<p><b><br>\n  Output</br></b> <br>\n<br>\n  For each NTA description, print the number of the NTA (NTAl, NTA2, etc.) followed \n  by a colon. Then for each initial tree configuration of the NTA print the word \n  "Valid" or "Invalid". <br>\n<br>\n  Print a blank line between NTA cases.</br></br></br></br></p>\n<p><br>\n', '', '<br>\n<br>\n  4 2 3<br>\n  1 2<br>\n  2 1<br>\n  1 0<br>\n  2 2<br>\n  0 2 1 0<br>\n  3 2<br>\n  2 2<br>\n  2 3<br>\n  1 2<br>\n  1 2<br>\n  2 1<br>\n  3 2<br>\n  3<br>\n  a<br>\n  b c<br>\n  a b c b<br>\n  b a b a c a * *<br>\n  2<br>\n  b<br>\n  a b<br>\n  b c * *<br>\n  -1<br>\n  0 0 0</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n<b>Output for the Sample Input</b><br>\n<br>\n  NTA1:<br>\n  Valid<br>\n  Invalid<br>\n</br></br></br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', '', 'Source:Asia 2001, Shanghai (Mainland China)', '22.38%', NULL, '2016-06-16 16:31:05', 19, '二叉树', -0.841634840662461, -0.785560060842023),
(23, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1012', '1012', 'Zoj', '10S', '32768K', 'Mainframe', '\n<hr>\n<p>Mr. Ronald is responsible for the administration of the mainframe in ACM (Agent \n  on Computing of Mathematics). The agent undertakes the mathematical computing \n  jobs from some companies, and gain the rewards after has fulfilled the jobs \n  on the mainframe. So the mainframe is very valuable to ACM. Mr. Ronald is required \n  to arrange the order of those jobs running on mainframe. Once a job is to run, \n  he examines the free resources for the job. If the resources meet the job''s \n  requirement, he assigns those resources to the job. Otherwise, the job will \n  be suspended until there are enough resources.<br>\n</br></p>\n<p align="center"><img height="142" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1012%2F1012.jpg" width="316"/></p>\n<p> Because of unfamiliar with the task at first, he turned everything upside \n  down. As time went by, he became competent on it. Moreover, he had concluded \n  a set of byelaw as following: </p>\n<p>1. The mainframe has M CPUs and N memories can be assigned.<br>\n<br>\n  2. There exists a queue for the jobs waiting to be executed. You may assume \n  the queue is large enough to hold all the waiting jobs.<br>\n<br>\n  3. A job Ji which need Ai CPUs and Bi memories, reaches the queue on time Ti. \n  The job is required to be accomplished before time Ui. After successfully completed, \n  ACM may get Vi($) as the reward. If it finishes before the timeline, the extra \n  bonus is Wi($) per hour. If the job is late, the punishment is Xi($) per hour. \n  For example, we may assume that a job''s value is 10$, its timeline is 8, and \n  the punishment is 2$ per hour. If the job is completed at time 10, ACM will \n  get 10-(10-8)*2=6$.<br>\n<br>\n  4. When the job start executing, the required CPUs and memories are seized by \n  this job, and couldn''t be assigned again for the other job to be executed simultaneously. \n  After completing the job, those resources will be released. If the resources \n  are enough, more jobs could be executed simultaneously.<br>\n<br>\n  5. For the sake of the share in the mainframe''s computing capability, each job \n  will be finished just in an hour from the start of executing. You may assume \n  each job costs exactly one hour.<br>\n<br>\n  6. When there are no jobs to be executed, the mainframe will be idle until a \n  job arrives at the job queue.<br>\n<br>\n  7. If there are more than one jobs arrive at the queue, the more valuable job \n  will be executed first. You may assume the values of the jobs are always unequal \n  (Vi��Vj).<br>\n<br>\n  8. If the free CPUs or memories couldn''t satisfy the requirement of the job, \n  the job will be suspended for an hour without occupying any resources. An hour \n  later, the resources will be examined again for this job, regardless the other \n  jobs in the queue. If the requirement unsatisfied again, it remains suspended \n  for the next hour, and other jobs in the queue will try to be assigned the resources. \n  Otherwise the job will seize the required CPUs and memories and start executing.<br>\n<br>\n  9. When more than one jobs are suspended, the earlier arrived will try to be \n  assigned first.</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p>Using the byelaw, Mr. Ronald may deal with the routines very well. But now, \n  besides the routines, ACM ask him to compute the income according to the job \n  list. Given the timeline F, he has to calculate the jobs that had been executed \n  or should be executed. Of course, according to job Ji, if Ui&gt;F and the job \n  hadn''t been executed, it shouldn''t been taken into account; but those which \n  had been executed or Ui&lt;=F should been counted. If the job hadn''t been executed, \n  it will not bring ACM any value, which means only punishment to the timeline \n  should be calculated.<br>\n<br>\n  Indeed, his programming ability is not good enough, and he does not like to \n  compute manually. So he is uneasy about it. Could you help him to solve this \n  problem?</br></br></p>\n<p><b><br>\n  Input</br></b><br>\n<br>\n  The input contains several test cases, each of which describes the mainframe''s \n  resources and the job list. Each test case begins with a line containing a single \n  integer F, 0 &lt;= F &lt;= 10000, the time line. The following line consists of three integers \n  M, N and L (M, N, L &gt;= 0). M is the number of CPU in the mainframe, and N is the \n  memory size. L represents the number of jobs in the job list. There will be \n  10000 jobs at most.<br>\n<br>\n  The subsequent L lines in the test case describe the information of the jobs. \n  The data which describing job Ji consist of 7 integers Ai, Bi, Ti, Ui, Vi, Wi, \n  Xi. Ai and Bi indicate the requirements on CPU and memory (Ai, Bi &gt;= 0). Ti and \n  Ui indicate the job''s arriving time and the timeline (0 &lt;= Ti &lt;= Ui). Vi, Wi, Xi \n  are the reward, bonus and punishment of the job (Vi, Wi, Xi &gt;= 0).<br>\n<br>\n  The input file ends with an empty test case (F=0). And this case should not \n  be processed.</br></br></br></br></br></br></p>\n<p><br>\n', '', '<br>\n<br>\n  Your program must compute the total income of the mainframe according to the \n  job list. For each test case, print the case number, a colon, and a white space, \n  then the income.<br>\n<br>\n  Print a blank line after each test case.<br>\n<br>\n  Note: Don''t count the jobs which hadn''t been executed, and their timelines are \n  later than F.</br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  10<br>\n  4 256 3<br>\n  1 16 2 3 10 5 6<br>\n  2 128 2 4 30 10 5<br>\n  2 128 2 4 20 10 5<br>\n  0</br></br></br></br></br></br></br></br></p>\n<p><br>\n<b>Output for the Sample Input<br>\n</br></b><br>\n  Case 1: 74<br>\n</br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', '', 'Source:Asia 2001, Shanghai (Mainland China)', '21.33%', NULL, '2016-06-16 16:31:05', 3, '模拟', -0.884024467736448, -0.896889263687767),
(24, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1013', '1013', 'Zoj', '10S', '32768K', 'Great Equipment', '\n<hr>\n<p>Once upon a time, there lived Catherine Ironfist, the Queen of Enroth. One \n  day, she received the news of her father''s death. So she sailed for Erathia \n  to attend her father''s funeral. Fearing the worst, she assembled a military \n  fleet as her escort. On reaching the coast of Erathia, Catherine found an allied \n  wizard''s tower, devastated from battle and abandoned. There she learned that \n  a black-hearted knight poisoned her father using a goblet of wine, and Erathia \n  was falling to the enemies. And then, she mustered local armies, and marched \n  to Erathia''s castle, restoring lost land along the way.<br>\n<br>\n  During the battles, she found that the equipments for the soldiers were in urgent \n  need. And she knew clearly that the best equipments were made by the battle \n  dwarf''s workshop in the world. The workshop''s equipments were well known for \n  the firmness and top-quality. "Cloak of the Undead King", "Armor \n  of the Damned", "Angelic Helm" are the nonesuch ones. But unfortunately, \n  the workshop was seated at the Erathia''s castle, the territory under the enemy''s \n  control. So she sent a brave volunteer to come into the castle and asked for \n  the workshop''s help.<br>\n<br>\n  "It''s our pleasure to help the righteous heroine." Rion, the leader \n  of the workshop sent the message to Catherine, " We haven''t enough resources \n  to build the nonesuch equipments. So we''ll try to offer the ordinary equipments \n  as more as possible. Still, those ones are much better the equipments made by \n  other workshops. But we have faced a difficult problem. The castle is in a state \n  of siege. The guards prohibited the equipments to be carried away from the castle. \n  We have to ask for the trade caravans'' help. As you know, each trade caravan''s \n  capability of carrying equipments is limited. If they had carried a little more, \n  they would be detected by the guards, which would lead them into the prison. \n  So you have to arrange how to carry these equipments."<br>\n<br>\n  The workshop would offer helms, armors and boots. These three ones had different \n  defend capabilities. Also, their weight and size were different from each other. \n  What''s more, Rion had told Catherine that if armed with those three ones together, \n  they would form a set of equipments, which might provide much more defend capability. \n  As far as the trade caravan was concerned, each one had its special weight limitation \n  and size limitation. Catherine had to make the decision on how to arrange the \n  transportation plan to provide her soldiers as more defend capabilities as possible. \n  Could you help her to finish the plan?</br></br></br></br></br></br></p>\n<p><br>\n<b>Input<br>\n</br></b><br>\n  The input describes several test cases. The first line of input for each test \n  case contains a single integer n, the number of trade caravans (0 &lt;= n &lt;= 100).<br>\n<br>\n  The following four lines describe the information of those equipments. The first \n  line contains three integers w1, s1 and d1, indicating the weight, size and \n  defend capabilities of the helm. The integers w2, s2 and d2 in the second line \n  represent the weight, size and defend capabilities of the armor. Also, in the \n  third line, w3, s3 and d3 are the weight, size and defend capabilities of the \n  boot. The fourth line contains four integers c1, c2, c3 and d4. Among those \n  integers, c1, c2, c3 are the number of helms, armors and boots in a set of equipments, \n  d4 is the capability of this set.<br>\n<br>\n  In the test case, following those data are n lines, describing the carrying \n  capabilities of the trade caravans. Each line contains two integers, xi and \n  yi, indicating the weight limit and size limit of a trade caravan.<br>\n<br>\n  The input is terminated by a description starting with n = 0. This description \n  should not be processed.<br>\n<br>\n  Note: Because of the trade caravans'' carrying capabilities, you may assume the \n  quantities of the helms, armors and boots will not exceed 500 respectively.</br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n', '', '<br>\n<br>\n  Your program must compute the defend capability of the best carrying plan. That \n  is, after having performed the carrying plan, the defend capability of the equipments \n  which have been carried away from the castle should be the largest. For each \n  test case in the input file, print the case number and a colon, and then the \n  defend capability of those equipments.<br>\n<br>\n  Print a blank line between test cases.</br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  3<br>\n  1 1 3<br>\n  5 6 10<br>\n  2 1 2<br>\n  1 1 1 50<br>\n  1 1<br>\n  5 6<br>\n  2 1<br>\n  0</br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n<b>Output for the Sample Input</b><br>\n<br>\n  Case 1: 50<br>\n</br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', '', 'Source:Asia 2001, Shanghai (Mainland China)', '28.63%', NULL, '2016-06-16 16:31:05', 4, '动规', -0.791748433576202, -0.122886234379256),
(25, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1014', '1014', 'Zoj', '2S', '65536K', 'Operand', '\n<hr>\n<p>Professor Maple teaches mathematics in a university. He have invented a function \n  for the purpose of obtaining the operands from an expression. The function named \n  op(i,e) can be described as follows: <br>\n<br>\n  The expression e may be divided into sub-expression(s) by the operator, which \n  has the lowest priority in the expression. For example, the expression "a*b+b*c+c*d" \n  should be divided into three sub-expressions "a*b", "b*c" \n  and "c*d", because the operator "+" has the lowest priority. \n  The purpose of this function is to extract the ith sub-expression as the result. \n  So, in the example above, op(2,e)=b*c.</br></br></p>\n<p><br>\n  If we regard the sub-expression as the main expression, it might be divided \n  again and again. Obviously, the dividing process is recursive. As you see, the \n  following example is much more complex: </br></p>\n<p>Let p:=a^b*c+(d*c)^f*z+b<br>\n  op(1,op(1,op(2,p)))=(d*c)<br>\n  op(1,op(1,op(1,op(2,p))))=d*c<br>\n  op(2,op(2,p))=z<br>\n  op(3,p)=b<br>\n  op(1,op(3,p))=b</br></br></br></br></br></p>\n<p>Professor Maple is so lazy that he would leave the work to computer rather \n  than do it himself, when the expression is long and complicated. Of course, \n  without your program, the computer won''t work out the result automatically.</p>\n<p><br>\n', '<br>\n<br>\n  The input file contains several test cases. The last test case in the input \n  file is followed by a line containing a symbol "*", indicating the \n  end of the input data. Each test case consists of two parts. The first part \n  describes the expression, while the second part contains several questions, \n  which should be calculated according to the expression.<br>\n<br>\n  The first line of each test case contains an expression consists of the expression \n  name, ":=" and the content of the expression. The expression name \n  is a lowercase. And the content is composed by lowercases and operators "+", \n  "(", ")", "*" and "^". For example, \n  here is a valid expression, p:=a^b*c+(d*c)^f*z+b. Among those operators, "(" \n  and ")" have the highest priority. The operator "^" has \n  a lower priority, and then "*". The priority of the operator "+" \n  is the lowest.<br>\n<br>\n  The second line of each test case contains an integer n indicating n questions \n  based on the above expression. This is followed by n lines. Each of them contains \n  the description of one question, which consists of integers. For example, the \n  question with three integers "2 1 1" describes the function op(1,op(1,op(2,e))). \n  To compute this function, we have to keep to the following sequence: First, \n  according to the first integer 2, divide the expression and extract the 2nd \n  sub-expression. Then, according to the second integer 1, divide the sub-expression \n  and extract the 1st one. Finally, according to the third integer 1, divide the \n  outcome again, and extract the result.</br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  For each test case, display the expression name and a colon on the first line. \n  Then display the result of each question on a line. The layout of the output \n  is shown in the sample output.<br>\n<br>\n  You may assume that all expressions and functions are always valid.<br>\n  Display a blank line between test cases.</br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  p:=a^b*c+(d*c)^f*z+b<br>\n  4<br>\n  2 1 1<br>\n  2 2<br>\n  3<br>\n  3 1<br>\n  a:=(x+y)<br>\n  3<br>\n  1<br>\n  1 2<br>\n  1 2 1<br>\n  * </br></br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n<b>Output for the Sample Input</b><br>\n<br>\n  Expression p:<br>\n  op(1,op(1,op(2,p)))=(d*c)<br>\n  op(2,op(2,p))=z<br>\n  op(3,p)=b<br>\n  op(1,op(3,p))=b</br></br></br></br></br></br></br></p>\n<p>Expression a:<br>\n  op(1,a)=x+y<br>\n  op(2,op(1,a))=y<br>\n  op(1,op(2,op(1,a)))=y<br>\n</br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', '', 'Source:Asia 2001, Shanghai (Mainland China)', '21.79%', NULL, '2016-06-16 16:31:05', 17, 'DFS', -0.905962049800004, -0.848116470060108);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(26, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1015', '1015', 'Zoj', '10S', '32768K', 'Fishing Net', '\n<hr>\n<p>In a highly modernized fishing village, inhabitants there make a living on \n  fishery. Their major tools, fishing nets, are produced and fixed by computer. \n  After catching fishes each time, together with plenty of fishes, they will bring \n  back the shabby fishing nets, which might be full of leaks. Then they have to \n  inspect those nets. If there exist large leaks, they have to repair them before \n  launching out again.<br>\n<br>\n  Obviously, the smaller the leaks in the fishing nets are, the more fishes they \n  will catch. So after coming back, those fishermen will input the information \n  of the fishing nets into the computer to check whether the nets have leaks.<br>\n<br>\n  The checking principle is very simple: The computer regards each fishing net \n  as a simple graph constructed by nodes and edges. In the graph, if any circle \n  whose length (the number of edges) is larger than 3 must has at least one chord, \n  the computer will output "Perfect" indicating that the fishnet has \n  no leaks. Otherwise, "Imperfect" will be displayed and the computer \n  will try to repair the net. <br>\n<br>\n  Note: A circle is a closed loop, which starts from one node, passes through \n  other distinct nodes and back to the starting node. A chord is an edge, which \n  connects two different nodes on the circle, but it does not belong to the set \n  of edges on the circle.</br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  The input file contains several test cases representing different fishing nets. \n  The last test case in the input file is followed by a line containing 0 0.<br>\n<br>\n  The first line of each test case contains two integers, n and m, indicating \n  the number of nodes and edges on the net respectively, 1 &lt;= n &lt;= 1000. It is followed \n  by m lines accounting for the details of the edges. Each line consists of two \n  integers xi and yi, indicating there is an edge between node xi and node yi.</br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  For each test case, display its checking results. The word "Imperfect" \n  suggests that the corresponding fishing net is leaking, while the word "Perfect" \n  stands for a fishing net in good condition.<br>\n<br>\n  Follow the output for each net with a blank line.</br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  4 4<br>\n  1 2<br>\n  2 3<br>\n  3 4<br>\n  4 1<br>\n  3 3<br>\n  1 2<br>\n  2 3<br>\n  3 1<br>\n  0 0</br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n<b>Output for the Sample Input</b><br>\n<br>\n  Imperfect </br></br></br></p>\n<p>Perfect<br>\n</br></p>\n<hr>\r\n            \r\n            \r\n                ', '', '', 'Source:Asia 2001, Shanghai (Mainland China)', '26.71%', NULL, '2016-06-16 16:31:05', 5, '图', -0.821390079891998, -0.326459633868617),
(27, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1016', '1016', 'Zoj', '2S', '65536K', 'Parencodings', '\n<hr>\n<p> Let S = s1 s2 ... s2n be a well-formed string of parentheses. S can be encoded \n  in two different ways:<br>\n</br></p>\n<ul>\n<li>By an integer sequence P = p1 p2 ... pn where pi is the number of left parentheses \n    before the ith right parenthesis in S (P-sequence).</li>\n<li> By an integer sequence W = w1 w2 ... wn where for each right parenthesis, \n    say a in S, we associate an integer which is the number of right parentheses \n    counting from the matched left parenthesis of a up to a. (W-sequence).</li>\n</ul>\n<p> Following is an example of the above encodings:<br>\n<br>\n  S (((()()())))<br>\n  P-sequence 4 5 6666<br>\n  W-sequence 1 1 1456<br>\n<br>\n  Write a program to convert P-sequence of a well-formed string to the W-sequence \n  of the same string.</br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  The first line of the input contains a single integer t (1  &lt;=  t  &lt;=  10), the number \n  of test cases, followed by the input data for each test case. The first line \n  of each test case is an integer n (1  &lt;=  n  &lt;=  20), and the second line is the P-sequence \n  of a well-formed string. It contains n positive integers, separated with blanks, \n  representing the P-sequence.</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  The output consists of exactly t lines corresponding to test cases. For each \n  test case, the output line should contain n integers describing the W-sequence \n  of the string corresponding to its given P-sequence.</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  2<br>\n  6<br>\n  4 5 6 6 6 6<br>\n  9<br>\n  4 6 6 6 6 8 9 9 9</br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  1 1 1 4 5 6<br>\n  1 1 2 4 5 1 1 3 9<br>\n</br></br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', 'Source:Asia 2001, Tehran (Iran)', '39.75%', NULL, '2016-06-16 16:31:05', 3, '模拟', -0.595381163577386, 1.0561430376633),
(28, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1017', '1017', 'Zoj', '10S', '32768K', 'The Bermuda Triagle', '\n<hr>\n<p>People in the hidden region of the Bermuda Triangle make everything they need \n  in triangular shapes. One day, someone decided to break the rule and bake a \n  hexagonally shaped cake. But as usual, he has to serve the cake in triangular \n  pieces. The pieces are equilateral triangles but in different sizes for different \n  people. He can use as many triangles as needed to cut the cake into pieces, \n  such that nothing remains from the cake. For example, the following figure shows \n  one way that a hexagon with side 9 can be cut into triangles with side 2 and \n  3. (The cake is cut along the thick lines, thin lines are drawn to show the \n  sizes).</p>\n<p align="center"><img height="290" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1017%2F1017.gif" width="328"/></p>\n<p> Input is a hexagon and triangle types (specified by the length of their sides) \n  and the goal is to decide if the hexagon can be completely divided by the given \n  triangle types.</p>\n<p><br>\n', '<br>\n<br>\n  The first line of the input contains a single integer t (1  &lt;=  t  &lt;=  10), the number \n  of test cases, followed by the input data for each test case. Each test case \n  consists of a single line, containing s (1  &lt;=  s  &lt;=  25), the length of the hexagon''s \n  side, followed by n, the number of triangle types (1  &lt;=  n  &lt;=  10), followed by \n  n integers representing the length of each triangle type''s side (between 1 and \n  25, inclusive).</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  There should be one output line per test case containing either YES or NO depending \n  on whether the hexagon can be completely divided by the given triangle types.</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  3<br>\n  5 2 2 3<br>\n  7 2 3 2<br>\n  13 2 2 3</br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  NO<br>\n  NO<br>\n  YES </br></br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', 'Source:Asia 2001, Tehran (Iran)', '31.46%', NULL, '2016-06-16 16:31:05', 4, '动规', -0.980342544576121, 0.177172474243085),
(29, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1018', '1018', 'Zoj', '2S', '65536K', 'Deformed Wheel', '\n<hr>\n<p>The village''s carpentry is located by a hill side. The carpenter''s two little \n  boys play with a piece of wood which looks like a deformed wheel with two identical \n  convex polygon-shaped faces. One boy sets the wooden wheel on a slope at the \n  hill top and let it roll down. The other boy is to quickly place himself at \n  where he guesses the rolling wood would stop. Your program is to help him make \n  the right guess.<br>\n<br>\n  More formally, we consider the wooden wheel as a simple convex polygon and we \n  approximate the hill by a sequence of connected line segments with decreasing \n  slopes. The slope of the last segment in the sequence is assumed to be zero, \n  and the slope of the first segment is assumed to be a positive number. Initially, \n  the wheel is placed on the hill such that there is at least one point of contact \n  between the wheel and segments. For example in the following figure, the wheel \n  in its initial position is drawn in solid lines, while the final position is \n  drawn in dashed lines.<br>\n</br></br></br></p>\n<p align="center"><img height="273" src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1018%2F1018.gif" width="422"/></p>\n<p>At any instant, the wheel rotates around one of its vertices, say P, if the \n  y-coordinate of its center of gravity is decreased (note that this condition \n  is necessary at any instant during the motion). It can be easily shown that \n  at any instant, there is at most one such vertex. Rotation around P is stopped \n  when the wheel touches a segment. The motion continues until no vertex can be \n  found such that the wheel can rotate around it. At any instant, assume that \n  changing the position of the center of gravity in any direction for at most \n  10-5 units, does not affect the stability of the wheel. Also assume that the \n  friction between the wheel and the surface of the hill is so high that the wheel \n  never slides on the surface.<br>\n</br></p>\n<p></p>', '<br>\n<br>\n  The first line of the input contains a single integer t (1  &lt;=  t  &lt;=  10), the number \n  of test cases, followed by the input data for each test case. In the first line \n  of each test case there is an integer n (1  &lt;=  n  &lt;=  10), that indicates the number \n  of the wheel vertices. In each of the next n lines, there is a pair of numbers \n  which are x and y coordinates of the initial position of a vertex. After this, \n  there is a single line containing the initial x and y coordinates of the center \n  of gravity of the wheel. You can assume that the center of gravity is inside \n  or on the boundary of the polygon (note that the given center of gravity is \n  not necessarily computable from wheel''s geometric shape). Next lines of the \n  test data will describe the shape of the hill. The surface of the hill is approximated \n  with a series of line segments with decreasing slopes ending with a horizontal \n  line segment. For each segment, there is a line containing length and slope \n  of a segment (both of them are real numbers). The lines are ordered in decreasing \n  slope (The last line of this part of the input has slope zero). You can assume \n  that the last (horizontal) line is long enough that the wheel would not pass \n  its end. In the last line of the test case, there is a line containing the x \n  and y coordinates of the right end-point of the first segment. All coordinates \n  and slopes are real numbers.<br>\n</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  For each test case, there should be a single line in the output, containing \n  two numbers which are x and y coordinates of the wheel''s center of gravity. \n  Round the numbers in the output to 3 digits after decimal point.</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  1<br>\n  4<br>\n  40 30<br>\n  30 37<br>\n  24 30<br>\n  30 26<br>\n  27 29<br>\n  30 1<br>\n  100 0<br>\n  40 30</br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  28.854 20.031<br>\n</br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', 'Source:Asia 2001, Tehran (Iran)', '23.01%', NULL, '2016-06-16 16:31:05', 19, '二叉树', -0.987390208735122, -0.718762539134575),
(30, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1019', '1019', 'Zoj', '2S', '65536K', 'Illusive Chase', '\n<hr>\n<p>Tom the robocat is presented in a Robotics Exhibition for an enthusiastic audience \n  of youngsters, placed around an m * n field. Tom which is turned off initially \n  is placed in some arbitrary point in the field by a volunteer from the audience. \n  At time zero of the show, Tom is turned on by a remote control. Poor Tom is \n  shown a holographic illusion of Jerry in a short distance such that a direct \n  path between them is either vertical or horizontal. There may be obstacles in \n  the field, but the illusion is always placed such that in the direct path between \n  Tom and the illusion, there would be no obstacles. Tom tries to reach Jerry, \n  but as soon as he gets there, the illusion changes its place and the chase goes \n  on. Let''s call each chase in one direction (up, down, left, and right), a chase \n  trip. Each trip starts from where the last illusion was deemed and ends where \n  the next illusion is deemed out. After a number of chase trips, the holographic \n  illusion no more shows up, and poor Tom wonders what to do next. At this time, \n  he is signaled that for sure, if he returns to where he started the chase, a \n  real Jerry is sleeping and he can catch it.<br>\n<br>\n  To simplify the problem, we can consider the field as a grid of squares. Some \n  of the squares are occupied with obstacles. At any instant, Tom is in some unoccupied \n  square of the grid and so is Jerry, such that the direct path between them is \n  either horizontal or vertical. It''s assumed that each time Tom is shown an illusion; \n  he can reach it by moving only in one of the four directions, without bumping \n  into an obstacle. Tom moves into an adjacent square of the grid by taking one \n  and only one step.<br>\n<br>\n  The problem is that Tom''s logging mechanism is a bit fuzzy, thus the number \n  of steps he has taken in each chase trip is logged as an interval of integers, \n  e.g. 2 to 5 steps to the left. Now is your turn to send a program to Tom''s memory \n  to help him go back. But to ease your task in this contest, your program should \n  only count all possible places that he might have started the chase from.</br></br></br></br></p>\n<p><b><br>\n  Input</br></b><br>\n<br>\n  The first line of the input contains a single integer t (1  &lt;=  t  &lt;=  10), the number \n  of test cases, followed by the input data for each test case. The first line \n  of each test case contains two integers m and n, which are the number of rows \n  and columns of the grid respectively (1  &lt;=  m, n  &lt;=  100). Next, there are m lines, \n  each containing n integers which are either 0 or 1, indicating whether the corresponding \n  cell of the grid is empty (0) or occupied by an obstacle (1). After description \n  of the field, there is a sequence of lines, each corresponding to a chase trip \n  of Tom (in order). Each line contains two positive integers which together specify \n  the range of steps Tom has taken (inclusive), followed by a single upper-case \n  character indicating the direction of the chase trip, which is one of the four \n  cases of R (for right), L (for left), U (for up), and D (for down). (Note that \n  these directions are relative to the field and are not directions to which Tom \n  turns). This part of the test case is terminated by a line containing exactly \n  two zeros.</br></br></p>\n<p><br>\n', '', '<br>\n<br>\n  For each test case, there should be a single line, containing an integer indicating \n  the number of cells that Tom might have started the chase from.</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  2<br>\n  6 6<br>\n  0 0 0 0 0 0<br>\n  0 0 0 1 1 0<br>\n  0 1 0 0 0 0<br>\n  0 0 0 1 0 0<br>\n  0 0 0 1 0 1<br>\n  0 0 0 0 0 1<br>\n  1 2 R<br>\n  1 2 D<br>\n  1 1 R<br>\n  0 0<br>\n  3 4<br>\n  0 0 0 0<br>\n  0 0 0 0<br>\n  0 0 0 0<br>\n  1 2 R<br>\n  3 7 U<br>\n  0 0</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  10<br>\n  0<br>\n</br></br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', 'Source:Asia 2001, Tehran (Iran)', '39.95%', NULL, '2016-06-16 16:31:05', 13, 'DFS', -0.939818475661869, 1.07734860011011),
(31, 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1020', '1020', 'Zoj', '10S', '32768K', 'Puzzle Out', '\n<hr>\n<p>The scientific committee members of the 26th ACM/ICPC, who design the contest \n  problems, use the following encryption algorithm to communicate the problem \n  drafts securely through the Internet. To encrypt a text, all occurrences of \n  each letter is replaced with another letter (possibly itself), such that no \n  two letters are encrypted to the same letter. Both original and encrypted texts \n  consist of only upper-case letters and blanks. Blanks are not encrypted and \n  are repeated exactly in the encrypted text. As an example, the string GSRH RH \n  GSV URIHG HZNKOV is the encrypted form of THIS IS THE FIRST SAMPLE according \n  to the encryption table (A → Z, B → Y, C → X, …, Z → A).<br>\n<br>\n  A recipient of a problem draft has lost the encryption table, but he has a dictionary \n  which includes all the possible words appearing in the problems. You are to \n  help him set up a decryption table to enable him restore the original problem \n  draft from the encrypted one. Given a dictionary of the original words used \n  in the text, and the encrypted text, we want to find the right encryption table \n  such that after decrypting the given encrypted text back to the original one, \n  all words can be found in the dictionary.</br></br></p>\n<p><br>\n', '<br>\n<br>\n  The first part of the input is a dictionary of English words common to all test \n  cases. The first line of the file is d (1  &lt;=  d  &lt;=  50000); the number of words \n  in the dictionary, followed by d lines each containing a word in the dictionary. \n  The words in the dictionary are sorted in alphabetical order and all are in \n  uppercase. Each word has at most 20 characters, but you can assume that sum \n  of the length of all words in the dictionary is no more than 350,000. The next \n  line contains a single integer t (1  &lt;=  t  &lt;=  10), the number of test cases, followed \n  by the input data for each test case. Each test case, which is preceded by a \n  single blank line, consists of multiple lines in the input file forming the \n  encrypted text. Each line has a string containing only uppercase letters and \n  blank. You may assume that no line break is occurred in the middle of a word \n  and there may be arbitrary number of blank characters at the end of each line. \n  Maximum length of input lines is 80.</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  The output contains exactly t lines, each corresponding to a test case. Each \n  line should contain a single string of 26 characters which is the encryption \n  of the string ABCDEFGHIJKLMNOPQRSTUVWXYZ according to the encryption table used \n  in the test case. Letters in the output string should be in uppercase. It is \n  possible that some letters do not appear in the encrypted text at all. In this \n  case, put a * mark in place of those letters not appearing in the decrypted \n  version of the input text. If the test case has no solution, the output line \n  should contain #No solution#. If there is more than one possible encryption \n  table for a test case, the output line should contain #More than one solution#.</br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  14<br>\n  BE<br>\n  CHANGE<br>\n  FIRST<br>\n  IN<br>\n  IS<br>\n  MUST<br>\n  SAMPLE<br>\n  SEE<br>\n  THE<br>\n  THIS<br>\n  TO<br>\n  WISH<br>\n  WORLD<br>\n  YOU<br>\n  4<br>\n<br>\n  GSRH RH GSV URIHG HZNKOV<br>\n<br>\n  IZM BMVU SP UGP<br>\n  RGTANP IZM KFVG UZ VPP<br>\n  FA UGP KZWCQ<br>\n<br>\n  XYZ ABCDEFG<br>\n<br>\n  XZY ABD</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p><br>\n', '<br>\n<br>\n  Z***VU*SR**ON**K*IHG******<br>\n  TSRQP*NGF**CBAZ**WVUM*K*I*<br>\n  #No solution#<br>\n  #More than one solution#<br>\n</br></br></br></br></br></br></br></p>\n<hr>\r\n            \r\n            \r\n                ', '', 'Source:Asia 2001, Tehran (Iran)', '8.67%', NULL, '2016-06-16 16:31:05', 4, '动规', -0.94662430820757, -2.23920136657075),
(32, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=2400', '2400', 'UVALive', '3.000 seconds\\n\\t', NULL, '4399 - Toy', '<P>\n\n<P>\n<BR>\nOn birthday, Anthony got a toy. It is constructed with <SPAN CLASS="MATH"><I>N</I> + 1</SPAN>\n<tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>N</I><IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/43/4399img1.png"\n ALT="$ \\ge$">3)</SPAN>\n<tex2html_verbatim_mark> balls and <SPAN CLASS="MATH">2 <TT>*</TT> <I>N</I></SPAN>\n<tex2html_verbatim_mark> sticks. All balls are in a same plane. One of them is special, while the other <SPAN CLASS="MATH"><I>N</I></SPAN>\n<tex2html_verbatim_mark> balls are connected to it by <SPAN CLASS="MATH"><I>N</I></SPAN>\n<tex2html_verbatim_mark> sticks with the same length. The angles between any two adjacent sticks are equal. And finally, any two adjacent balls(except the central one) are connected by a stick. Here are two examples:\n\n<P>\n<DIV ALIGN="CENTER">\n<!-- MATH\n $\\epsfbox{p4399.eps}$\n -->\n<IMG\n WIDTH="500" HEIGHT="234" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/43/p4399.png"\n ALT="\\epsfbox{p4399.eps}">\n<tex2html_verbatim_mark>\n</DIV>\n\n<P>\nAnthony wanted to remove <SPAN CLASS="MATH"><I>N</I></SPAN>\n<tex2html_verbatim_mark> sticks, leaving all balls still connected. He wanted to know the number of all legal solutions. Your task is to solve this problem for him. \n\n<P>\nNotice that if a solution will be the same as another one by rotation, these two solutions should be consider as the same. \n\n<P>\nThe answer may be quite large. You just need to calculate the remainder of the answer when divided by <SPAN CLASS="MATH"><I>M</I></SPAN>\n<tex2html_verbatim_mark>.', '<P>\nInput contains several test cases. \n\n<P>\nFor each test case, there is only one line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN>\n<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>\n<tex2html_verbatim_mark> <!-- MATH\n $(3 \\le N \\le 10^{\\wedge}9, 2 \\le M \\le 10^{\\wedge}9)$\n -->\n<SPAN CLASS="MATH">(3<IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/43/4399img3.png"\n ALT="$ \\le$"><I>N</I><IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/43/4399img3.png"\n ALT="$ \\le$">10<SUP><IMG\n WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/43/4399img4.png"\n ALT="$\\scriptstyle \\wedge$"></SUP>9, 2<IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/43/4399img3.png"\n ALT="$ \\le$"><I>M</I><IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/43/4399img3.png"\n ALT="$ \\le$">10<SUP><IMG\n WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/43/4399img4.png"\n ALT="$\\scriptstyle \\wedge$"></SUP>9)</SPAN>\n<tex2html_verbatim_mark>. \n\n<P>\nInput is terminated by EOF.', '<P>\nFor each case, output one integer in one line, representing the remainder of the number of all solutions when divided by <SPAN CLASS="MATH"><I>M</I></SPAN>\n<tex2html_verbatim_mark>.', '<P>\n<PRE>\n3 10000 \n4 10000 \n4 10\n</PRE>', '<P>\n<PRE>\n6 \n13 \n3\n</PRE>', NULL, 'Regionals 2008,Asia - ChengDu', '13.16%', '30.00%', '2016-06-16 16:31:05', 19, '二叉树', -0.791180880014958, -0.832398246112666),
(33, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=637', '637', 'UVALive', '3.000 seconds\\n\\t', NULL, '2636 - Spacecraft Malfunction', 'It is said that court intrigues started with people lying about other people, and then lying about other\npeople''s lying, and so it went. The intriguers constantly looked for scapegoat who inevitably proved to\nbe someone with the least power, though not always the least morality.\n\n<P>\nWe have faced a similar problem, but this time, in our malfunctioning spacecraft! There are a number of units\nin the spacecraft. The units are so reliable that it would surprise us very much if more than one unit were\nfaulty. If more than one is faulty, we would lose the probe, so we are sure that exactly one unit is faulty\nin our spacecraft.\n\n<P>\n\n<P>\n<BR>\nWe know that each unit checks exactly two others, and each unit will be checked by at least one other unit.\nA good unit will give accurate diagnosis of the units it checks. For example, if unit X is good and it says\nthat Y is faulty and Z is good, then, in fact, Y is faulty and Z is good. However, a bad unit is unreliable.\nSo, if unit X is faulty and makes the same statements, then Y may or may not be good, and Z may or may not be\ngood either. Note that a unit cannot check itself.\n\n<P>\nNow suppose that you have the reports from all units and your duty is to find which unit is indeed faulty.', '<P>\nThe first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH\n $1 \\le t \\le 10$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2636img1.gif"\n ALT="$ \\le$"><I>t</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2636img1.gif"\n ALT="$ \\le$">10</SPAN>), the number of test cases, followed by\nthe input data for each test case. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH\n $3 \\le n \\le 100$\n -->\n<SPAN CLASS="MATH">3<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2636img1.gif"\n ALT="$ \\le$"><I>n</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2636img1.gif"\n ALT="$ \\le$">100</SPAN>), the\nnumber of units, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines each describing a unit and the result of its checks. The line starts with\na positive integer number which shows the identification number of the unit. After the id number, there are two\npairs of checked unit id''s and check results. A check result is a single character which is either `<TT>Y</TT>'' or `<TT>N</TT>'',\nshowing whether the result of checking is good or faulty respectively. As an example, the fourth line in the Sample Input\nsection shows that <EM>unit 16 has checked unit 8 saying it is good, and has checked unit 32 saying it is faulty</EM>.', '<P>\nThere should be one line per test case containing either the id number of the faulty unit, or the word\n`<TT>impossible</TT>'' (with lower-case letters), if it is impossible to find the faulty unit from the input data.', '<PRE>\n1\n5\n2 16 Y 32 N\n16 8 Y 32 N\n32 8 N 4 Y\n8 4 Y 2 Y\n4 2 Y 16 Y\n</PRE>', '<PRE>\n32\n</PRE>', NULL, 'Regionals 2002,Asia - Tehran', '42.11%', '77.42%', '2016-06-16 16:31:05', 19, '二叉树', -0.686771320022437, 1.10291931980581),
(34, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=638', '638', 'UVALive', '3.000 seconds\\n\\t', NULL, '2637 - Blue x Red = Bang', 'The RB Company is one of the pioneering companies in making electronic boards. This company has recently\nfaced a difficult problem to solve in designing its special power boards. Each power board is a flat plastic\nplate with special red and/or blue colored plugs on it. The blue plugs are recognized as null poles, and the\nred ones are phase poles. This company''s special design requires that all the blue plugs should be\ninter-connected with straight lines to make a simple blue polygon. All vertices of the resulting polygon\nshould be blue plugs, and any blue plug should be a vertex of this polygon. With similar conditions, all\nthe red plugs should make a red polygon. You may assume that no three plugs of the same color are co-linear,\ni.e. lie on one line.\n\n<P>\n\n<P>\n<BR>\nThe design problem is that safety precautions require that there should be no red and blue polygon intersections;\notherwise a disastrous explosion would be inevitable. This happens when the two polygons have non-empty intersection.\nThe RB engineers have realized that some configurations of red and blue plugs makes it impossible to have\nnon-intersecting red and blue polygons. They consider such configurations disastrous. Your task is to write\na program to help the RB engineers recognize and reject the disastrous configurations.', '<P>\nThe first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH\n $1 \\le t \\le 5$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2637img1.gif"\n ALT="$ \\le$"><I>t</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2637img1.gif"\n ALT="$ \\le$">5</SPAN>), the number of test cases, followed\nby the input data for each test case. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>r</I></SPAN> (<!-- MATH\n $3 \\le b, r < 10$\n -->\n<SPAN CLASS="MATH">3<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2637img1.gif"\n ALT="$ \\le$"><I>b</I>, <I>r</I> &lt; 10</SPAN>),\nthe number of blue and red plugs respectively, followed by <SPAN CLASS="MATH"><I>b</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> representing\nthe coordinates of a blue plug followed by <SPAN CLASS="MATH"><I>r</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> representing the coordinates\nof a red plug. Note that all coordinates are pairwise distinct and are in range 0 to 100,000 inclusive.', '<P>\nThere should be one line per test case containing `<TT>YES</TT>'' if there exist non-intersecting polygons or `<TT>NO</TT>''\notherwise.\nThe output is considered to be case-sensitive.', '<PRE>\n2\n4 4\n2 2\n4 2\n2 4\n1 1\n2 5\n2 6\n3 3\n1 3\n3 3\n1 1\n3 1\n2 3\n2 2\n1 4\n3 4\n</PRE>', '<PRE>\nYES\nNO\n</PRE>', NULL, 'Regionals 2002,Asia - Tehran', '9.80%', '88.89%', '2016-06-16 16:31:05', 4, '动规', -0.439485520040151, -1.05701541438507),
(35, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=639', '639', 'UVALive', '3.000 seconds\\n\\t', NULL, '2638 - JaWs', '``Sigh! Where are those good old bloody days?" Pondered Bob, the old shark, the former slayer of the deep blue\nwaters, with his tears joining the infinite water of the ocean. Butchering for years, Bob''s teeth has lost their\nregular shape, and the poor old shark is now in trouble closing his jaws. He wants to program his PDA to help him\nfind the shape of his teeth when his jaws are closed and we want to help him write this program!\n\n<P>\nWe name the sequence of Bob''s lower teeth as LT and the sequence of his upper teeth as UT. For the sake of simplicity,\nconsider LT as a sequence of adjacent equilateral triangles (i.e., with equal sides). All bases of the triangles\nlie on the same horizontal straight line. UT has a similar structure, except that the triangles are upside-down (Figure 1).\n\n<P>\n<DIV ALIGN="CENTER">\n<!-- MATH\n $\\epsfbox{p2638.eps}$\n -->\n<IMG\nALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/p2638.jpg"\n ALT="\\epsfbox{p2638.eps}">\n</DIV>\n<P>\n<DIV ALIGN="CENTER">Figure 1. Snapshot of Bob''s teeth!\n\n</DIV>\n\n<P>\nAssume the left endpoint of the base of the leftmost tooth in LT has the coordinates <SPAN CLASS="MATH">(0, 0)</SPAN>, so the bases of\nall triangles in LT lie on the <SPAN CLASS="MATH"><I>x</I></SPAN> axis. We name the left end point of the base of the leftmost tooth in UT,\nthe <EM>reference point</EM>. Initially, the coordinates of the reference point is given such that:\n\n<P>\n\n<UL>\n<LI>The tip of no two teeth in LT and UT have the same <SPAN CLASS="MATH"><I>x</I></SPAN> coordinates,\n</LI>\n<LI>UT is above LT, i.e. the <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate of the reference point is greater than zero,\n</LI>\n<LI>LT and UT do not overlap at any point.\n</LI>\n</UL>\n\n<P>\nGiven a placement of UT and LT conforming to the above conditions, UT starts falling downward such that the base\nof the triangles remain horizontal during its fall, i.e. UT does not rotate. UT continues to fall, until it\ntouches some point in LT. At this time, UT slides downward (to the left or right) over LT until it cannot slide\nany further. During this motion, LT is fixed and UT never rotates. Note that UT may have an initial position such\nthat it slides downward either from left or right, and falls below LT (Imagine the old shark in that state!).\nAlso it is possible that the tips of some upper teeth finally pass the line <SPAN CLASS="MATH"><I>y</I> = 0</SPAN> (the Dracula-style!).\nYour program should determine whether UT falls down from left or right, or otherwise, finds the final position\nof the reference point after it stops moving.', '<P>\nThe first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH\n $1 \\le t \\le 10$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$"><I>t</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$">10</SPAN>), the number of test cases, followed by\nthe input data for each test case. The first line of each test case contains integer <SPAN CLASS="MATH"><I>L</I></SPAN> (<!-- MATH\n $1 \\le L \\le 10$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$"><I>L</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$">10</SPAN>) the number of\ntriangles in LT, followed by <SPAN CLASS="MATH"><I>L</I></SPAN> lines each describing a triangle in LT, containing one integer number\n<SPAN CLASS="MATH"><I>b</I></SPAN> (<!-- MATH\n $1 \\le b \\le 100$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$"><I>b</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$">100</SPAN>),\nthe side of the triangle. The next line of the input consists of three numbers <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, and <SPAN CLASS="MATH"><I>U</I></SPAN>. The first two numbers\nare the initial <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates of the reference point and are arbitrary real numbers. <SPAN CLASS="MATH"><I>U</I></SPAN> is the number of\ntriangles in UT (<!-- MATH\n $1 \\le U \\le 10$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$"><I>U</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$">10</SPAN>). After this line, there are <SPAN CLASS="MATH"><I>U</I></SPAN> lines each describing a triangle in LT, containing\none integer number <SPAN CLASS="MATH"><I>b</I></SPAN> (<!-- MATH\n $1 \\le b \\le 100$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$"><I>b</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2638img2.gif"\n ALT="$ \\le$">100</SPAN>), the side of the triangle.\n\n<P>\nIn order to avoid floating-point arithmetic errors, you may assume that the input has the property that during\nthe motion of UT, the distance between tips of any two triangles in LT and UT is never less than 0.1.', '<P>\nThere should be one line per test case containing a pair of real numbers, rounded to three digits after decimal\npoint, which are <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the reference point after UT stops moving. If UT falls down from left\nof LT, the output line should contain the word `<TT>WM</TT>'', and if it falls down from the right of LT, it should be `<TT>MW</TT>''.\nThe output is considered to be case-sensitive.', '<PRE>\n2\n2\n10\n10\n2 20 2\n10\n10\n1\n10\n50 50 1\n10\n</PRE>', '<PRE>\n5.000 8.660\nMW\n</PRE>', NULL, 'Regionals 2002,Asia - Tehran', '7.69%', '33.33%', '2016-06-16 16:31:05', 4, '动规', -0.857123760010235, -1.19806964803232),
(36, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=640', '640', 'UVALive', '3.000 seconds\\n\\t', NULL, '2639 - Skew Binary', 'It had been a year since Swamp County Computing established a functional programming group. Your\n(non-functional programming) group is going to throw a surprise party for the anniversary. Now the functional\nfolks really like skew binary numbers for some reason. ``Easy to increment and decrement!" they say. Your task\nis to write a program to convert decimal integers to skew binary in the format they like. This will help in making\nbanners and other party material.\n\n<P>\n\n<P>\n<BR>\nNumber representations are made up of a list of digits. Call the lowest order digit the rank 0 digit, the next,\nrank 1, etc. For example, in decimal representation, digits are 0-9,  the rank 0 digit has weight 1, the rank 1\ndigit has weight 10, and the rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit has weight <SPAN CLASS="MATH">10<SUP>i</SUP></SPAN>. In binary representation, the digits are 0 and 1, and\nthe rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit has weight <SPAN CLASS="MATH">2<SUP>i</SUP></SPAN>. In skew binary representation, the digits are 0, 1, and 2, and the rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit\nhas weight <SPAN CLASS="MATH">2<SUP>i + 1</SUP> - 1</SPAN>.\n\n<P>\n<DIV ALIGN="CENTER">\n<TABLE COLS=2 BORDER RULES=GROUPS>\n<COL ALIGN=CENTER><COL ALIGN=CENTER>\n<TBODY>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>\nRank  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  Weight </TD></TR>\n</TBODY><TBODY>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> \n1    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD></TR>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> \n2    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD></TR>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> \n3    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 15 </TD></TR>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> \n4    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 31 </TD></TR>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> \n5    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 63 </TD></TR>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> \n6    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 127 </TD></TR>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> \n7    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 255 </TD></TR>\n<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> \n<SPAN CLASS="MATH"><IMG\n WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2639img1.gif"\n ALT="$ \\vdots$"></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG\n WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2639img1.gif"\n ALT="$ \\vdots$"></SPAN></TD></TR>\n</TBODY>\n</TABLE>\n\n</DIV>\n\n<P>\nAllowing the digit 2 in the skew binary means there may be several ways to represent a given number. However the\nconvention is that the digit 2 may only appear as the lowest rank non-zero digit. This makes the representation unique.\n\n<P>\nIn this problem, you should use a special way to write skew binary numbers as a list of ranks of non-zero digits\nin the number. The digit 2 is represented by the rank of the digit appearing twice in the list. Note that this\nmeans that <EM>only</EM> the first two ranks in the list may be equal.\n\n<P>\nEach rank is a decimal integer, and is separated from the next rank by a comma (`<TT>,</TT>''). A list is started by a `<TT>[</TT>''\nand ended by a `<TT>]</TT>''. For example, the decimal number 5, which has the skew representation 12, should be written\nas <TT>[0,0,1]</TT>. Decimal 0 is an empty list: <TT>[]</TT>.\n\n<P>\nInput consists of decimal numbers, one per line,', '<P>\nThe first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH\n $1 \\le t \\le 10$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2639img2.gif"\n ALT="$ \\le$"><I>t</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/26/2639img2.gif"\n ALT="$ \\le$">10</SPAN>), the number of test cases, followed\nby <SPAN CLASS="MATH"><I>t</I></SPAN> lines, each containing a single decimal number with no leading or trailing white space. Each number will\nbe in the range 0 ...100663270 (inclusive).', '<P>\nThere should be one line per test case containing the input decimal number, with no leading zeros or spaces,\na single space, and the skew binary equivalent in list format with no leading or trailing spaces. Within the\nlist each rank should have no extra leading zeros or leading or trailing spaces.', '<PRE>\n5\n0\n1\n2\n3\n4\n</PRE>', '<PRE>\n0 []\n1 [0]\n2 [0,0]\n3 [1]\n4 [0,1]\n</PRE>', NULL, 'Regionals 2002,Asia - Tehran,North America - Southern California', '56.58%', '89.36%', '2016-06-16 16:31:05', 4, '动规', -0.582361760029917, 2.07024385102655),
(37, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=641', '641', 'UVALive', '3.000 seconds\\n\\t', NULL, '2640 - A Simple Question of Chemistry', '<P>\nYour chemistry lab instructor is a very enthusiastic graduate student\nwho clearly has forgotten what their undergraduate Chemistry 101 lab\nexperience was like. Your instructor has come up with the brilliant\nidea that you will monitor the temperature of your mixture every\nminute for the entire lab.  You will then plot the rate of\nchange for the entire duration of the lab.\n\n<P>\nBeing a promising computer scientist, you know you can automate part\nof this procedure, so you are writing a program you can run on your\nlaptop during chemistry labs.  (Laptops are only occasionally\ndissolved by the chemicals used in such labs.)  You will write a\nprogram that will let you enter in each temperature as you observe it.\nThe program will then calculate the difference between this\ntemperature and the previous one, and print out the difference.  Then\nyou can feed this input into a simple graphing program and finish your\nplot before you leave the chemistry lab.', 'The input is a series of temperatures, one per line, ranging from -10\nto 200.  The temperatures may be specified up to two\ndecimal places.  After the final observation, the number 999 will\nindicate the end of the input data stream.  All data sets will have at\nleast two temperature observations.', 'Your program should output a series of differences between each\ntemperature and the previous temperature.  There is one fewer\ndifference observed than the number of temperature observations\n(output nothing for the first temperature).  Differences are always\noutput to two decimal points, with no leading zeroes (except for the\nones place for a number less than 1, such as 0.01) or spaces.\n\n<P>\nAfter the final output, print a line with `<TT>End of Output</TT>''', '<P>\n<PRE>\n10.0\n12.05\n30.25\n20\n999\n</PRE>', '<PRE>\n2.05\n18.20\n-10.25\nEnd of Output\n</PRE>', NULL, 'Regionals 2002,North America - Mid-Atlantic USA', '35.32%', '84.48%', '2016-06-16 16:31:05', 25, '贪心', 2.96756327971579, 0.649005458921998),
(38, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=643', '643', 'UVALive', '3.000 seconds\\n\\t', NULL, '2642 - Spelling Be', '<P>\nIt''s a simple requirement your company has, really--every document\nshould be spell-checked before it''s sent out to a customer.\nUnfortunately, while word processing documents are easily\nspell-checked, your employees have not been checking email every time\nthey send out a message.  So you''ve come up with a little improvement.\nYou are going to write a program that will check email on its way out.\nYou will spell-check each message, and if you find any spelling\nerrors, it will be returned to the sender for correction.\n\n<P>\nWhen you announced this plan, one of your coworkers fell off their\nchair laughing, saying that you couldn''t possibly anticipate every\nname, technical acronym, and other terms that might appear in an\nemail.  Undaunted, however, you are going to test-run your code with an\nonline dictionary and some sample emails you have collected.', 'The input consists of two sections, the dictionary and the emails.\nThe first line of input specifies the number of words in the\ndictionary, followed by that many lines, with one word per line.\nThere is no whitespace before, after, or in any words, although there\nmay be apostrophes or hyphens in the words, which are considered part\nof the word (i.e.&nbsp;``<TT>bobs</TT>'''' is different than ``<TT>bob''s</TT>''''.  There will be\nno duplicate words.  All words will be in lower case.\n\n<P>\nFollowing that are the emails.  The first line of this section has the\nnumber of emails in the input.  Following that line begins the first\nemail.  It has been preprocessed, so it consists of one word per line,\nwith no punctuation (other than apostrophes and hyphens) or\nwhitespace, and all words are in lower case.  The last word in the email\nis followed by a line with only `<TT>-1</TT>''.  Each email will have at least\none word.', 'For each email, you must either print:\n\n<P>\n\n<P>\n<BR>\n\n<TT>Email <SPAN CLASS="MATH"><I>X</I></SPAN> is spelled correctly.</TT>\n\n<P>\n\n<P>\n<BR>\nwhere <SPAN CLASS="MATH"><I>X</I></SPAN> begins with 1 and counts up.  Or, if a word is found that is\nnot in the dictionary, print out:\n\n<P>\n\n<P>\n<BR>\n\n<TT>Email <SPAN CLASS="MATH"><I>X</I></SPAN> is not spelled correctly.</TT>\n\n<P>\n\n<P>\n<BR>\nfollowed by a list of unknown words in the order that you find them,\none per line.  If an unknown word is found multiple times, it should\nbe printed multiple times.\n\n<P>\nThere are no spaces between datasets.  Following the output for the\nfinal dataset, print a line stating `<TT>End of Output</TT>''', '<P>\n<PRE>\n6\nalice\nam\nbitterly\ni\nleaving\nyou\n1\ndear\nbob\ni\nam\nleaving\nyou\nbitterly\nalice\n-1\n</PRE>', '<PRE>\nEmail 1 is not spelled correctly.\ndear\nbob\nEnd of Output\n</PRE>', NULL, 'Regionals 2002,North America - Mid-Atlantic USA', '25.68%', '73.75%', '2016-06-16 16:31:05', 19, '二叉树', 0.604610079885058, 0.00456810709283929);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(39, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=644', '644', 'UVALive', '3.000 seconds\\n\\t', NULL, '2643 - Apply a Cold Compress', '<P>\nMany techniques for compressing digital graphics focus on identifying\nand describing regions of a single uniform character. Here is a simple\ntechnique for compressing black-and-white images (which could be\neasily extended to color). The basic idea is to repeatedly split the\noriginal picture in half, either vertically or horizontally, until each of\nthe resulting sub-pictures contains only a single color.\n\n<P>\nA rectangular digital graphic is described by a ``compression-expression,''''\ndefined as follows:\n\n<P>\n<BLOCKQUOTE>\nEach compression-expression begins with a two-bit tag, which may be\n   followed by additional compression-expressions depending upon the\n   tag value. The tag values are interpreted as follows:\n</BLOCKQUOTE>\n<P><DL>\n<DT><STRONG>00</STRONG></DT>\n<DD>A square region that consists entirely of black pixels. This region\n       may be a single pixel, a 2<SPAN CLASS="MATH">&#215;</SPAN>2 square, a 3<SPAN CLASS="MATH">&#215;</SPAN>3 square, etc., depending\n       upon context.\n\n<P>\n</DD>\n<DT><STRONG>11</STRONG></DT>\n<DD>A square region that consists entirely of white pixels. This region\n       may be a single pixel, a 2<SPAN CLASS="MATH">&#215;</SPAN>2 square, a 3<SPAN CLASS="MATH">&#215;</SPAN>3 square, etc., depending\n       upon context.\n\n<P>\n</DD>\n<DT><STRONG>10</STRONG></DT>\n<DD>A horizontal split. This is followed by two compression\n       expressions.  The picture produced by a split is formed by\n       taking the pictures denoted by each of those two expressions\n       and placing them along-side one another, the first picture to\n       the left and the second to the right.\n\n<P>\nHorizontal splits are only possible between two pictures of the\n       same height.\n\n<P>\n</DD>\n<DT><STRONG>01</STRONG></DT>\n<DD>A vertical split. This is followed by two compression\n       expressions.  The picture produced by a split is formed by\n       taking the pictures denoted by each of those two expressions\n       and placing them along-size one another, the first picture on\n       the top and the second underneath it.\n\n<P>\nVertical splits are only possible between two pictures of the\n       same width.\n</DD>\n</DL>\n\n<P>\nWhen interpreting splits, it may be necessary to change the scale of the\ncomponents to make them compatible. For example, given a 2:6 picture A (i.e.,\n2 pixels wide, 6 pixels high) and a 3:4 picture B:\n\n<UL>\n<LI>A vertical split involving these two is possible only if we scale A by a\n    factor of 3, making it 6:18, and scale B by a factor of 2, making it 6:8.\n    The resulting combined picture would have size 6:26.\n\n<P>\n</LI>\n<LI>A horizontal split involving these two is possible only if we scale A by a\n    factor of 2, making it 4:12, and scale B by a factor of 3, making it 9:12.\n    The resulting combined picture would have size 13:12.\n</LI>\n</UL>\n\n<P>\nFor example, using <code>X</code>''s and ` ''s to denote black and white pixels,\nrespectively, the expression `<TT>00</TT>'' denotes the picture\n\n<P>\n<PRE>\n     ---\n     |X|\n     ---\n</PRE>\nand the expression `<TT>1000010011</TT>'' denotes\n<PRE>\n    -----\n    |XXX|\n    |XX |\n    -----\n</PRE>\n\n<P>\nExamination of this format will show that for any given\ncompression-expression, there is some smallest picture that can be\ndenoted by that expression, but the same expression can also denote\npictures twice the size of the smallest one, three times the size, etc.', 'Each line of the input will contain a compression-expression,\npresented as a single line containing an arbitrary number of <TT>0</TT>''s and\n<TT>1</TT>''s.  The input ends following the line with the final\ncompression-expression.\n\n<P>\nAll input sets used in this problem will be valid\ncompression-expressions.', 'For each line of input, your should print the smallest black-and-white\npicture denoted by that expression, drawn in <code>X</code>''s (black) and ` ''s\n(white), as above, and framed in <code>-</code> and <code>|</code> characters as shown in\nthe examples.  There should be no characters or whitespace outside\nyour frame except for the newlines terminating each line.\n\n<P>\nThere should be no blank lines in your output.', '<P>\n<PRE>\n00\n10001011100100101110111101111000100011\n</PRE>', '<PRE>\n---\n|X|\n---\n----------------\n|XXXX    XXX   |\n|XXXX    XXX   |\n|XXXX    XXX   |\n|XXXX       XX |\n----------------\n</PRE>', NULL, 'Regionals 2002,North America - Mid-Atlantic USA', '42.00%', '82.61%', '2016-06-16 16:31:05', 19, '二叉树', -0.725238000019682, 1.0955657815588),
(40, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=645', '645', 'UVALive', '3.000 seconds\\n\\t', NULL, '2644 - A Baron Landscape', '<P>\nAfter a successful military campaign, the King decided to reward his\ntwo most able commanders with a title and a portion of the newly\nconquered territory. Each of the newly appointed Barons will be\nallowed to construct a castle in the new territory and to collect\ntaxes from the surrounding lands.\n\n<P>\nThe King has commissioned a map of the new territory, marked off in a\ngrid. Each square on the grid is approximately the distance a man on\nhorseback could ride in one day. Each Baron will choose a square in\nwhich to build his castle. As the senior commander, you will choose first.\n\n<P>\nFor the sake of this selection, castles will be presumed to lie at the\ncenter of the selected square. The two castles must be built in\nsquares whose centers are more than three days'' ride from one another.\n\n<P>\nEach Baron will be allowed to collect taxes from the peasants in any\nsquare whose center is 6 days'' ride or less from that Baron''s castle\nand that is closer to that Baron''s castle than to the other Baron''s.\nSquares that are equidistant from the two castles do not contribute\ntaxes to either castle.\n\n<P>\nTensions had been rising between you and your fellow commander\nthroughout the military campaign. You are certain that, eventually,\nthe two of you will be fighting for control of the entire\nterritory. Until then, the collection of taxes is crucial to your\nmilitary build-up. You must make sure that you collect more tax money\nthan your rival, and that you outstrip him by as much as possible.\n\n<P>\nYour advisor has studied the records kept by the scribes of the former\nKing of this territory, and so has been able to estimate the tax\nrevenue that can be expected from each square. Based on this, you want\nto select the site for your own castle that guarantees the best\npossible advantage taxes no matter what space your rival baron may\nselect.\n\n<P>\n\n<P>\n<BR>\n\n<B>NOTE:</B> Distances are Euclidean (distance between the center of two\nsquares as the crow flies).', 'The first line of the input will contain an integer indicating the number of test cases to process. Each test case will be preceded by a blank line.\n   The first line of each test case will contain two integers, <SPAN CLASS="MATH"><I>w</I></SPAN>, and <SPAN CLASS="MATH"><I>h</I></SPAN>,\n   denoting the width and height (in numbers of squares) of the\n   map. <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>h</I></SPAN> will be in the range 1-50, inclusive.\n\n<P>\nThis is followed by <!-- MATH\n $w \\times h$\n -->\n<SPAN CLASS="MATH"><I>w</I>&#215;<I>h</I></SPAN> integers distributed across an\n   arbitrary number of subsequent lines. Each of these represents the\n   expected tax collection (in gold pieces per year) for one map\n   square. They occur in the order:\n     <!-- MATH\n \\begin{displaymath}\n(0,0) (1, 0), \\ldots, (w-1, 0) (0,1) (1, 1), \\ldots, (w-1,h-1)\n\\end{displaymath}\n -->\n<P></P>\n<DIV ALIGN="CENTER" CLASS="mathdisplay">\n(0, 0)(1, 0),...,(<I>w</I> - 1, 0)(0, 1)(1, 1),...,(<I>w</I> - 1, <I>h</I> - 1)\n</DIV><P></P>\nEach item will be in the range 0-40, inclusive. A value of 0\n   denotes water or land that is otherwise uninhabitable--castles cannot\n   be built on those squares.\n\n<P>\nAll maps used as input in this problem will be large enough to\n   guarantee that both castles can be placed on a non-zero square, no\n   matter where the first one is placed (i.e., you cannot crowd your\n   rival entirely off the map).', 'Output from for each dataset consists of a single line of the form:\n\n<P>\n\n<P>\n<BR>\n\n<TT>Place your castle at: <SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>Y</I></SPAN></TT>\n\n<P>\n\n<P>\n<BR>\nwhere <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> are two integers, separated by a single space,\n   denoting the optimal placement of your castle, indexed from 0.\n\n<P>\nIf there is more than one location on the map that may be chosen to\n   achieve the same maximal advantage over your rival, any one of those\n   positions will be an acceptable answer. Print a blank line between test cases.', '<P>\n<PRE>\n1\n\n7 7\n3 4 1 0 0 0 0\n2 1 1 0 0 0 0\n1 1 1 1 0 0 0\n1 1 1 0 1 1 1\n0 0 0 1 1 1 2\n0 0 0 0 1 2 1\n0 0 0 0 1 3 4\n</PRE>', '<PRE>\nPlace your castle at: 3 4\n</PRE>', NULL, 'Regionals 2002,North America - Mid-Atlantic USA', '5.41%', '9.09%', '2016-06-16 16:31:05', 4, '动规', -0.796676120014565, -1.3504884407886),
(41, 'http://poj.org/problem?id=3210', '3210', 'Poj', ' 1000MS', ' 131072K', 'Coins', '<div class="ptx" lang="en-US"><p>Snoopy has three coins. One day he tossed them on a table then and tried to flip some of them so that they had either all heads or all tails facing up. After several attempts, he found that regardless of the initial configuration of the coins, he could always achieve the goal by doing exactly two flippings, under the condition that only one coin could be flipped each time and a coin could be flipped more than once. He also noticed that he could never succeed with less than two flippings.</p><p>Snoopy then wondered, if he had <i>n</i> coins, was there a minimum number <i>x</i> such that he could do exactly <i>x</i> flippings to satisfy his requirements?</p></div>', '<div class="ptx" lang="en-US"><p>The input contains multiple test cases. Each test case consists of a single positive integer <i>n</i> (<i>n</i> &lt; 10,000) on a separate line. A zero indicates the end of input and should not be processed.</p></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>For each test case output a single line containing your answer without leading or trailing spaces. If the answer does not exist, output “<code>No Solution!</code>”</p></span></div>', '<pre class="sio">2\r\n3\r\n0</pre>', '<pre class="sio">No Solution!\r\n2</pre>', '', 'POJ Monthly--2007.04.01', '65.96%', '97.33%', '2016-06-16 16:31:04', 2, '数论', -0.808700574678215, 2.32526249902149),
(42, 'http://poj.org/problem?id=3211', '3211', 'Poj', ' 1000MS', ' 131072K', 'Washing Clothes', '<div class="ptx" lang="en-US"><p>Dearboy was so busy recently that now he has piles of clothes to wash. Luckily, he has a beautiful and hard-working girlfriend to help him. The clothes are in varieties of colors but each piece of them can be seen as of only one color. In order to prevent the clothes from getting dyed in mixed colors, Dearboy and his girlfriend have to finish washing all clothes of one color before going on to those of another color.</p><p>From experience Dearboy knows how long each piece of clothes takes one person to wash. Each piece will be washed by either Dearboy or his girlfriend but not both of them. The couple can wash two pieces simultaneously. What is the shortest possible time they need to finish the job?</p></div>', '<div class="ptx" lang="en-US"><p>The input contains several test cases. Each test case begins with a line of two positive integers <i>M</i> and <i>N</i> (<i>M</i> &lt; 10, <i>N</i> &lt; 100), which are the numbers of colors and of clothes. The next line contains <i>M</i> strings which are not longer than 10 characters and do not contain spaces, which the names of the colors. Then follow <i>N</i> lines describing the clothes. Each of these lines contains the time to wash some piece of the clothes (less than 1,000) and its color. Two zeroes follow the last test case.</p></div>', '<div class="ptx" lang="en-US"><p>For each test case output on a separate line the time the couple needs for washing.</p></div>', '<pre class="sio">3 4\r\nred blue yellow\r\n2 red\r\n3 blue\r\n4 blue\r\n6 red\r\n0 0</pre>', '<pre class="sio">10</pre>', '', 'POJ Monthly--2007.04.01', '32.02%', '87.91%', '2016-06-16 16:31:04', 4, '动规', -0.744176906482318, -0.493521386528648),
(43, 'http://poj.org/problem?id=3212', '3212', 'Poj', ' 3000MS', ' 131072K', 'Rescue Alice', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Long long ago, there was a princess named Alice. She was taken by the evil Cent Dragon. Many warriors had tried to rescue her, but none of them ever came back. One day, a prince called Jack showed up. He told the King that he would go to rescue Alice in voluntary. The King responded in despair, “It’s no use fighting with Cent Dragon.” But that did not stop Jack. He set off immediately for the rescue.</p><p>Jack rode his way to the mountain where Cent Dragon lived. Unfortunately, he lost himself in the forest before the mountain and was unable to find Cent Dragon’s castle. After wandering for a while, Jack saw an old man on a stone smiling at him. He was surprised by the encounter and asked the old man for the way. “The forest is cursed in spells. An ordinal human being won’t be able to find a way out.” said the old man, “If you want to go to Cent Dragon’s castle, you must find the Tree of Moon for help.”</p><p>In spite of hardships, Jack succeeded in locating the Tree of Moon – a big blue tree with spirits. He told his story to it, and it answered, “In this forest there are some magical wells. They are the entries of the mountain. You can see all of them on a high tower nearby. You choice of entry will decide how soon you can enter the mountain. Precisely speaking, the time it takes can be measured by the sum of the distances between the well you choose and the other ones.”</p><p>In that ancient times, distance was measured in a manner similar to what we now call the Manhattan distance. Positions of the wells were described in a Cartesian plane. Instead of taking the sum of absolute differences in the abscissa and the ordinate, distances in Jack’s adventure were found by taking the maximum of them. Given the coordinates of the wells, can you tell how much time did Jack need at least to spend entering the mountain to rescue Alice in terms of distance?</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The input contains a single test case. The first line of input contains a positive integer <i>N</i> (<i>N</i> ≤ 100,000), the number of wells. Then follow <i>N</i> lines, each contains two integers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> (|<i>x<sub>i</sub></i>|, |<i>y<sub>i</sub></i>| ≤ 1,000,000), which are the Cartesian coordinate of the <i>i</i>th well.</p></span></div>', '<div class="ptx" lang="en-US"><p>Output one line containing only the minimum time Jack needed for entry into the mountain.</p></div>', '<pre class="sio">4\r\n0 1\r\n2 5\r\n3 1\r\n4 0</pre>', '<pre class="sio">8</pre>', '<div class="ptx" lang="en-US"><p>Sums of distances of the wells are 11, 13, 8 and 10. 8 is the minimum.</p></div>', 'POJ Monthly--2007.04.01', '24.38%', '73.89%', '2016-06-16 16:31:04', 19, '二叉树', -0.958300294904412, -1.12803844267488),
(44, 'http://poj.org/problem?id=3213', '3213', 'Poj', ' 5000MS', ' 131072K', 'PM3', '<div class="ptx" lang="en-US"><span lang="en-us"><p>USTC has recently developed the <i>Parallel Matrix Multiplication Machine</i> – PM<sup>3</sup>, which is used for very large matrix multiplication.</p><p>Given two matrices <i>A</i> and <i>B</i>, where <i>A</i> is an <i>N</i> × <i>P</i> matrix and <i>B</i> is a <i>P</i> × <i>M</i> matrix, PM<sup>3</sup> can compute matrix <i>C</i> = <i>AB</i> in <i>O</i>(<i>P</i>(<i>N</i> + <i>P</i> + <i>M</i>)) time. However the developers of PM<sup>3</sup> soon discovered a small problem: there is a small chance that PM<sup>3</sup> makes a mistake, and whenever a mistake occurs, the resultant matrix <i>C</i> will contain exactly one incorrect element.</p><p>The developers come up with a natural remedy. After PM<sup>3</sup> gives the matrix <i>C</i>, they check and correct it. They think it is a simple task, because there will be at most one incorrect element.</p><p>So you are to write a program to check and correct the result computed by PM<sup>3</sup>.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The first line of the input three integers <i>N</i>, <i>P</i> and <i>M</i> (0 &lt; <i>N</i>, <i>P</i>, <i>M</i> ≤ 1,000), which indicate the dimensions of <i>A</i> and <i>B</i>. Then follow <i>N</i> lines with <i>P</i> integers each, giving the elements of <i>A</i> in row-major order. After that the elements of <i>B</i> and <i>C</i> are given in the same manner.</p><p>Elements of <i>A</i> and <i>B</i> are bounded by 1,000 in absolute values which those of <i>C</i> are bounded by 2,000,000,000.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>If <i>C</i> contains no incorrect element, print “<code>Yes</code>”. Otherwise print “<code>No</code>” followed by two more lines, with two integers <i>r</i> and <i>c</i> on the first one, and another integer <i>v</i> on the second one, which indicates the element of <i>C</i> at row <i>r</i>, column <i>c</i> should be corrected to <i>v</i>.</p></span></div>', '<pre class="sio">2 3 2\r\n1 2 -1\r\n3 -1 0\r\n-1 0\r\n0 2\r\n1 3\r\n-2 -1\r\n-3 -2</pre>', '<pre class="sio">No\r\n1 2\r\n1</pre>', '<div class="ptx" lang="en-US"><p>The test set contains large-size input. Iostream objects in C++ or Scanner in Java might lead to efficiency problems.</p></div>', 'POJ Monthly--2007.04.01', '34.79%', '87.29%', '2016-06-16 16:31:04', 3, '模拟', -0.911300238188372, -0.263467427690289),
(45, 'http://poj.org/problem?id=3214', '3214', 'Poj', ' 5000MS', ' 131072K', 'Heap', '<div class="ptx" lang="en-US"><span lang="en-us"><p>A (binary) heap is an array that can be viewed as a nearly complete binary tree. In this problem, we are talking about max-heaps.</p><p>A max-heap holds the property that for each node than the root, it’s key is no greater than its parent’s. Upon this we further require that for every node that has two children, key of any node in the subtree rooted at its left child should be less than that of any node in the subtree rooted at its right child.</p><p>Any array can be transformed into a max-heap satisfying the above requirement by modifying some of its keys. Your task is find the minimum number of keys that have to be modified.</p></span></div>', '<div class="ptx" lang="en-US"><p>The input contains a single test case. The test case consists of nonnegative integers distributed on multiple lines. The first integer is the height of the heap. It will be at least 1 and at most 20. Then follow the elements of the array to be transformed into a heap described above, which do not exceed 10<sup>9</sup>. Modified elements should remain integral though not necessarily nonnegative.</p></div>', '<div class="ptx" lang="en-US"><p>Output only the minimum number of elements (or keys) that have to be modified.</p></div>', '<pre class="sio">3\r\n1\r\n3 6\r\n1 4 3 8</pre>', '<pre class="sio">4</pre>', '<div class="ptx" lang="en-US"><pre>   1                 10<br>  / \\               /  \\<br> 3   6    =====&gt;   3    9<br>/ \\ / \\           / \\  / \\<br>1 4 3 8           1 2  4 8</br></br></br></br></pre></div>', 'POJ Monthly--2007.04.01', '22.12%', '81.86%', '2016-06-16 16:31:04', 19, '二叉树', -0.921143748340638, -1.31573589645636),
(46, 'http://poj.org/problem?id=3215', '3215', 'Poj', ' 6000MS', ' 131072K', 'Median of Lines', '<div class="ptx" lang="en-US"><span lang="en-us"><p>In the Cartesian plane, there are <i>n</i> (odd) distinct lines <i>f<sub>i</sub></i>(<i>x</i>) = <i>a<sub>i</sub></i> + <i>xb<sub>i</sub></i> (<i>i</i> = 1, 2, …, <i>n</i>). For each <i>x</i>, <i>F</i>(<i>x</i>) denotes the median of {<i>f</i><sub>1</sub>(<i>x</i>), <i>f</i><sub>2</sub>(<i>x</i>), ..., <i>f<sub>n</sub></i>(<i>x</i>)}. You are required to find the solution space of the equation <i>F</i>(<i>x</i>) = 0.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><font face="Times New Roman"><p>The input contains multiple test cases. Each test case have <i>n</i> + 1 lines the first one of which contains <i>n</i> (1 &lt; <i>n</i> &lt; 10<sup>5</sup> and odd). Then <i>n</i> lines follow, each of which contains two integers <i>a<sub>i</sub></i> and <i>b<sub>i</sub></i> (|<i>a<sub>i</sub></i>| ≤ 10<sup>8</sup>, 0 ≤ <i>b<sub>i</sub></i> &lt; 10<sup>8</sup>). A zero follows the last test case.</p></font></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><font face="Times New Roman">For each test case, output the solution space as an interval on a separate line. Interval boundaries should be rounded to two digits beyond the decimal point. “<code>+inf</code>” and “<code>-inf</code>” are used to represent positive and negative infinities. The solution space will form at most one interval in this problem. If the solution space is empty, just output “<code>-1</code>”.</font></span></div>', '<pre class="sio">3\r\n0 0\r\n1 0\r\n0 1\r\n3\r\n0 0\r\n1 2\r\n1 1\r\n3\r\n1 0\r\n2 0\r\n3 0\r\n3\r\n1 1\r\n1 2\r\n1 3\r\n3\r\n0 0 \r\n1 0\r\n-1 0\r\n0</pre>', '<pre class="sio">(-inf,0.00]\r\n[-1.00,-0.50]\r\n-1\r\n[-0.50,-0.50]\r\n(-inf,+inf)</pre>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Be cautious about outputting “<code>-0.00</code>”.</p><p>Illustration of the second test case in the sample input:</p><div align="center"><table border="0" cellspacing="20"><tr><td><img src="http://poj.org/images/3215_1.png"/></td><td><img src="http://poj.org/images/3215_2.png"/></td></tr></table></div></span></div>', 'POJ Monthly--2007.04.01', '21.53%', '65.48%', '2016-06-16 16:31:04', 4, '动规', -0.961437237700189, -1.36473655916922),
(47, 'http://acm.hdu.edu.cn/showproblem.php?pid=2965', '2965', 'Hdu', '5.0s', '32.0MB', 'Business Cards', '<div class="panel_content">Running a paper shop is not an easy job, especially with harsh customers. Today they brought their own rectangular sheets of paper, asking you to cut it into rectangular business cards of specific size.<br><br>Moreover, they require that all the paper (which may not be cheap, but is definitely not that expensive!) has to be used, i.e. no tiny bit may be left over. <br>Moreover, the brilliant idea of cutting the sheet into very small pieces, and then gluing them together in desired sheets was laughed at.<br><br>An example of a 9 *6 paper sheet divided into 2 * 3 cards is given below.<br><center><img src="http://acm.hdu.edu.cn/../../../data/images/con181-1001-1.JPG" style="max-width:100%;"/></center><br/></br></br></br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. The first line contains the number of test cases t (t &lt;= 10^5). Then t test cases follow. Each of them consists of one line containing four integers a, b, c, d (1 &lt;=a, b, c, d &lt;= 10^9).<br><br>Numbers a and b are dimensions of each business card; c and d are dimensions of the paper sheet.</br></br></div>', '<div class="panel_content">For each test case output one line containing word YES if it is possible to divide the whole sheet into business cards, and NO otherwise.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n2 3 9 6\r\n2 3 8 6\r\n2 3 6 8\r\n2 3 5 7</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">YES\r\nYES\r\nYES\r\nNO</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '25.29%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.978305858517186, -0.937388446914228),
(48, 'http://acm.hdu.edu.cn/showproblem.php?pid=2966', '2966', 'Hdu', '30.0s', '32.0MB', 'In case of failure', '<div class="panel_content">To help their clients deal with faulty Cash Machines, the board of The Planar Bank has decided to stick a label expressing sincere regret and sorrow of the bank about the failure on every ATM. The very same label would gently ask the customer to calmly head to the nearest Machine (that should hopefully<br>work fine).<br><br><br>In order to do so, a list of two-dimensional locations of all n ATMs has been prepared, and your task is to find for each of them the one closest with respect to the Euclidean distance.</br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. The very first line contains the number of cases t (t &lt;= 15) that follow. Each test cases begin with the number of Cash Machines n (2 &lt;= n &lt;= 10^5). Each of the next n lines contain the coordinates of one Cash Machine x,y (0 &lt;= x,y &lt;=10^9) separated by a space. No two<br>points in one test case will coincide.</br></div>', '<div class="panel_content">For each test case output n lines. i-th of them should contain the squared distance between the i-th ATM from the input and its nearest neighbour.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n10\r\n17 41\r\n0 34\r\n24 19\r\n8 28\r\n14 12\r\n45 5\r\n27 31\r\n41 11\r\n42 45\r\n36 27\r\n15\r\n0 0\r\n1 2\r\n2 3\r\n3 2\r\n4 0\r\n8 4\r\n7 4\r\n6 3\r\n6 1\r\n8 0\r\n11 0\r\n12 2\r\n13 1\r\n14 2\r\n15 0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">200\r\n100\r\n149\r\n100\r\n149\r\n52\r\n97\r\n52\r\n360\r\n97\r\n5\r\n2\r\n2\r\n2\r\n5\r\n1\r\n1\r\n2\r\n4\r\n5\r\n5\r\n2\r\n2\r\n2\r\n5</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '40.96%', NULL, '2016-06-16 16:31:07', 19, '二叉树', -0.96427090820674, 0.195005301516102),
(49, 'http://acm.hdu.edu.cn/showproblem.php?pid=2967', '2967', 'Hdu', '5.0s', '32.0MB', 'Morphing is fun', '<div class="panel_content">Morphic is a tree that grows very rapidly, bringing happiness to its owner. It has a single trunk consisting of a number of cells stacked one on top of another. Each cell has one of n possible colors which determine the way it mutates during the night, while nobody can see it. Florists denote these colors by the first n small letters of the English alphabet and know exactly into how many cells, and of what colors, a cell of each color divides. In fact, they have wrote their knowledge down simply with n nonempty words, each word representing the resulting sequence of colors.<br><br><br>A seed of a Morphic has a single cell of color a and is rooted firmly in the ground. As long as the Morphic is still alive, each night all its cells simultaniously morph according to the aforementioned rules, possibly causing an exponential growth because each new cell is of the same size as the original one. <br><br>For example, if rules say that a becomes ab, and b becomes ca, then after two nights a seed will evolve to a trunk consisting of 4 cells: abca.<br><br>Therefore the top of a Morphic is usually hidden in clouds. The only way to tell if it is still alive is to check if visible part of the trunk is changing colors. In order to do so, one can build enormously high (yet still of constant height) tower, and watch from its top a fixed fragment of the trunk.<br><br><br>As you can easily see, it is either suficient to observe first k cells from the bottom for some fixed k, or no matter how high the tower is, you will not be able to tell for sure if a Morphic died. The latter happens when for every k, rules cause the k-th cell to eventually stop changing colors, even though the<br>tree is still alive and mutating.<br><br><br>To prevent waste of money on building such enormous towers, you are to write a program that<br>determines if it is possible to monitor health of a Morphic.</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input contains several Morphics descriptions. The first line contains the number of descriptions t (t &lt;= 10^4) that follow. Each of them begins with the number of colors n (1 &lt;= n &lt;= 26).<br><br>Next n lines contain the rules by which the Morphic grows. The i-th one describes the sequence of colors in bottom-up order obtained from a single cell of i-th color. Each line contains at most 100 lowercase English letters.</br></br></div>', '<div class="panel_content">For each test case output one line containing YES if building of a tower is pointless (as in: YES, we can save money!). Otherwise output NO.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n2\r\nab\r\na\r\n3\r\nba\r\nc\r\nc\r\n3\r\nba\r\nc\r\nb\r\n3\r\nbbbbbbbbbbbbbbb\r\nccccccccccccccc\r\nc</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">YES\r\nYES\r\nNO\r\nYES</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '26.32%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.998033450915203, -0.862955418140569),
(50, 'http://acm.hdu.edu.cn/showproblem.php?pid=2968', '2968', 'Hdu', '5.0s', '32.0MB', 'Museum', '<div class="panel_content">There is this big museum, full of fancy rooms and shiny corridors. It is so large that planning any tour in it becomes a serious issue. This is where your help is necessary. You are to help in planning signs that will make navigation through the whole building much easier. The idea is that if a room has d doors leading through corridors to other rooms, these doors and corresponding corridors are (locally) labeled with numbers 1, 2, ... , d. Then all visitors are advised to follow a simple procedure. <br><br>If they are in room v at the very beginning of their tour, they should choose door labelled with 1 and pass through the corresponding corridor If they are in room v and they entered it through door labelled with i, they should pick the door labelled with the next number (i.e. i + 1 if i &lt; d and 1 if i = d) and pass through corresponding corridor. Here is a simple example, in which tourists start in room 1 and visit rooms 1, 2,3, 4,5, 6 in this order passing through each corridor at least once:<br><center><img src="http://acm.hdu.edu.cn/../../../data/images/con181-1004-1.JPG" style="max-width:100%;"/></center><br><br>Exhibits in this museum are not only in rooms but also in corridors connecting different rooms. After all, the corridors are well suited for displaying paintings and photography! Thus we want to ensure that the tourists that follow the rules will pass through each corridor at least once, assuming they do not get bored easily and walk long enough, irrespectively of the room they started the tour in. Your task is to find such a labelling.<br><br><br>It turns out that there are at most 3 corridors outgoing from each room and the whole museum is connected, i.e. it is possible to walk between any two rooms, possibly passing through other rooms along the way. All corridors outgoing from a single room lead to different rooms.</br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. The first line contains the number of test cases t (t &lt;= 100). Each test begins with a line containing the number of rooms n (3 &lt;= n &lt;= 10^5). The next n lines contain description of all corridors. i-th of them described corridors connecting the i-th room with others. It begins with an integer d (1 &lt;= d &lt;= 3), the number of doors in this room. d integers r1; r2; : : : ; rd follow, giving numbers of rooms that those doors lead to (1 &lt;= rj &lt;= n and rj != rk if j != k and rj != i). <br><br><br>All corridors are bidirectional, so if there is door from room x to room y, there is door from room y to room x as well. Total size of the input will not exceed 50MB.</br></br></br></div>', '<div class="panel_content">For each test case output exactly n lines. i-th of them should contain numbers of rooms directly connected by corridors with room i, in order of their assigned labels. You may assume that a valid labelling of doors always exists, you just need to find one.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n6\r\n3 4 2 3\r\n3 5 1 3\r\n3 6 1 2\r\n1 1\r\n1 2\r\n1 3\r\n4\r\n2 2 4\r\n2 1 3\r\n2 2 4\r\n2 1 3</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3 4 2 3\r\n3 5 3 1\r\n3 6 1 2\r\n1 1\r\n1 2\r\n1 3\r\n2 2 4\r\n2 1 3\r\n2 2 4\r\n2 1 3</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '0.00%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.999358283982856, -2.76497223107524),
(51, 'http://acm.hdu.edu.cn/showproblem.php?pid=2969', '2969', 'Hdu', '5.0s', '32.0MB', 'Skyscrapers', '<div class="panel_content">In a seaside village, there is an avenue of skyscrapers. Each skyscrapers is 100m wide and has certain height. Due to very high price of parcels, any two consecutive skyscrapers are adjacent. <br><br>The avenue lies close to the beach so the street is exactly at the sea level.<br><br>Unfortunately, this year, due to the global warming, the sea level started to increase by one meter each day. If the skyscraper height is no greater than the current sea level, it is considered flooded.<br><br>A region is a maximal set of non-flooded, adjacent skyscrapers. This term is of particular importance, as it is suficient to deliver goods (like current, carrots or cabbages) to any single skyscraper in each region.<br><br>Hence, the city major wants to know how many regions there will be in the hard days that come. An example of an avenue with 5 skyscrapers after 2 days is given below.</br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. The first line contains an integer t (t &lt;= 15) denoting the number of test cases. Then t test cases follow. Each of them begins with a line containing two numbers n and d (1 &lt;= n, d &lt;=10^6), n is the number of skyscrapers and d is the number of days which the major wants<br>to query. <br><br>Skyscrapers are numbered from left to right. The next line contains n integers h1,h2,..., hn where 1 &lt;= hi &lt;= 10^9 is the height of skyscraper i. The third line of a single test case contains d numbers tj such that 0 &lt;= t1 &lt; t2 &lt; ... &lt; td-1 &lt; td &lt;=10^9.<br><center><img src="http://acm.hdu.edu.cn/../../../data/images/con181-1005-1.JPG" style="max-width:100%;"/></center></br></br></br></br></div>', '<div class="panel_content">For each test case output d numbers r1,r2,...,rd, where rj is the number of regions on day tj .</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n3 3\r\n1 2 3\r\n1 2 3\r\n5 3\r\n1 3 5 1 3\r\n0 2 4</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 1 0\r\n1 2 1</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '30.99%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.981431636536179, -0.525477510982328),
(52, 'http://acm.hdu.edu.cn/showproblem.php?pid=2970', '2970', 'Hdu', '5.0s', '32.0MB', 'Suffix reconstruction', '<div class="panel_content">Given a text s[1..n] of length n, we create its suffix array by taking all its suffixes: s[1..n], s[2..n],...., s[n..n] and sorting them lexicographically. As a result we get a sorted list of suffixes: s[p(1)..n], s[p(2)..n],..., s[p(n)..n] and call the sequence p(1),p(2),...,p(n) the suffix array of s[1..n]. <br><br>For example, if s = abbaabab, the sorted list of all suffixes becomes: aabab, ab, abab, abbaabab, b, baabab, bab, bbaabab and the suffix array is 4, 7, 5, 1, 8, 3,6, 2.<br><br><br>It turns out that it is possible to construct this array in a linear time. Your task will be completely different, though: given p(1), p(2), p(3),... , p(n) you should check if there exist at least one text consisting of lowercase letters of the English alphabet for which this sequence is the suffix array. If so, output any such text. Otherwise output -1.</br></br></br></br></br></div>', '<div class="panel_content">The input contains several descriptions of suffix arrays. The first line contains the number of descriptions t (t &lt;= 100). Each description begins with a line containing the length of both the text and the array n (1 &lt;= n &lt;= 500000). Next line contains integers p(1), p(2), ... ,p(n). You may assume that 1 &lt;= p(i) &lt;= n and no value of p(i) occurs twice. Total size of the input will not exceed 50MB.</div>', '<div class="panel_content">For each test case  <br>If there are multiple answers, output the smallest  dictionary order in the given suffix array. In case there is no such text consisting of lowercase letters of the English alphabet, output -1.</br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6\r\n2\r\n1 2\r\n2\r\n2 1\r\n3\r\n2 3 1\r\n6\r\n3 4 5 1 2 6\r\n14\r\n3 10 2 12 14 5 13 4 1 8 6 11 7 9\r\n7\r\n5 1 7 4 3 2 6</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">ab\r\naa\r\nbab\r\nbcaaad\r\nebadcfgehagbdc\r\nbcccadc</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '53.92%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.993396535178418, 1.13156069268758),
(53, 'http://acm.hdu.edu.cn/showproblem.php?pid=2971', '2971', 'Hdu', '5.0s', '32.0MB', 'Tower', '<div class="panel_content">Alan loves to construct the towers of building bricks. His towers consist of many cuboids with square base. All cuboids have the same height h = 1. Alan puts the consecutive cuboids one over another:<br><center><img src="http://acm.hdu.edu.cn/../../../data/images/con181-1007-1.JPG" style="max-width:100%;"/></center><br>Recently in math class, the concept of volume was introduced to Alan. Consequently, he wants to compute the volume of his tower now. The lengths of cuboids bases (from top to bottom) are constructed by Alan in the following way:<br><br>1. Length a1 of the first square is one.<br><br>2. Next, Alan fixes the length a2 of the second square.<br><br>3. Next, Alan calculates the length an (n &gt; 2) by 2*a2*(an-1)-(an-2). Do not ask why he chose such<br><br>a formula; let us just say that he is a really peculiar young fellow. For example, if Alan fixes a2 = 2, then a3 = 8 -a1 = 7; see Figure 1. If Alan fixes a2 = 1, then an = 1 holds for all n belong to N; see Figure 2.<br><br>Now Alan wonders if he can calculate the volume of tower of N consecutive building bricks. Help Alan and write the program that computes this volume. Since it can be quite large, it is enough to compute the answer modulo given natural number m.</br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. The first line contains the number t (t &lt;= 10^5) denoting the number of test cases. Then t test cases follow. Each of them is given in a separate line containing three integers a2,N,m (1 &lt;= a2,m &lt;= 10^9, 2 &lt;= N &lt;= 10^9) separated by a single space, where a2 denotes the fixed length of second square in step 2, while N denotes the number of bricks constructed by Alan.</div>', '<div class="panel_content">For each test case (a2,N,m) compute the volume of tower of N consecutive bricks constructed by Alan according to steps (1-3) and output its remainder modulo m.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3\r\n2 3 100\r\n1 4 1000\r\n3 3 1000000000</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">54\r\n4\r\n299\r\n<div style="font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px"><div style="font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed"><i>Hint</i></div>\r\n<center><img src="http://acm.hdu.edu.cn/../../../data/images/con181-1007-2.JPG"/></center>\r\n</div><i style="font-size:1px"> </i></div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '23.12%', NULL, '2016-06-16 16:31:07', 2, '数论', -0.94431561012522, -1.09420366287427),
(54, 'http://acm.hdu.edu.cn/showproblem.php?pid=2972', '2972', 'Hdu', '5.0s', '32.0MB', 'Two professors', '<div class="panel_content">There are two professors at the great Academy of X that really do not get along with each other. In order not to reveal their names, we will call them 1 and 2. The Academy employs exactly n professors; each of them has to give exactly one lecture. As their schedules are rather tight (they are professors,<br>remember?), the starting and the ending time of each lecture is already fixed. However, it is not yet fixed where each lecture will take place. Obviously, it is impossible to schedule two lectures in the same room if their durations overlap; on the other hand, it is possible if one of them starts exactly at the same time that the other one ends. Your tasks is to find the minimal number of rooms allowing to arrange all the lectures. But know that professors 1 and 2 hate each other so much that they will never give their lectures in the same room.<br/></br></div>', '<div class="panel_content">The input contains several test cases. The first line contains the number of test cases t (t &lt;= 250). Each test begins with a line containing the number of professors n (2 &lt;= n &lt;= 10^5). Next n lines follow, i-th of which contains two integers starti and endi (0 &lt;= starti &lt; endi &lt;= 10^9), the starting and the ending time of the lecture that the i-th professor gives, respectively. Total size of the input will not exceed 50MB.</div>', '<div class="panel_content">For each test case output the minimal number of rooms necessary to schedule all the lectures.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n2\r\n0 10\r\n10 20\r\n3\r\n0 10\r\n10 20\r\n10 20\r\n5\r\n4 14\r\n3 13\r\n2 12\r\n1 11\r\n0 10\r\n4\r\n0 10\r\n10 20\r\n20 30\r\n30 40</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n2\r\n5\r\n2</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '15.92%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.992195905210858, -1.61451221352509),
(55, 'http://acm.hdu.edu.cn/showproblem.php?pid=2973', '2973', 'Hdu', '5.0s', '32.0MB', 'YAPTCHA', '<div class="panel_content">The math department has been having problems lately. Due to immense amount of unsolicited automated programs which were crawling across their pages, they decided to put Yet-Another-Public-Turing-Test-to-Tell-Computers-and-Humans-Apart on their webpages. In short, to get access to their scientific papers, one have to prove yourself eligible and worthy, i.e. solve a mathematic riddle.<br><br><br>However, the test turned out difficult for some math PhD students and even for some professors. Therefore, the math department wants to write a helper program which solves this task (it is not irrational, as they are going to make money on selling the program).<br><br>The task that is presented to anyone visiting the start page of the math department is as follows: given a natural n, compute<br><center><img src="http://acm.hdu.edu.cn/../../../data/images/con181-1009-1.JPG" style="max-width:100%;"/></center><br>where [x] denotes the largest integer not greater than x.</br></br></br></br></br></br></br></div>', '<div class="panel_content">The first line contains the number of queries t (t &lt;= 10^6). Each query consist of one natural number n (1 &lt;= n &lt;= 10^6).</div>', '<div class="panel_content">For each n given in the input output the value of Sn.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">13\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n100\r\n1000\r\n10000</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">0\r\n1\r\n1\r\n2\r\n2\r\n2\r\n2\r\n3\r\n3\r\n4\r\n28\r\n207\r\n1609</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '50.90%', NULL, '2016-06-16 16:31:07', 2, '数论', -0.982756469603832, 0.913320161720153),
(56, 'http://acm.hdu.edu.cn/showproblem.php?pid=2974', '2974', 'Hdu', '5.0s', '32.0MB', 'Counting heaps', '<div class="panel_content">We are given a rooted tree of n vertices. The vertices are to be labeled with numbers 1,2,..., n so that each label is unique and the heap condition holds, i.e. the label of any vertex is less than the label of its parent. How many such labellings exist? Since this number may be quite large, calculate only its<br>remainder modulo m.</br></div>', '<div class="panel_content">The input contains several tree descriptions. The first line contains the number of input trees t (t &lt;=250).<br><br>Each tree description begins with a line containing the size of the tree n (1 &lt;= n &lt;= 500000) and an integer m (2 &lt;= m &lt;= 10^9). n - 1 lines follow, i-th of which contains p(i + 1), the number of the parent of the i + 1-th vertex (1 &lt;= p(i + 1) &lt;= i). Vertex number 1 will be the root in each tree, so its parent will not be given. Total size of the input will not exceed 50MB.</br></br></div>', '<div class="panel_content">For each tree output the number of its valid labellings modulo given m.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n3 1000000\r\n1\r\n1\r\n4 1000000\r\n1\r\n1\r\n1\r\n5 1000000\r\n1\r\n2\r\n3\r\n4\r\n5 1000000\r\n1\r\n1\r\n3\r\n3</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n6\r\n1\r\n8\r\n\r\n\r\n<div style="font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px"><div style="font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed"><i>Hint</i></div>\r\n<center><img src="http://acm.hdu.edu.cn/../../../data/images/con181-1010-1.JPG"/></center>\r\n</div><i style="font-size:1px"> </i></div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Central+European+Programming+Contest+2008&amp;source=1&amp;searchmode=source"> Central European Programming Contest 2008 </a> </div>', '19.08%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.987848796707622, -1.38615457185056);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(57, 'http://acm.hdu.edu.cn/showproblem.php?pid=2766', '2766', 'Hdu', '1.0s', '32.0MB', 'Equilibrium Mobile', '<div class="panel_content"><center><img src="http://acm.hdu.edu.cn/../../../data/images/C179-1001-1.jpg" style="max-width:100%;"/></center><br>A mobile is a type of kinetic sculpture constructed to take advantage of the principle of equilibrium. It consists of a number of rods, from which weighted objects or further rods hang. The objects hanging from the rods balance each other, so that the rods remain more or less horizontal. Each rod hangs from only one string, which gives it freedom to rotate about the string.<br><br>We consider mobiles where each rod is attached to its string exactly in the middle, as in the figure underneath. You are given such a configuration, but the weights on the ends are chosen incorrectly, so that the mobile is not in equilibrium. Since that''s not aesthetically pleasing, you decide to change some of the weights. <br><center><img src="http://acm.hdu.edu.cn/../../../data/images/C179-1001-2.jpg" style="max-width:100%;"/></center><br><br>What is the minimum number of weights that you must change in order to bring the mobile to equilibrium? You may substitute any weight by any (possibly non-integer) weight. For the mobile shown in the figure, equilibrium can be reached by changing the middle weight from 7 to 3, so only 1 weight needs to changed. </br></br></br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line with the structure of the mobile, which is a recursively defined expression of the form:<br><br>        &lt;expr&gt; ::= &lt;weight&gt; | "[" &lt;expr&gt; "," &lt;expr&gt; "]"<br><br>      with &lt;weight&gt; a positive integer smaller than 109 indicating a weight and [&lt;expr&gt;,&lt;expr&gt;] indicating a rod with the two expressions at the ends of the rod. The total number of rods in the chain from a weight to the top of the mobile will be at most 16. </br></br></br></br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with the minimum number of weights that have to be changed. </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3\r\n[[3,7],6]\r\n40\r\n[[2,3],[4,5]]</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n0\r\n3</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '24.68%', NULL, '2016-06-16 16:31:07', 19, '二叉树', -0.986917273456929, -0.981470143566589),
(58, 'http://acm.hdu.edu.cn/showproblem.php?pid=2767', '2767', 'Hdu', '2.0s', '32.0MB', 'Proving Equivalences', '<div class="panel_content">Consider the following exercise, found in a generic linear algebra textbook.<br><br>    Let A be an n × n matrix. Prove that the following statements are equivalent:<br><br>       1. A is invertible.<br>       2. Ax = b has exactly one solution for every n × 1 matrix b.<br>       3. Ax = b is consistent for every n × 1 matrix b.<br>       4. Ax = 0 has only the trivial solution x = 0. <br><br>The typical way to solve such an exercise is to show a series of implications. For instance, one can proceed by showing that (a) implies (b), that (b) implies (c), that (c) implies (d), and finally that (d) implies (a). These four implications show that the four statements are equivalent.<br><br>Another way would be to show that (a) is equivalent to (b) (by proving that (a) implies (b) and that (b) implies (a)), that (b) is equivalent to (c), and that (c) is equivalent to (d). However, this way requires proving six implications, which is clearly a lot more work than just proving four implications!<br><br>I have been given some similar tasks, and have already started proving some implications. Now I wonder, how many more implications do I have to prove? Can you help me determine this? </br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line containing two integers n (1 ≤ n ≤ 20000) and m (0 ≤ m ≤ 50000): the number of statements and the number of implications that have already been proved.<br>    * m lines with two integers s1 and s2 (1 ≤ s1, s2 ≤ n and s1 ≠ s2) each, indicating that it has been proved that statement s1 implies statement s2. </br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with the minimum number of additional implications that need to be proved in order to prove that all statements are equivalent. </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n4 0\r\n3 2\r\n1 2\r\n1 3</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n2</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '34.97%', NULL, '2016-06-16 16:31:07', 5, '图', -0.893102531853769, -0.23786250659479),
(59, 'http://acm.hdu.edu.cn/showproblem.php?pid=2768', '2768', 'Hdu', '1.0s', '32.0MB', 'Cat vs. Dog', '<div class="panel_content">The latest reality show has hit the TV: ``Cat vs. Dog''''. In this show, a bunch of cats and dogs compete for the very prestigious Best Pet Ever title. In each episode, the cats and dogs get to show themselves off, after which the viewers vote on which pets should stay and which should be forced to leave the show.<br><br>Each viewer gets to cast a vote on two things: one pet which should be kept on the show, and one pet which should be thrown out. Also, based on the universal fact that everyone is either a cat lover (i.e. a dog hater) or a dog lover (i.e. a cat hater), it has been decided that each vote must name exactly one cat and exactly one dog.<br><br>Ingenious as they are, the producers have decided to use an advancement procedure which guarantees that as many viewers as possible will continue watching the show: the pets that get to stay will be chosen so as to maximize the number of viewers who get both their opinions satisfied. Write a program to calculate this maximum number of viewers. </br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line with three integers c, d, v (1 ≤ c, d ≤ 100 and 0 ≤ v ≤ 500): the number of cats, dogs, and voters.<br>    * v lines with two pet identifiers each. The first is the pet that this voter wants to keep, the second is the pet that this voter wants to throw out. A pet identifier starts with one of the characters `C'' or `D'', indicating whether the pet is a cat or dog, respectively. The remaining part of the identifier is an integer giving the number of the pet (between 1 and c for cats, and between 1 and d for dogs). So for instance, ``D42'''' indicates dog number 42. </br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with the maximum possible number of satisfied voters for the show. </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n1 1 2\r\nC1 D1\r\nD1 C1\r\n1 2 4\r\nC1 D1\r\nC1 D1\r\nC1 D2\r\nD2 C1</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n3</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '38.10%', NULL, '2016-06-16 16:31:07', 5, '图', -0.958764570769308, -0.0116728172146409),
(60, 'http://acm.hdu.edu.cn/showproblem.php?pid=2769', '2769', 'Hdu', '1.0s', '32.0MB', 'Disgruntled Judge', '<div class="panel_content">Once upon a time, there was an nwerc judge with a tendency to create slightly too hard problems. As a result, his problems were never solved. As you can image, this made our judge somewhat frustrated. This year, this frustration has culminated, and he has decided that rather than spending a lot of time constructing a well-crafted problem, he will simply write some insanely hard problem statement and just generate some random input and output files. After all, why bother having proper test data if nobody is going to try the problem anyway?<br><br>Thus, the judge generates a testcase by simply letting the input be a random number, and letting the output be another random number. Formally, to generate the data set with T test cases, the judge generates 2T random numbers x1, ..., x2T between 0 and 10000, and then writes T, followed by the sequence x1, x3, x5, ..., x2T-1 to the input file, and the sequence x2, x4, x6, ..., x2T to the output file.<br><br>The random number generator the judge uses is quite simple. He picks three numbers x1, a, and b between 0 and 10000 (inclusive), and then for i from 2 to 2T lets xi = (a ・ xi-1 + b) mod 10001.<br><br>You may have thought that such a poorly designed problem would not be used in a contest of such high standards as nwerc. Well, you were wrong. </br></br></br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line containing an integer n (0 ≤ n ≤ 10000): an input testcase. <br><br>The input file is guaranteed to be generated by the process described above. </br></br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with an integer giving the answer for the testcase. <br><br>If there is more than one output file consistent with the input file, any one of these is acceptable. </br></br></br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3\r\n17\r\n822\r\n3014</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">9727\r\n1918\r\n4110</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '47.16%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.99161629074376, 0.643048775687643),
(61, 'http://acm.hdu.edu.cn/showproblem.php?pid=2770', '2770', 'Hdu', '6.0s', '32.0MB', 'Easy Climb', '<div class="panel_content">Somewhere in the neighborhood we have a very nice mountain that gives a splendid view over the surrounding area. There is one problem though: climbing this mountain is very difficult, because of rather large height differences. To make more people able to climb the mountain and enjoy the view, we would like to make the climb easier.<br><br>To do so, we will model the mountain as follows: the mountain consists of n adjacent stacks of stones, and each of the stacks is h(i) high. The successive height differences are therefore h(i+1)-h(i) (for 1 ≤ i ≤ n-1). We would like all absolute values of these height differences to be smaller than or equal to some number d.<br><br>We can do this by increasing or decreasing the height of some of the stacks. The first stack (the starting point) and the last stack (the ending point) should remain at the same height as they are initially. Since adding and removing stones requires a lot of effort, we would like to minimize the total number of added stones plus the total number of removed stones. What is this minimum number? </br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line with two integers n (2 ≤ n ≤ 100) and d (0 ≤ d ≤ 10^9): the number of stacks of stones and the maximum allowed height difference.<br>    * One line with n integers h(i) (0 ≤ h(i) ≤ 10^9): the heights of the stacks. </br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with the minimum number of stones that have to be added or removed or ``impossible'''' if it is impossible to achieve the goal. </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3\r\n10 2\r\n4 5 10 6 6 9 4 7 9 8\r\n3 1\r\n6 4 0\r\n4 2\r\n3 0 6 3</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6\r\nimpossible\r\n4</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '35.88%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.992672017094546, -0.172101286998644),
(62, 'http://acm.hdu.edu.cn/showproblem.php?pid=2771', '2771', 'Hdu', '1.0s', '32.0MB', 'Sculpture', '<div class="panel_content"><center><img src="http://acm.hdu.edu.cn/../../../data/images/C179-1006-1.jpg" style="max-width:100%;"> </img></center><br><br>Imagine a box, made of copper plate. Imagine a second one, intersecting the first one, and several others, intersecting each other (or not). That is how the sculptor Oto Boxing constructs his sculptures. In fact he does not construct that much, he only makes the design; the actual construction is contracted out to a construction company. For the calculation of the costs of construction the company needs to know the total area of copper plate involved. Parts of a box that are hidden in another box are not realized in copper, of course. (Copper is quite expensive, and prices are rising.) After construction, the total construction is plunged into a bath of chemicals. To prevent this bath from running over, the construction company wants to know the total volume of the construction. Given that a construction is a collection of boxes, you are asked to calculate the area and the volume of the construction.<br><br>Some of Oto''s designs are connected, others are not. Either way, we want to know the total area and the total volume. It might happen that the boxes completely enclose space that is not included in any of the boxes (see the second example below). Because the liquid cannot enter that space, its volume must be added to the total volume. Copper plate bordering this space is superfluous, of course, so it does not add to the area. </br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line with an integer n (1 ≤ n ≤ 50): the number of boxes involved.<br>    * n lines with six positive integers x0, y0, z0, x, y, z (1 ≤ x0, y0, z0, x, y, z ≤ 500): the triple (x0, y0, z0) is the vertex of the box with the minimum values for the coordinates and the numbers x, y, z are the dimensions of the box (x, y and z dimension, respectively). All dimensions are in centimeters. The sides of the boxes are always parallel to the coordinate axes. </br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with two numbers separated by single spaces: the total amount of copper plate needed (in cm<sup>2</sup>), and the total volume (in cm<sup>3</sup>). </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n2\r\n1 2 3 3 4 5\r\n6 2 3 3 4 5\r\n7\r\n1 1 1 5 5 1\r\n1 1 10 5 5 1\r\n1 1 2 1 4 8\r\n2 1 2 4 1 8\r\n5 2 2 1 4 8\r\n1 5 2 4 1 8\r\n3 3 4 1 1 1</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">188 120\r\n250 250</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '29.13%', NULL, '2016-06-16 16:31:07', 14, 'BFS', -0.995735693563493, -0.65989055323379),
(63, 'http://acm.hdu.edu.cn/showproblem.php?pid=2772', '2772', 'Hdu', '1.0s', '32.0MB', 'Matchsticks', '<div class="panel_content">Matchsticks are ideal tools to represent numbers. A common way to represent the ten decimal digits with matchsticks is the following: <br><br><center><img src="http://acm.hdu.edu.cn/../../../data/images/C179-1008-1.jpg" style="max-width:100%;"/></center><br><br>This is identical to how numbers are displayed on an ordinary alarm clock. With a given number of matchsticks you can generate a wide range of numbers. We are wondering what the smallest and largest numbers are that can be created by using all your matchsticks. </br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line with an integer n (2 ≤ n ≤ 100): the number of matchsticks you have. </br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with the smallest and largest numbers you can create, separated by a single space. Both numbers should be positive and contain no leading zeroes. </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n3\r\n6\r\n7\r\n15</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">7 7\r\n6 111\r\n8 711\r\n108 7111111</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '36.97%', NULL, '2016-06-16 16:31:07', 3, '模拟', -0.982363159786873, -0.0933323536362284),
(64, 'http://acm.hdu.edu.cn/showproblem.php?pid=2773', '2773', 'Hdu', '1.0s', '32.0MB', 'White Water Rafting', '<div class="panel_content">You have been hired by a big theme park to design a new attraction: a white water rafting ride. You already designed the track; it is a round trip that is described by an inner and an outer polygon. The space in between the two polygons is the track.<br><br>You still need to design the rafts, however. It has been decided that they should be circular, so that they can spin freely along the track and increase the fun and excitement of the ride. Besides that, they should be as big as possible to fit the maximum number of people, but they can''t be too big, for otherwise they would get stuck somewhere on the track.<br><br>What is the maximum radius of the rafts so that they can complete the track? </br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line with an integer ni (3 ≤ ni ≤ 100): the number of points of the inner polygon.<br>    * ni lines with two integers each: the coordinates of the points of the inner polygon in consecutive order.<br>    * One line with an integer no (3 ≤ no ≤ 100): the number of points of the outer polygon.<br>    * no lines with two integers each: the coordinates of the points of the outer polygon in consecutive order. <br><br>All coordinates have absolute value no larger than 1000. The points of the polygons can be given in either clockwise or counterclockwise order and the two polygons do not intersect or touch themselves or each other. The outer polygon encloses the inner polygon. </br></br></br></br></br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with a floating point number: the maximal radius of the white water rafts. This number must have a relative or absolute error less than 10<sup>-6</sup>. </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n4\r\n-5 -5\r\n5 -5\r\n5 5\r\n-5 5\r\n4\r\n-10 -10\r\n-10 10\r\n10 10\r\n10 -10\r\n3\r\n0 0\r\n1 0\r\n1 1\r\n5\r\n3 -3\r\n3 3\r\n-4 2\r\n-1 -1\r\n-2 -2</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2.5\r\n0.70710678</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '47.51%', NULL, '2016-06-16 16:31:07', 2, '数论', -0.992941123811413, 0.668341552455391),
(65, 'http://acm.hdu.edu.cn/showproblem.php?pid=2774', '2774', 'Hdu', '1.0s', '32.0MB', 'Shuffle', '<div class="panel_content">You are listening to your music collection using the shuffle function to keep the music surprising. You assume that the shuffle algorithm of your music player makes a random permutation of the songs in the playlist and plays the songs in that order until all songs have been played. Then it reshuffles and starts playing the list again.<br><br>You have a history of the songs that have been played. However, your record of the history of played songs is not complete, as you started recording songs at a certain point in time and a number of songs might already have been played. From this history, you want to know at how many different points in the future the next reshuffle might occur.<br><br>A potential future reshuffle position is valid if it divides the recorded history into intervals of length s (the number of songs in the playlist) with the first and last interval possibly containing less than s songs and no interval contains a specific song more than once. </br></br></br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line with two integers s and n (1 ≤ s, n ≤ 100000): the number of different songs in the playlist and the number of songs in the recorded playlist history.<br>    * One line with n space separated integers, x1, x2, ..., xn (1 ≤ xi ≤ s): the recorded playlist history. </br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line with the number of future positions the next reshuffle can be at. If the history could not be generated by the above mentioned algorithm, output 0. </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n4 10\r\n3 4 4 1 3 2 1 2 3 4\r\n6 6\r\n6 5 4 3 2 1\r\n3 5\r\n3 3 1 1 1\r\n7 3\r\n5 7 3</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n6\r\n0\r\n7</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '40.48%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.994783469796117, 0.160318064806047),
(66, 'http://acm.hdu.edu.cn/showproblem.php?pid=2775', '2775', 'Hdu', '15.0s', '32.0MB', 'Videopoker', '<div class="panel_content">Videopoker is the slot machine variant of the currently immensely popular game of poker. It is a variant on draw poker. In this game the player gets a hand consisting of five cards randomly drawn from a standard 52-card deck. From this hand, the player may discard any number of cards (between 0 and 5, inclusive), and change them for new cards randomly drawn from the remainder of the deck. After that, the hand is evaluated and the player is rewarded according to a payout structure. A common payout structure is as follows:<br><center><img src="http://acm.hdu.edu.cn/../../../data/images/C179-1011-1.jpg" style="max-width:100%;"/></center><br>Once you know the payout structure, you can determine for a given hand which cards you must change to maximize your expected reward. We''d like to know this expected reward, given a hand. </br></br></div>', '<div class="panel_content">On the first line one positive number: the number of testcases, at most 100. After that per testcase:<br><br>    * One line with nine integers xi (0 ≤ xi ≤ 1000$) describing the payout structure. The numbers are in increasing order and describe the payout for one pair, two pair, etc, until the royal flush.<br>    * One line with one integer n (1 ≤ n ≤ 10): the number of starting hands to follow.<br>    * n lines, each describing a starting hand. A hand consists of five space separated tokens of the form Xs, with X being the rank (`2''...`9'', `T'', `J'', `Q'', `K'' or `A'') and s being the suit (`c'', `d'', `h'' or `s''). <br><br/></br></br></br></br></br></div>', '<div class="panel_content">Per testcase:<br><br>    * One line for each starting hand with a floating point number that is the maximal expected reward for that hand. These numbers must have an absolute or relative error less than 10<sup>-6</sup>. </br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n1 2 3 4 5 10 25 100 250\r\n5\r\nAh Ac Ad As 2s\r\nKs Qs Js Ts 2h\r\nKs Qs 2d 2h 3s\r\n2d 4h 5d 3c 9c\r\n2h 3h 6d 8h Tc</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">25.000000\r\n8.9574468\r\n1.5467160\r\n0.9361702\r\n0.6608135</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=NWERC+2008&amp;source=1&amp;searchmode=source"> NWERC 2008 </a> </div>', '24.09%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.997164029214556, -1.02410653868937),
(67, 'http://acm.hdu.edu.cn/showproblem.php?pid=2776', '2776', 'Hdu', '1.0s', '32.0MB', 'Bordering on Madness', '<div class="panel_content">Bob Roberts owns a design business which creates custom artwork for various corporations. One technique that his company likes to use is to take a simple rectilinear figure (a figure where all sides meet at 90 or 270 degrees and which contains no holes) and draw one or more rectilinear borders around them. Each of these borders is drawn so that it is a set distance d  away from the previously drawn border (or the original figure if it is the first border) and then the new area outlined by each border is painted a unique color. Some examples are shown below (without the coloring of the borders). <br><br><center><img src="http://acm.hdu.edu.cn/../../../data/images/C194-1001-1.jpg" style="max-width:100%;"/></center><br><br>The example on the left shows a simple rectilinear figure (grey) with two borders drawn around it. The one on the right is a more complicated figure; note that the border may become disconnected.<br><br>These pieces of art can get quite large, so Bob would like a program which can draw prototypes of the finished pieces in order to judge how aesthetically pleasing they are (and how much money they will cost to build). To simplify things, Bob never starts with a figure that results in a border where 2 horizontal (or vertical) sections intersect, even at a point. This disallows such cases as those shown below: <br><br><center><img src="http://acm.hdu.edu.cn/../../../data/images/C194-1001-2.jpg" style="max-width:100%;"/></center><br/></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">Input will consist of multiple test cases. The first line of the input file will contain a single integer indicating the number of test cases. Each test case will consist of two or more lines. The first will contain three positive integers n , m  and d  indicating the number of sides of the rectlinear figure, the number of borders to draw, and the distance between each border, where n&lt;=100  and m&lt;=20 . The remaining lines will contain the n  vertices of the figure, each represented by two positive integers indicating the x  and y  coordinates. The vertices will be listed in clockwise order starting with the vertex with the largest y  value and (among those vertices) the smallest x  value. </div>', '<div class="panel_content">For each test case, output three lines: the first will list the case number (as shown in the examples), the second will contain m  integers indicating the length of each border, and the third will contain m  integers indicating the additional area contributed to the artwork by each border. Both of these sets of numbers should be listed in order, starting from the border nearest the original figure. Lines two and three should be indented two spaces and labeled as shown in the examples. Separate test cases with a blank line. </div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2 \r\n6 2 10 \r\n20 30 100 30 100 0 0 0 0 10 20 10 \r\n10 1 7 \r\n20 50 70 50 70 0 0 0 0 30 \r\n20 30 20 10 60 10 60 40 20 40</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Case 1:\r\n  Perimeters: 340 420\r\n  Areas: 3000 3800\r\n\r\nCase 2:\r\n  Perimeters: 380\r\n  Areas: 2660</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=2008+East+Central+Regional+Contest&amp;source=1&amp;searchmode=source"> 2008 East Central Regional Contest </a> </div>', '21.43%', NULL, '2016-06-16 16:31:07', 14, 'BFS', -0.999710192766451, -1.21633164212425),
(68, 'http://poj.org/problem?id=1577', '1577', 'Poj', ' 1000MS', ' 10000K', 'Falling Leaves', '<div class="ptx" lang="en-US"><center><img src="http://poj.org/images/1577_1.jpg"> <br>Figure 1</br></img></center> <br>Figure 1 shows a graphical representation of a binary tree of letters. People familiar with binary trees can skip over the definitions of a binary tree of letters, leaves of a binary tree, and a binary search tree of letters, and go right to The problem.\r<br> <br>A binary tree of letters may be one of two things:\r<br><ol><li>It may be empty.\r<br><li>It may have a root node. A node has a letter as data and refers to a left and a right subtree. The left and right subtrees are also binary trees of letters.</li></br></li></ol> <br>In the graphical representation of a binary tree of letters:\r<br><ol><li>Empty trees are omitted completely.\r<br><li>Each node is indicated by\r<br><ul><li> Its letter data,\r<br><li> A line segment down to the left to the left subtree, if the left subtree is nonempty,\r<br><li> A line segment down to the right to the right subtree, if the right subtree is nonempty.</li></br></li></br></li></ul></br></li></br></li></ol> <br>A leaf in a binary tree is a node whose subtrees are both empty. In the example in Figure 1, this would be the five nodes with data B, D, H, P, and Y.\r<br> <br>The preorder traversal of a tree of letters satisfies the defining properties:\r<br><ol><li>If the tree is empty, then the preorder traversal is empty. \r<br><li>If the tree is not empty, then the preorder traversal consists of the following, in order\r<br><ul><li> The data from the root node,\r<br><li> The preorder traversal of the root''s left subtree,\r<br><li> The preorder traversal of the root''s right subtree.</li></br></li></br></li></ul></br></li></br></li></ol> <br>The preorder traversal of the tree in Figure 1 is KGCBDHQMPY.\r<br> <br>A tree like the one in Figure 1 is also a binary search tree of letters. A binary search tree of letters is a binary tree of letters in which each node satisfies:\r<br> <br>The root''s data comes later in the alphabet than all the data in the nodes in the left subtree.\r<br> <br>The root''s data comes earlier in the alphabet than all the data in the nodes in the right subtree.\r<br> <br>The problem:\r<br> <br>Consider the following sequence of operations on a binary search tree of letters\r<br> <br>Remove the leaves and list the data removed\r<br>Repeat this procedure until the tree is empty\r<br>Starting from the tree below on the left, we produce the sequence of trees shown, and then the empty tree \r<br><center><img src="http://poj.org/images/1577_2.jpg"/></center> <br>by removing the leaves with data\r<br> <br>BDHPY\r<br>CM\r<br>GQ\r<br>K\r<br> <br>Your problem is to start with such a sequence of lines of leaves from a binary search tree of letters and output the preorder traversal of the tree.</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input will contain one or more data sets. Each data set is a sequence of one or more lines of capital letters.\r<br> <br>The lines contain the leaves removed from a binary search tree in the stages described above. The letters on a line will be listed in increasing alphabetical order. Data sets are separated by a line containing only an asterisk (''*'').\r<br> <br>The last data set is followed by a line containing only a dollar sign (''$''). There are no blanks or empty lines in the input.</br></br></br></br></div>', '<div class="ptx" lang="en-US">For each input data set, there is a unique binary search tree that would produce the sequence of leaves. The output is a line containing only the preorder traversal of that tree, with no blanks.</div>', '<pre class="sio">BDHPY\r\nCM\r\nGQ\r\nK\r\n*\r\nAC\r\nB\r\n$</pre>', '<pre class="sio">KGCBDHQMPY\r\nBAC</pre>', '', 'Mid-Central USA 2000', '55.07%', '93.35%', '2016-06-16 16:31:04', 20, '二叉搜索树', -0.880282364164611, 1.42082653810102),
(69, 'http://poj.org/problem?id=2144', '2144', 'Poj', ' 5000MS', ' 65536K', 'Leaky Cryptography', '<div class="ptx" lang="en-US">The ACM ICPC judges are very careful about not leaking their problems, and all communi-cations are encrypted. However, one does sometimes make mistakes, like using too weak an encryption scheme. Here is an example of that.\r<br>The encryption chosen was very simple: encrypt each chunk of the input by flipping some bits according to a shared key. To provide reasonable security, the size of both chunk and key is 32 bits.\r<br>That is, suppose the input was a sequence of m 32-bit integers.\r<br>N1 N2 N3 ... Nm\r<br>After encoding with the key K it becomes the following sequence of m 32-bit integers.\r<br>(N1∧K) (N2∧K) (N3∧K) ... (Nm∧K)\r<br>where (a∧b) is the bitwise exclusive or of a and b.\r<br>Exclusive or is the logical operator which is 1 when only one of its operands is 1, and 0 otherwise.\r<br>Here is its definition for 1-bit integers.\r<br><pre>0 ♁ 0 = 0     0 ♁ 1 = 1\r<br>1 ♁ 0 = 1     1 ♁ 1 = 0</br></pre> <br>As you can see, it is identical to addition modulo 2. For two 32-bit integers a and b, their bitwise exclusive or a ∧ b is defined as follows, using their binary representations, composed of 0''s and 1''s.\r<br>a ∧ b = a<sub>31</sub>...a<sub>1</sub>a<sub>0</sub>∧b<sub>31</sub>...b<sub>1</sub>b<sub>0</sub> = c<sub>31</sub>...c<sub>1</sub>c<sub>0</sub> <br>where \r<br>c<sub>i</sub> = a<sub>i</sub>♁b<sub>i</sub> (i = 0, 1, ... , 31).\r<br>For instance, using binary notation, 11010110 ∧ 01010101 = 10100011, or using hexadecimal, d6 ∧ 55 = a3.\r<br>Since this kind of encryption is notoriously weak to statistical attacks, the message has to be compressed in advance, so that it has no statistical regularity. We suppose that N1 N2 . . .Nm is already in compressed form.\r<br>However, the trouble is that the compression algorithm itself introduces some form of regularity: after every 8 integers of compressed data, it inserts a checksum, the sum of these integers. That is, in the above input, N9 =  N1 +...+ N8, where additions are modulo 2<sup>32</sup>.\r<br>Luckily, you could intercept a communication between the judges. Maybe it contains a problem for the finals!\r<br>As you are very clever, you have certainly seen that you can easily find the lowest bit of the key, denoted by K0. On the one hand, if K0 = 1, then after encoding, the lowest bit of Σ<sub>1&lt;=i&lt;=8</sub>Ni∧K is unchanged, as K0 is added an even number of times, but the lowest bit of N9∧K is changed, so they shall differ. On the other hand, if K0 = 0, then after encoding, the lowest bit of Σ<sub>1&lt;=i&lt;=8</sub>Ni∧K shall still be identical to the lowest bit of N9∧K, as they do not change. For instance, if the lowest bits after encoding are 1 1 1 1 1 1 1 1 1 then K0 must be 1, but if\r<br>they are 1 1 1 1 1 1 1 0 1 then K0 must be 0.\r<br>So far, so good. Can you do better?\r<br>You should find the key used for encoding.</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input starts with a line containing only a positive integer S, indicating the number of datasets in the input. S is no more than 1000.\r<br>It is followed by S datasets. Each dataset is composed of nine 32-bit integers corresponding to the first nine chunks of a communication. They are written in hexadecimal notation, using digits `0'' to `9'' and lowercase letters `a'' to `f'', and with no leading zeros. They are separated by a space or a newline. Each dataset is ended by a newline.</br></div>', '<div class="ptx" lang="en-US">For each dataset you should output the key used for encoding. Each key shall appear alone on its line, and be written in hexadecimal notation, using digits `0'' to `9'' and lowercase letters `a'' to `f'', and with no leading zeros.</div>', '<pre class="sio">8\r\n1 1 1 1 1 1 1 1 8\r\n3 2 3 2 3 2 3 2 6\r\n3 4 4 7 7 b a 2 2e\r\ne1 13 ce 28 ca 6 ab 46 a6d\r\nb08 49e2 6128 f27 8cf2 bc50 7380 7fe1 723b\r\n4eba eb4 a352 fd14 6ac1 eed1 dd06 bb83 392bc\r\nef593c08 847e522f 74c02b9c 26f3a4e1 e2720a01 6fe66007\r\n7a4e96ad 6ee5cef6 3853cd88\r\n60202fb8 757d6d66 9c3a9525 fbcd7983 82b9571c ddc54bab 853e52da\r\n22047c88 e5524401</pre>', '<pre class="sio">0\r\n2\r\n6\r\n1c6\r\n4924afc7\r\nffff95c5\r\n546991d\r\n901c4a16</pre>', '', 'Japan 2004', '73.42%', '95.25%', '2016-06-16 16:31:04', 6, '最短路', -0.98799308102306, 2.94483020044177),
(70, 'http://poj.org/problem?id=2388', '2388', 'Poj', ' 1000MS', ' 65536K', 'Who''s in the Middle', '<div class="ptx" lang="en-US">FJ is surveying his herd to find the most average cow.  He wants to know how much milk this ''median'' cow gives: half of the cows give as much or more than the median; half give as much or less.\r<br> <br>Given an odd number of cows N (1 &lt;= N &lt; 10,000) and their milk output (1..1,000,000), find the median amount of milk given such that at least half the cows give the same amount of milk or more and at least half give the same or less.</br></br></div>', '<div class="ptx" lang="en-US">* Line 1: A single integer N\r<br> <br>* Lines 2..N+1: Each line contains a single integer that is the milk output of one cow.</br></br></div>', '<div class="ptx" lang="en-US">* Line 1: A single integer that is the median milk output.</div>', '<pre class="sio">5\r\n2\r\n4\r\n1\r\n3\r\n5</pre>', '<pre class="sio">3</pre>', '<div class="ptx" lang="en-US">INPUT DETAILS:\r<br> <br>Five cows with milk outputs of 1..5\r<br> <br>OUTPUT DETAILS:\r<br> <br>1 and 2 are below 3; 4 and 5 are above 3.</br></br></br></br></br></br></div>', 'USACO 2004 November', '58.04%', '96.78%', '2016-06-16 16:31:04', 23, '堆排序', 0.0393286419836227, 1.66749089107933),
(71, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1500', '1500', 'UVA', '3.000 seconds\\n\\t', NULL, '10559 - Blocks', '<iframe src="https://uva.onlinejudge.org/external/105/10559.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '28.35%', '66.13%', '2016-06-16 16:31:08', 4, '动规', 1.00518103307867, -0.972824784856408),
(72, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1501', '1501', 'UVA', '3.000 seconds\\n\\t', NULL, '10560 - Minimum Weight', '<iframe src="https://uva.onlinejudge.org/external/105/10560.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '39.22%', '84.40%', '2016-06-16 16:31:08', 2, '数论', -0.444046380236754, -0.0371695441446922),
(73, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1502', '1502', 'UVA', '3.000 seconds\\n\\t', NULL, '10561 - Treblecross', '<iframe src="https://uva.onlinejudge.org/external/105/10561.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '38.13%', '86.57%', '2016-06-16 16:31:08', 18, '树的BFS', -0.229955966906065, -0.130993298733079),
(74, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1503', '1503', 'UVA', '3.000 seconds\\n\\t', NULL, '10562 - Undraw the Trees', '<iframe src="https://uva.onlinejudge.org/external/105/10562.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '29.65%', '89.34%', '2016-06-16 16:31:08', 19, '二叉树', 1.89561543122859, -0.860924894062919),
(75, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1504', '1504', 'UVA', '3.000 seconds\\n\\t', NULL, '10563 - Least Squares', '<iframe src="https://uva.onlinejudge.org/external/105/10563.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '27.41%', '70.99%', '2016-06-16 16:31:08', -1, '未分类', -0.345235420237974, -1.05373701358401),
(76, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1505', '1505', 'UVA', '3.000 seconds\\n\\t', NULL, '10564 - Paths through the Hourglass', '<iframe src="https://uva.onlinejudge.org/external/105/10564.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '30.28%', '83.85%', '2016-06-16 16:31:08', 4, '动规', 1.21870356732891, -0.806696485447612),
(77, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1506', '1506', 'UVA', '3.000 seconds\\n\\t', NULL, '10565 - Matrix', '<iframe src="https://uva.onlinejudge.org/external/105/10565.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '27.66%', '75.23%', '2016-06-16 16:31:08', -1, '未分类', -0.786477465749764, -1.03221780381603),
(78, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1507', '1507', 'UVA', '3.000 seconds\\n\\t', NULL, '10566 - Crossed Ladders', '<iframe src="https://uva.onlinejudge.org/external/105/10566.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '47.23%', '94.03%', '2016-06-16 16:31:08', 2, '数论', 1.13522534250236, 0.652305936821347),
(79, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1508', '1508', 'UVA', '3.000 seconds\\n\\t', NULL, '10567 - Helping Fill Bates', '<iframe src="https://uva.onlinejudge.org/external/105/10567.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '35.18%', '80.76%', '2016-06-16 16:31:08', 5, '图', 0.745092414231313, -0.384919973995229),
(80, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1509', '1509', 'UVA', '3.000 seconds\\n\\t', NULL, '10568 - n Group k', '<iframe src="https://uva.onlinejudge.org/external/105/10568.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '23.11%', '73.24%', '2016-06-16 16:31:08', 4, '动规', -0.533203395867836, -1.42386742159324),
(81, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1510', '1510', 'UVA', '3.000 seconds\\n\\t', NULL, '10569 - Number Theory', '<iframe src="https://uva.onlinejudge.org/external/105/10569.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '51.77%', '86.15%', '2016-06-16 16:31:08', -1, '未分类', -0.567844019775454, 1.04309478620784),
(82, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1511', '1511', 'UVA', '3.000 seconds\\n\\t', NULL, '10570 - Meeting with Aliens', '<iframe src="https://uva.onlinejudge.org/external/105/10570.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '40.77%', '79.93%', '2016-06-16 16:31:08', -1, '未分类', 0.0125284004472606, 0.0962495564167763),
(83, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1512', '1512', 'UVA', '3.000 seconds\\n\\t', NULL, '10571 - Products', '<iframe src="https://uva.onlinejudge.org/external/105/10571.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '28.51%', '78.54%', '2016-06-16 16:31:08', 5, '图', -0.615545862533485, -0.959052490604901),
(84, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1513', '1513', 'UVA', '3.000 seconds\\n\\t', NULL, '10572 - Black &amp; White', '<iframe src="https://uva.onlinejudge.org/external/105/10572.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '40.90%', '84.25%', '2016-06-16 16:31:08', 4, '动规', -0.569547657016812, 0.107439545496125),
(85, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1514', '1514', 'UVA', '3.000 seconds\\n\\t', NULL, '10573 - Geometry Paradox', '<iframe src="https://uva.onlinejudge.org/external/105/10573.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '46.98%', '90.42%', '2016-06-16 16:31:08', 5, '图', 1.85018510479237, 0.630786727053368),
(86, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1515', '1515', 'UVA', '3.000 seconds\\n\\t', NULL, '10574 - Counting Rectangles', '<iframe src="https://uva.onlinejudge.org/external/105/10574.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '27.11%', '72.49%', '2016-06-16 16:31:08', 21, '排序', 0.696822692392829, -1.07956006530558),
(87, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1516', '1516', 'UVA', '3.000 seconds\\n\\t', NULL, '10575 - Polylops', '<iframe src="https://uva.onlinejudge.org/external/105/10575.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '52.80%', '86.18%', '2016-06-16 16:31:08', 5, '图', -0.543993098396438, 1.13175393045191),
(88, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1517', '1517', 'UVA', '3.000 seconds\\n\\t', NULL, '10576 - Y2K Accounting Bug', '<iframe src="https://uva.onlinejudge.org/external/105/10576.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '57.47%', '92.34%', '2016-06-16 16:31:08', 3, '模拟', -0.034605563230318, 1.53373276891776),
(89, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1518', '1518', 'UVA', '3.000 seconds\\n\\t', NULL, '10577 - Bounding box', '<iframe src="https://uva.onlinejudge.org/external/105/10577.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '56.00%', '91.51%', '2016-06-16 16:31:08', 2, '数论', -0.474711850581202, 1.40719981548204),
(90, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1519', '1519', 'UVA', '3.000 seconds\\n\\t', NULL, '10578 - The Game of 31', '<iframe src="https://uva.onlinejudge.org/external/105/10578.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '54.94%', '88.17%', '2016-06-16 16:31:08', 4, '动规', -0.154428049205849, 1.31595836606581),
(91, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1520', '1520', 'UVA', '3.000 seconds\\n\\t', NULL, '10579 - Fibonacci Numbers', '<iframe src="https://uva.onlinejudge.org/external/105/10579.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '60.00%', '92.95%', '2016-06-16 16:31:08', 12, 'Floyd', 4.59531257970099, 1.7515071717697);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(92, 'http://www.lydsy.com/JudgeOnline/problem.php?id=1500', '1500', 'Hysbz', '10S', '64MB', ' [NOI2005]维修数列', '<div class="content"><p><img alt="" border="0" src="http://www.lydsy.com/JudgeOnline/images/1500_1.jpg"/></p></div>', '<div class="content"><p>输入的第1 行包含两个数N 和M(M ≤20 000)，N 表示初始时数列中数的个数，M表示要进行的操作数目。<br/>\r\n第2行包含N个数字，描述初始时的数列。<br/>\r\n以下M行，每行一条命令，格式参见问题描述中的表格。<br/>\r\n任何时刻数列中最多含有500 000个数，数列中任何一个数字均在[-1 000, 1 000]内。<br/>\r\n插入的数字总数不超过4 000 000个，输入文件大小不超过20MBytes。</p></div>', '<div class="content"><p>对于输入数据中的GET-SUM和MAX-SUM操作，向输出文件依次打印结果，每个答案（数字）占一行。</p></div>', '<div class="content"><span class="sampledata">9 8<br/>\r\n2 -6 3 5 1 -5 -3 6 3<br/>\r\nGET-SUM 5 4<br/>\r\nMAX-SUM<br/>\r\nINSERT 8 3 -5 7 2<br/>\r\nDELETE 12 1<br/>\r\nMAKE-SAME 3 3 2<br/>\r\nREVERSE 3 6<br/>\r\nGET-SUM 5 4<br/>\r\nMAX-SUM<br/>\n</span></div>', '<div class="content"><span class="sampledata">-1<br/>\r\n10<br/>\r\n1<br/>\r\n10<br/>\n</span></div>', '<div class="content"><p><p><img alt="" border="0" src="http://www.lydsy.com/JudgeOnline/images/1500_2.jpg"/></p></p></div>', '<div class="content"><p><a href="problemset.php?search="></a></p></div>', '31.57%', '84.77%', '2016-06-16 16:31:06', -1, '未分类', 2.07478459082089, -1.31083918418146),
(93, 'http://www.lydsy.com/JudgeOnline/problem.php?id=1501', '1501', 'Hysbz', '5S', '64MB', ' [NOI2005]智慧珠游戏', '<div class="content"><p><img alt="" border="0" src="http://www.lydsy.com/JudgeOnline/images/1501_1.jpg"/></p></div>', '<div class="content"><p>文件中包含初始的盘件描述，一共有10行，第i行有i个字符。如果第i行的第j个字符是字母”A”至”L”中的一个，则表示第i行第j列的格子上已经放了零件，零件的编号为对应的字母。如果第i行的第j个字符是”.”，则表示第i行第j列的格子上没有放零件。输入保证预放的零件已摆放在盘件中。</p></div>', '<div class="content"><p>如果能找到解，向输出文件打印10行，为放完全部12个零件后的布局。其中，第i行应包含i个字符，第i行的第j个字符表示第i行第j列的格子上放的是哪个零件。如果无解，输出单独的一个字符串‘No solution’(不要引号，请注意大小写)。所有的数据保证最多只有一组解。</p></div>', '<div class="content"><span class="sampledata">.<br/>\r\n..<br/>\r\n...<br/>\r\n....<br/>\r\n.....<br/>\r\n.....C<br/>\r\n...CCC.<br/>\r\nEEEHH...<br/>\r\nE.HHH....<br/>\r\nE.........<br/>\n<br/>\n</span></div>', '<div class="content"><span class="sampledata">B<br/>\r\nBK<br/>\r\nBKK<br/>\r\nBJKK<br/>\r\nJJJDD<br/>\r\nGJGDDC<br/>\r\nGGGCCCI<br/>\r\nEEEHHIIA<br/>\r\nELHHHIAAF<br/>\r\nELLLLIFFFF<br/>\n</span></div>', '<div class="content"><p></p></div>', '<div class="content"><p><a href="problemset.php?search="></a></p></div>', '63.42%', '95.31%', '2016-06-16 16:31:06', -1, '未分类', -0.930882564520164, 1.01637530947403),
(94, 'http://www.lydsy.com/JudgeOnline/problem.php?id=1502', '1502', 'Hysbz', '5S', '64MB', ' [NOI2005]月下柠檬树', '<div class="content"><p><img alt="" border="0" src="http://www.lydsy.com/JudgeOnline/images/1502_1.jpg"/></p></div>', '<div class="content"><p>文件的第1行包含一个整数n和一个实数alpha，表示柠檬树的层数和月亮的光线与地面夹角(单位为弧度)。第2行包含n+1个实数h0,h1,h2,…,hn，表示树离地的高度和每层的高度。第3行包含n个实数r1,r2,…,rn，表示柠檬树每层下底面的圆的半径。上述输入文件中的数据，同一行相邻的两个数之间用一个空格分隔。输入的所有实数的小数点后可能包含1至10位有效数字。</p></div>', '<div class="content"><p>输出1个实数，表示树影的面积。四舍五入保留两位小数。</p></div>', '<div class="content"><span class="sampledata">2 0.7853981633<br/>\r\n10.0 10.00 10.00<br/>\r\n4.00 5.00<br/>\n</span></div>', '<div class="content"><span class="sampledata">171.97<br/>\n</span></div>', '<div class="content"><p><p>1≤n≤500，0.3</p></p></div>', '<div class="content"><p><a href="problemset.php?search="></a></p></div>', '55.43%', '96.53%', '2016-06-16 16:31:06', -1, '未分类', -0.739935563778203, 0.432562317188084),
(95, 'http://www.lydsy.com/JudgeOnline/problem.php?id=1503', '1503', 'Hysbz', '5S', '64MB', ' [NOI2004]郁闷的出纳员', '<div class="content"><p>OIER公司是一家大型专业化软件公司，有着数以万计的员工。作为一名出纳员，我的任务之一便是统计每位员工的工资。这本来是一份不错的工作，但是令人郁闷的是，我们的老板反复无常，经常调整员工的工资。如果他心情好，就可能把每位员工的工资加上一个相同的量。反之，如果心情不好，就可能把他们的工资扣除一个相同的量。我真不知道除了调工资他还做什么其它事情。工资的频繁调整很让员工反感，尤其是集体扣除工资的时候，一旦某位员工发现自己的工资已经低于了合同规定的工资下界，他就会立刻气愤地离开公司，并且再也不会回来了。每位员工的工资下界都是统一规定的。每当一个人离开公司，我就要从电脑中把他的工资档案删去，同样，每当公司招聘了一位新员工，我就得为他新建一个工资档案。老板经常到我这边来询问工资情况，他并不问具体某位员工的工资情况，而是问现在工资第k多的员工拿多少工资。每当这时，我就不得不对数万个员工进行一次漫长的排序，然后告诉他答案。好了，现在你已经对我的工作了解不少了。正如你猜的那样，我想请你编一个工资统计程序。怎么样，不是很困难吧？</p></div>', '<div class="content"><p><img alt="" border="0" src="http://www.lydsy.com/JudgeOnline/images/1503_1.jpg"/></p></div>', '<div class="content"><p>输出文件的行数为F命令的条数加一。对于每条F命令，你的程序要输出一行，仅包含一个整数，为当前工资第k多的员工所拿的工资数，如果k大于目前员工的数目，则输出-1。输出文件的最后一行包含一个整数，为离开公司的员工的总数。</p></div>', '<div class="content"><span class="sampledata">9 10<br/>\r\nI 60<br/>\r\nI 70<br/>\r\nS 50<br/>\r\nF 2<br/>\r\nI 30<br/>\r\nS 15<br/>\r\nA 5<br/>\r\nF 1<br/>\r\nF 2<br/>\n<br/>\n</span></div>', '<div class="content"><span class="sampledata">10<br/>\r\n20<br/>\r\n-1<br/>\r\n2<br/>\n<br/>\n</span></div>', '<div class="content"><p><p>I命令的条数不超过100000 A命令和S命令的总条数不超过100 F命令的条数不超过100000 每次工资调整的调整量不超过1000 新员工的工资不超过100000</p></p></div>', '<div class="content"><p><a href="problemset.php?search="></a></p></div>', '35.19%', '90.85%', '2016-06-16 16:31:06', -1, '未分类', 1.58262541989443, -1.04633317265766),
(96, 'http://www.lydsy.com/JudgeOnline/problem.php?id=1504', '1504', 'Hysbz', '5S', '64MB', ' [NOI2004]Rainfall', '<div class="content">M国是个多雨的国家，尤其是P城，频繁的降雨给人们的出行带来了不少麻烦。为了方便行人雨天过马路，有关部门在每处人行横道的上空都安装了一种名为“自动伞”的装置。（如图1所示）\r\n \r\n<img border="0" src="http://www.lydsy.com/JudgeOnline/images/1504_1.jpg">\r\n\r\n图1\r\n每把自动伞都可以近似地看作一块长方形的板，厚度不计。这种伞有相当出色的吸水能力，落到上面的雨水都会完全被伞顶的小孔吸入，并通过管道运走。不下雨时，这些伞闲置着。一旦下雨，它们便立刻开始作匀速率直线往返运动：从马路的一边以固定的速率移动到另一边，再从另一边以相同的速率返回，如此往复，直到雨停为止。任何时刻自动伞都不会越过马路的边界。有了自动伞，下雨天没带伞的行人只要躲在伞下行走，就不会被雨淋着了。\r\n由于自动伞的大小有限，当需要使用自动伞过马路的人比较多时，一把自动伞显然是不够的，所以有关部门在几处主要的人行横道上空安装了多把自动伞。每把自动伞的宽度都等于人行横道的宽度，高度各不相同，长度不一定相同，移动速率也不一定相同。\r\n现在已知一处人行横道的详细情况，请你计算从开始下雨到T秒钟后的这段时间内，一共有多少体积的雨水降落到人行横道上。\r\n\r\n</img></div>', '<div class="content">第一行有四个整数N，W，T，V。N表示自动伞的数目，W表示马路的宽度，T表示需要统计从开始下雨到多长时间后的降雨情况，V表示单位面积单位时间内的降雨体积。\r\n为了描述方便，我们画出了一个如图2所示的天空中五把伞的剖面图，取马路左边界为原点，取向右为x轴正方向，取向上为y轴正方向，建立平面直角坐标系。这样，每把自动伞都可以看作平面上的一条线段。\r\n <img border="0" src="http://www.lydsy.com/JudgeOnline/images/1504_2.jpg">\r\n\r\n图2\r\n接下来的N行，每行用三个整数描述一把自动伞。第一个数x是伞的初始位置，用它左端点的横坐标表示。第二个数l是伞的长度，即x方向上的尺寸。第三个数v是伞的速度，v的大小表示移动的速率。如果v&gt;0，表示开始时伞向右移动；如果v&lt;0，表示开始时伞向左移动；如果v=0，表示伞不动。\r\n\r\n</img></div>', '<div class="content">输出文件只包含一个实数，表示从开始下雨到T秒钟后，一共有多少体积的水降落到人行横道上。输出结果精确到小数点后第二位。\r\n\r\n【约定】\r\n雨点均匀地匀速竖直下落\r\n自动伞和马路两者都是水平的\r\n自动伞的宽度和人行横道的宽度相等，都等于1\r\n所有自动伞的往返次数之和不超过250，一来一回算一个往返。\r\n\r\n</div>', '<div class="content"><span class="sampledata">2 4 3 10<br/>\r\n0 1 1<br/>\r\n3 1 -1<br/>\n<br/>\n<br/>\n</span></div>', '<div class="content"><span class="sampledata">65.00<br/>\n</span></div>', '<div class="content"><p></p></div>', '<div class="content"><p><a href="problemset.php?search="></a></p></div>', '43.66%', '92.59%', '2016-06-16 16:31:06', -1, '未分类', -0.942715899777412, -0.427447560059171),
(97, 'http://www.lydsy.com/JudgeOnline/problem.php?id=1505', '1505', 'Hysbz', '5S', '64MB', ' [NOI2004]小H的小屋', '<div class="content">小H发誓要做21世纪最伟大的数学家。他认为，做数学家与做歌星一样，第一步要作好包装，不然本事再大也推不出去。为此他决定先在自己的住所上下功夫，让人一看就知道里面住着一个“未来的大数学家”。\r\n为了描述方便，我们以向东为x轴正方向，向北为y轴正方向，建立平面直角坐标系。小H的小屋东西长为100Hil（Hil是小H自己使用的长度单位，至于怎样折合成“m”，谁也不知道）。东墙和西墙均平行于y轴，北墙和南墙分别是斜率为k1和k2的直线，k1和k2为正实数。北墙和南墙的墙角处有很多块草坪，每块草坪都是一个矩形，矩形的每条边都平行于坐标轴。相邻两块草坪的接触点恰好在墙上，接触点的横坐标被称为它所在墙的“分点”，这些分点必须是1到99的整数。\r\n小H认为，对称与不对称性的结合才能充分体现“数学美”。因此，在北墙角要有m块草坪，在南墙角要有n块草坪，并约定m≤n。如果记北墙和南墙的分点集合分别为X1，X2，则应满足X1 X2，即北墙的任何一个分点一定是南墙的分点。\r\n由于小H目前还没有丰厚的收入，他必须把草坪的造价降到最低，即草坪的占地总面积最小。你能编程帮他解决这个难题吗？\r\n\r\n</div>', '<div class="content">仅一行，包含4个数k1，k2，m，n。k1和k2为正实数，分别表示北墙和南墙的斜率，精确到小数点后第一位。m和n为正整数，分别表示北墙角和南墙角的草坪的块数。\r\n\r\n</div>', '<div class="content">一个实数，表示草坪的最小占地总面积。精确到小数点后第一位。\r\n2≤m≤n≤100\r\n南北墙距离很远，不会出现南墙草坪和北墙草坪重叠的情况\r\n</div>', '<div class="content"><span class="sampledata">0.5 0.2 2 4<br/>\n<br/>\n</span></div>', '<div class="content"><span class="sampledata">3000.0<br/>\n</span></div>', '<div class="content"><p><img border="0" src="http://www.lydsy.com/JudgeOnline/images/1505.jpg"><br/>\n</img></p></div>', '<div class="content"><p><a href="problemset.php?search="></a></p></div>', '67.79%', '94.67%', '2016-06-16 16:31:06', -1, '未分类', -0.91985604757591, 1.33568229023618),
(98, 'http://acm.timus.ru/problem.aspx?space=1&num=1500', '1500', 'Ural', '2.5s', '64MB', 'Pass Licenses', '<div class="problem_par"><div class="problem_par_normal">A New Russian Kolyan believes that to spend his time in traffic jams is below his dignity. This is why he had put an emergency flashlight upon the roof of his Hummer and had no problems until a recent decision of the city administration. Now each street of the city belongs to one or several categories, and a driver must have a separate license in order to use an emergency flashlight in the streets of each category. If a street belongs to several categories, it is sufficient to have a license only for one of these categories. For each category, a license is issued by a separate city official. Although these officials are different, they accept bribes of the same amount for giving a license. Help Kolyan to find a way from his home to work such that he can go this way with his flashlight turned on and having spent the minimal amount of money for bribes.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The input contains the street plan in the following format. There are integers <i>K</i>, <i>N</i>, and <i>M</i> in the first line, where <i>K</i> is the number of street categories (1 ≤ <i>K</i> ≤ 20), <i>N</i> is the number of crossroads (2 ≤ <i>N</i> ≤ 30), and <i>M</i> is the number of descriptions of street segments between crossroads.</div></div><div class="problem_par"><div class="problem_par_normal">Each of the next <i>M</i> lines describes a street segment by three integers <i>V<sub>1</sub></i> <i>V<sub>2</sub></i> <i>C</i>, where <i>V<sub>1</sub></i> and <i>V<sub>2</sub></i> are the numbers of the crossroads limiting this segment, and <i>C</i> is its category. Crossroads are numbered from 0 to <i>N</i> – 1, categories are numbered from 0 to <i>K</i> – 1. For any pair of crossroads no two segments of the same category connect these crossroads.</div></div>', '<div class="problem_par"><div class="problem_par_normal">Output in the first line the minimal number of licenses necessary for going from the crossroad 0 (Kolyan''s home) to the crossroad 1 (Kolyan''s work) with an emergency flashlight turned on.</div></div><div class="problem_par"><div class="problem_par_normal">In the second line, give the list of categories for which licenses must be obtained. The numbers should be separated with spaces. It is guaranteed that such list is always exist.</div></div>', '3 3 3\r\n0 2 0\r\n0 2 1\r\n1 2 2\r\n<br>', '2\r\n0 2\r\n<br>', '', 'Problem Author: Magaz Asanov, Alexander Mironenko, Anton Botov, Evgeny KrokhalevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', '15.14%', NULL, '2016-06-16 16:31:05', -1, '未分类', 1.1481104722863, -0.552178404618497),
(99, 'http://acm.timus.ru/problem.aspx?space=1&num=1501', '1501', 'Ural', '0.5s', '64MB', 'Sense of Beauty', '<div class="problem_par"><div class="problem_par_normal">The owner of a casino for New Russians has a very refined sense of beauty. For example, after a game there remain two piles with the same number of cards on the table, and the owner likes the cards to be arranged into two piles according to the color: one pile with red cards and the other with black cards. Of course, this is done not by the owner himself, but by a croupier. The owner just likes to watch the process. The croupier takes a card from the top of one of the initial piles and puts it into one of the new piles; this is repeated until all the cards from the initial piles are transferred. The owner doesn''t like it if one of the resulting piles grows faster than the other. At each moment the resulting piles must not differ in size by more than one card; a bigger difference would contradict the owner''s sense of beauty. Help the croupier to arrange the cards according to the tastes of his owner.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The first line of the input contains the number <i>N</i> of cards in each of the piles (4 ≤ <i>N</i> ≤ 1000). Each of the next two lines contains <i>N</i> digits 0 or 1 describing the piles: 1 denotes a red-suit card and 0 denotes a black-suit card. The cards in a pile \r\nare described from the top to the bottom. There are in total <i>N</i> red and <i>N</i> black cards in the two piles.</div></div>', '<div class="problem_par"><div class="problem_par_normal">Output a line containing 2<i>N</i> digits 1 or 2, which describes the process of transferring the cards. Each number shows the number of the pile from which a card is taken. If it is impossible to perform this task according to the given rules, output "Impossible".</div></div>', '4\r\n0011\r\n0110\r\n<br>4\r\n1100\r\n1100\r\n<br>', '22121112\r\n<br>Impossible\r\n<br>', '', 'Problem Author: Leonid Volkov, Stanislav VasilyevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', '32.70%', NULL, '2016-06-16 16:31:05', -1, '未分类', 0.497902357468337, 0.779890792785138),
(100, 'http://acm.timus.ru/problem.aspx?space=1&num=1502', '1502', 'Ural', '0.5s', '64MB', 'Domino Dots', '<div class="problem_par"><div class="problem_par_normal">In order to run huge capitals, New Russians need exceptional brains. Of course, \r\nwith such workload, they also need peculiar relaxation methods. In casinos there \r\nare special domino sets for New Russians. In these sets, the number of dots on each \r\nend varies not from zero to six, as in sets for ordinary people, but from zero to a \r\ncertain number that is proportional to the intellectual level of the player. To make \r\nspecial sets, the same principle as for standard domino sets is used: each bone has \r\ntwo ends; on each end there are several dots (from zero up to a given number); a set \r\ncontains bones with all possible combinations of ends; there are no two equal bones \r\n(there is no distinction with respect to left or right ends, so, for example, bones \r\n2-5 and 5-2 are considered equal). But, unlike ordinary dominoes, special bones are \r\nmarked with dots that are not just strokes of paint but real 10-carat diamonds.</div></div><div class="problem_par"><div class="problem_par_normal">How many diamonds are needed to produce one special domino set?</div></div>', '<div class="problem_par"><div class="problem_par_normal">The input contains the maximal number of dots on one end of a domino bone (1 ≤ <i>N</i> ≤ 10000).</div></div>', '<div class="problem_par"><div class="problem_par_normal">Output the number of diamonds used for producing the domino set.</div></div>', '2<br>', '12<br>', '', 'Problem Author: Folklore. Adapted by Stanislav VasilyevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', '43.34%', NULL, '2016-06-16 16:31:06', -1, '未分类', 2.68401394829208, 1.58702155932128),
(101, 'http://acm.timus.ru/problem.aspx?space=1&num=1503', '1503', 'Ural', '1s', '64MB', 'Polynomial', '<div class="problem_par"><div class="problem_par_normal">Every New Russian wants to give his children all the best. The best education, \r\nin particular. For example, Kolyan has asked the math teacher to teach his son \r\nto solve not only quadratic equations, but also cubic ones, and quaternary ones, \r\nand altogether all the equations there are. The teacher knows that equations of \r\ndegrees higher than five cannot be solved in radicals in the general form. But to \r\nsolve equations up to the fifth degree is also very hard. It is better to check solutions using a computer. Here your help is needed.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The first line contains the degree of a polynomial <i>N</i> (1 ≤ <i>N</i> ≤ 5). In the next <i>N</i> + 1 lines there are integers (-100 ≤ <i>a<sub>i</sub></i> ≤ 100, <i>a<sub>0</sub></i> ≠ 0). The <i>i</i>+2<sup>nd</sup> line contains the <i>i</i><sup>th</sup> coefficient of the polynomial <i>a<sub>0</sub>x<sup>n</sup> + a<sub>1</sub>x<sup>n–1</sup> + … + a<sub>n</sub></i>.</div></div>', '<div class="problem_par"><div class="problem_par_normal">Output all real roots of the polynomial taking into account their multiplicity. The\r\nroots must be given in the ascending order. The accuracy must be not less than 10<sup>–6</sup>.</div></div>', '2\r\n1\r\n-2\r\n1<br>', '1\r\n1<br>', '', 'Problem Author: Den RaskovalovProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', '6.95%', NULL, '2016-06-16 16:31:06', -1, '未分类', 0.825250575420867, -1.17345669201803),
(102, 'http://acm.timus.ru/problem.aspx?space=1&num=1504', '1504', 'Ural', '1.5s', '64MB', 'Good Manners', '<div class="problem_par"><div class="problem_par_normal">Although Vovan is a New Russian, he tries to learn good manners. His new image-maker teaches Vovan that a well-bred person would choose from several cake pieces on a table either the smallest or the nearest one. Vovan wants to appear a well-bred person at his oncoming birthday, but he also wants to get a big piece of cake. Fortunately, as a host, Vovan can himself seat his guests at his big round table. Help Vovan to choose a place at the table such that the piece of cake nearest to him is as big as possible.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The first line contains two integers that are the radius of the table <i>R</i> in meters and the number <i>K</i> of cake pieces on the table (1 ≤ <i>R</i> ≤ 100, 2 ≤ <i>K</i> ≤ 1000). Each of the next <i>K</i> lines contains three numbers describing a piece of cake: its coordinates in meters and weight in grams (an integer from 1 to 10000). The center of the table is the coordinate origin. All the pieces have distinct coordinates and lie on a table.</div></div>', '<div class="problem_par"><div class="problem_par_normal">Output the coordinates of a place at the table (a point on the table''s circumference) such that in this place Vovan would get the biggest possible piece, at the same time looking as a well-bred person (if there are several pieces nearest to this point, then Vovan can take the biggest of them). Coordinates should be precise up to 7 digits.</div></div>', '10 3\r\n1 -1 100\r\n2 2 200\r\n-2.5 -2.56 1\r\n<br>', '6 8\r\n<br>', '', 'Problem Author: Stanislav VasilyevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', '7.76%', NULL, '2016-06-16 16:31:06', -1, '未分类', 0.319267178201738, -1.11201158667082),
(103, 'http://acm.timus.ru/problem.aspx?space=1&num=1505', '1505', 'Ural', '2s', '64MB', 'Oil Transfer', '<div class="problem_par"><div class="problem_par_normal">A New Russian Kolyan wants an oil delivery to foreign partners to become his main source of income. His company owns a number of pumping stations with network of pipelines connecting them. First, Kolyan wants to increase the amount of the transferred oil by 1 million barrels per day. Help Kolyan to achieve this goal spending the minimal amount of money.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The first line contains an integer <i>N</i>, which is the number of pumping stations between which there are pipelines (1 ≤ <i>N</i> ≤ 10000). The stations are numbered from 1 to <i>N</i>. The next <i>N</i> lines describe the stations.</div></div><div class="problem_par"><div class="problem_par_normal">The <i>i<sup>th</sup></i> line contains quadruples of integers <i>a</i> <i>b</i> <i>c</i> <i>d</i> (1 ≤ <i>a</i> ≤ <i>N</i>; 0 ≤ <i>c</i> ≤ <i>b</i> ≤ 10000;\r\n0 ≤ <i>d</i> ≤ 10<sup>6</sup>), where<br>\n<i>a</i> is the number of a station to which a pipeline from the station <i>i</i> exists,<br>\n<i>b</i> is the flow capacity of the pipeline from <i>i</i> to <i>a</i> in millions of barrels per day,<br>\n<i>c</i> is the present oil flow from <i>i</i> to <i>a</i> in millions of barrels per day,<br>\n<i>d</i> is the amount of money (in roubles) necessary for the increase in the flow capacity of the pipeline from <i>i</i> to <i>a</i> by 1 million barrels per day.\r\nThere can be at most 1 pipeline from station <i>i</i> to station <i>a</i> and no pipeline connects a station with itself.</br></br></br></br></div></div><div class="problem_par"><div class="problem_par_normal">These quadruples in the line are separated with commas, and there is a period after the last quadruple. If oil is not transported anywhere from the <i>i<sup>th</sup></i> station, then the corresponding line contains only one symbol ".". It is guaranteed that there are no more than 100000 quadruples describing pipelines in the input.</div></div><div class="problem_par"><div class="problem_par_normal">Oil is transferred to foreign partners at only one pumping station with the number <i>N</i>. The cross-border oil flow is equal to the incoming flow at this station. From this station, oil is not transported to other pumping stations in the described pipeline network. Pumping stations with numbers less than <i>N</i> are transit stations. It is known that for each transit station the incoming oil flow is not more than the outgoing flow. If the incoming flow is less than the outgoing flow, then there is an oil-producing well nearby, whose oil production can easily be increased by 1 million barrels per day. </div></div>', '<div class="problem_par"><div class="problem_par_normal">In the first line output the minimal cost <i>K</i> of reconstructing the pipeline network in such a way that the oil transfer to foreign partners is increased by 1 million barrels per day. Then output <i>N</i> lines describing the oil flow in the pipelines after the reconstruction, in the following format: the <i>i<sup>th</sup></i> of these lines must contain a list of pairs <i>a b</i> separated with commas; <i>a</i> is the number of a station to which oil is transported from the station <i>i</i>, and <i>b</i> is the number of the transported oil in millions of barrels per day. Each of these lines must end with a period.</div></div><div class="problem_par"><div class="problem_par_normal">If it''s impossible to reach Kolyan''s goal then output single word "Impossible".</div></div>', '4\r\n2 1 1 1, 3 1 1 3.\r\n3 1 0 2, 4 1 1 2.\r\n4 1 1 1.\r\n.\r\n<br>', '2\r\n2 2, 3 1.\r\n3 1, 4 1.\r\n4 2.\r\n.\r\n<br>', '', 'Problem Author: Magaz Asanov, Evgeny KrokhalevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', '7.59%', NULL, '2016-06-16 16:31:06', -1, '未分类', -0.314483759296852, -1.12490747297826),
(104, 'http://poj.org/problem?id=1500', '1500', 'Poj', ' 1000MS', ' 10000K', 'Polygonal Puzzle', '<div class="ptx" lang="en-US">To help model the three dimensional volumes that describe each supercomputer choice over time, Valentine McKee and Jake Briggs decided to construct some cardboard mock-ups. Valentine began by cutting out polygons of each of the supercomputer criteria for each year. As she was bringing the cut-outs to Jake''s lab, where they intended to turn the flat polygons into the actual volumes, Valentine bumped into Ren McCormack. Literally. And she dropped all of her polygon cut-outs onto the ground. \r<br>``Ren! Why don''t you look where you''re going,'''' Valentine sighed. ``I dropped all of my polygons. Now I''m going to have to start all over cutting these out.'''' Valentine had labeled the polygons prior to cutting them out, but unfortunately, the labeling was not part of the actual polygon and was lost when they were cut out. ``I don''t know which is which now.'''' \r<br> <br>``Sorry.'''' Ren looked downcast, then brightened. ``Hey, do you want to go to the dance with me this weekend?'''' \r<br> <br>``I don''t think so, Ren,'''' replied Valentine, ``I think I''ll be cutting out and sorting polygons all weekend.'''' Valentine stooped and began picking up the cut-outs. Ren was a great dancer but he also tended to show it off. The one time that Valentine had gone to a dance with him, Ren had completely embarrassed her with his antics. \r<br> <br>``Can''t you use a computer or something to help you sort those things out?'''' Ren picked up one of the polygons and squinted at it. (Ren was a theater major.) \r<br> <br>Valentine thought for a moment. ``Nope,'''' she said. ``I''m just going to have to start over. Have fun at the dance this weekend, though.'''' To herself, she thought, ``Yes, I can use a computer. The only other thing I need is that camera that Jake already has in the lab to help me see the Big Picture.'''' \r<br/></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of input will consist of two integers separated by a space. The first integer specifies the number of polygons to be sorted. The second integer specifies the number of vertices for each polygon. \r<br> <br>The rest of the input will consist of two lists of coordinates. The first is a list of coordinates describing the shape of each polygon in terms of the values on each of its axes (i.e., the values for r1 through r6 in the figure below). \r<br><center><img src="http://poj.org/images/1500_1.jpg"/></center> <br>The vertices of each polygon are distributed at equal angles around the origin, with the first vertex aligned at 12 o''clock. The vertices are given in clockwise order. The polygons in this list are unique with respect to rotation and dilation. That is, no polygon will be exactly like any other polygon (having the same vertices in the same locations), nor can any polygon be rotated about its center and/or uniformly scaled such that it will be exactly like another polygon in the list. \r<br> <br>The second list of polygon coordinates corresponds to the polygons in the first list, but as measured by a camera. The vertices of each polygon in this case will be given as (x, y) pairs with respect to the camera''s viewpoint origin and are given in clockwise order. The first vertex given is arbitrary, however. \r<br><center><img src="http://poj.org/images/1500_2.jpg"/></center> <br>Note that the camera''s view of each polygon may include magnification or de-magnification (which may be different for each viewed polygon). Moreover, the camera can only resolve the polygon vertices to within plus or minus one pixel in its field of view, so there may be some jitter associated with the viewed vertex locations. For each polygon, the maximum amount of jitter at each vertex is guaranteed to be less than one percent of the distance from the origin to the vertex farthest away from the origin. \r<br> <br>All of the polygons viewed by the camera will be right-side up. \r<br> <br/></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The output is a list of instructions indicating how to rearrange the scrambled polygons. That is, for each polygon in the second list, the output should indicate the polygon to which it corresponds in the first list, the amount by which it must be rotated in a clockwise direction to align the vertices. Thus, one line of output consists of an integer index i (indexing starts from 1), a floating point angle (with ) given to the nearest tenth of a degree. </div>', '<pre class="sio">2 4\r\n1 1 2 1\r\n1 1 1 1\r\n1 3 2 3 2 2 1 2\r\n2.5 3.5 2 2 1 2 1 3</pre>', '<pre class="sio">2 45.0\r\n1 135.0</pre>', '', 'East Central North America 1996', '20.73%', '36.23%', '2016-06-16 16:31:04', 19, '二叉树', -0.995565011909419, -1.43117813572903),
(105, 'http://poj.org/problem?id=1501', '1501', 'Poj', ' 1000MS', ' 10000K', 'Word-Search Wonder', '<div class="ptx" lang="en-US">The Pyrates Restaurant was starting to fill up as Valentine McKee walked in. She scanned the crowd for her sister, brother-in-law, and nephew. Seeing her sister waving from the far end of the restaurant, she made her way back to their booth. ``Hi, Valentine,'''' her sister and brother-in-law, Niki and Dennis Chapman, greeted her. \r<br>``Hi, guys,'''' she replied. ``What are you doing, Wade?'''' she asked her nephew. He was busy working on one of the restaurant''s activity sheets with a crayon. \r<br> <br>``I''m doing a word search game,'''' Wade explained. ``I have to find all of these words in this big mess of letters. This is really hard.'''' Wade looked intently at the paper in front of him. \r<br> <br>``Can I help?'''' asked Valentine, looking across the table at the activity sheet. \r<br> <br>``Sure. These are the words we''re looking for. They''re the names of different kinds of Planes, Trains, and Automobiles.'''' \r<br/></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of input will specify the length (in characters) of the sides of the letter matrix (the matrix of letters will be square). The length, l, will be in the range 1 &lt;= l &lt;= 100. The next l lines of input will be the matrix itself, each line will contain l uppercase letters. \r<br> <br>A list of words will follow. Each word will be on a line by itself; there will be 100 or fewer words. Each word will be 100 or fewer characters long, and will only contain uppercase letters. \r<br> <br>The final line of input will contain a single zero character. \r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program should attempt to find each word from the word list in the puzzle. A word is ``found'''' if all the characters in the word can be traced in a single (unidirectional) horizontal, vertical, or diagonal line in the letter matrix. Words may not ``wrap around'''' rows or columns, but horizontal and diagonal words may proceed from right to left (``backwards''''). For each word that is found, your program should print the coordinates of its first and last letters in the matrix on a single line, separated by a single space. Coordinates are pairs of comma-separated integers (indexed from 1), where the first integer specifies the row number and the second integer specifies the column number. \r<br> <br>If a word is not found, the string ``Not found'''' should be output instead of a pair of coordinates. \r<br> <br>Each word from the input can be ``found'''' at most once in the puzzle. \r<br/></br></br></br></br></div>', '<pre class="sio">5\r\nEDEEE\r\nDISKE\r\nESEEE\r\nECEEE\r\nEEEEE\r\nDISC\r\nDISK\r\nDISP\r\n0</pre>', '<pre class="sio">1,2 4,2\r\n2,1 2,4\r\nNot found</pre>', '', 'East Central North America 1996', '37.74%', '83.51%', '2016-06-16 16:31:04', 17, '树的DFS', -0.964168541341339, -0.0184641141259722),
(106, 'http://poj.org/problem?id=1502', '1502', 'Poj', ' 1000MS', ' 10000K', 'MPI Maelstrom', '<div class="ptx" lang="en-US">BIT has recently taken delivery of their new supercomputer, a 32 processor Apollo Odyssey distributed shared memory machine with a hierarchical communication subsystem. Valentine McKee''s research advisor, Jack Swigert, has asked her to benchmark the new system. \r<br>``Since the Apollo is a distributed shared memory machine, memory access and communication times are not uniform,'''' Valentine told Swigert. ``Communication is fast between processors that share the same memory subsystem, but it is slower between processors that are not on the same subsystem. Communication between the Apollo and machines in our lab is slower yet.'''' \r<br> <br>``How is Apollo''s port of the Message Passing Interface (MPI) working out?'''' Swigert asked. \r<br> <br>``Not so well,'''' Valentine replied. ``To do a broadcast of a message from one processor to all the other n-1 processors, they just do a sequence of n-1 sends. That really serializes things and kills the performance.'''' \r<br> <br>``Is there anything you can do to fix that?'''' \r<br> <br>``Yes,'''' smiled Valentine. ``There is. Once the first processor has sent the message to another, those two can then send messages to two other hosts at the same time. Then there will be four hosts that can send, and so on.'''' \r<br> <br>``Ah, so you can do the broadcast as a binary tree!'''' \r<br> <br>``Not really a binary tree -- there are some particular features of our network that we should exploit. The interface cards we have allow each processor to simultaneously send messages to any number of the other processors connected to it. However, the messages don''t necessarily arrive at the destinations at the same time -- there is a communication cost involved. In general, we need to take into account the communication costs for each link in our network topologies and plan accordingly to minimize the total time required to do a broadcast.'''' </br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input will describe the topology of a network connecting n processors. The first line of the input will be n, the number of processors, such that 1 &lt;= n &lt;= 100. \r<br> <br>The rest of the input defines an adjacency matrix, A. The adjacency matrix is square and of size n x n. Each of its entries will be either an integer or the character x. The value of A(i,j) indicates the expense of sending a message directly from node i to node j. A value of x for A(i,j) indicates that a message cannot be sent directly from node i to node j. \r<br> <br>Note that for a node to send a message to itself does not require network communication, so A(i,i) = 0 for 1 &lt;= i &lt;= n. Also, you may assume that the network is undirected (messages can go in either direction with equal overhead), so that A(i,j) = A(j,i). Thus only the entries on the (strictly) lower triangular portion of A will be supplied. \r<br> <br>The input to your program will be the lower triangular section of A. That is, the second line of input will contain one entry, A(2,1). The next line will contain two entries, A(3,1) and A(3,2), and so on. </br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program should output the minimum communication time required to broadcast a message from the first processor to all the other processors. </div>', '<pre class="sio">5\r\n50\r\n30 5\r\n100 20 50\r\n10 x x 10</pre>', '<pre class="sio">35</pre>', '', 'East Central North America 1996', '61.37%', '96.50%', '2016-06-16 16:31:04', 6, '最短路', -0.784335182790326, 1.94405395350956),
(107, 'http://poj.org/problem?id=1503', '1503', 'Poj', ' 1000MS', ' 10000K', 'Integer Inquiry', '<div class="ptx" lang="en-US">One of the first users of BIT''s new supercomputer was Chip Diller. He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers. \r<br>``This supercomputer is great,'''' remarked Chip. ``I only wish Timothy were here to see these results.'''' (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.) \r<br/></br></div>', '<div class="ptx" lang="en-US">The input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative). \r<br> <br>The final input line will contain a single zero on a line by itself. \r<br/></br></br></div>', '<div class="ptx" lang="en-US">Your program should output the sum of the VeryLongIntegers given in the input. </div>', '<pre class="sio">123456789012345678901234567890\r\n123456789012345678901234567890\r\n123456789012345678901234567890\r\n0</pre>', '<pre class="sio">370370367037037036703703703670</pre>', '', 'East Central North America 1996', '39.12%', '92.80%', '2016-06-16 16:31:04', -1, '未分类', -0.114462682840379, 0.0961476054397079),
(108, 'http://acm.hust.edu.cn/problem/show/1500', '1500', 'Hust', '2s', '256MB', 'Nice Prefixes', 'Consider strings formed from characters from an alphabet of size <i>K</i>. For example, if <i>K = 4</i>, our alphabet might be <i>{a,b,c,d}</i>, and an example string is <i><span data-scayt_word="bbcac" data-scaytid="1">bbcac</span></i>.\r\n<p>For a string <i>S</i>, define <i>count(S, k)</i> to be the number of occurrences of the symbol <i>k</i> in <i>S</i>. For example, <i>count(<span data-scayt_word="bbcac" data-scaytid="2">bbcac</span>, b) = 2</i> and <i>count(<span data-scayt_word="bbcac" data-scaytid="3">bbcac</span>, a) = 1</i>.</p>\n<p>A prefix of a string <i>S</i> is any string obtained from <i>S</i> by deleting some (possibly none) of the trailing characters of <i>S</i>. For example, the prefixes of <i><span data-scayt_word="acb" data-scaytid="5">acb</span></i> are the empty string, <i>a</i>, <i>ac</i>, and <i><span data-scayt_word="acb" data-scaytid="6">acb</span></i>.</p>\n<p>A string <i>S</i> has "nice prefixes" if for every prefix <i>P</i> of <i>S</i> and for every two characters <i><span data-scayt_word="k1" data-scaytid="7">k1</span></i> and <i><span data-scayt_word="k2" data-scaytid="9">k2</span></i> in the alphabet, <i>|count(P, <span data-scayt_word="k1" data-scaytid="8">k1</span>) - count(P, <span data-scayt_word="k2" data-scaytid="10">k2</span>)| &lt;= 2</i>. For example, <i><span data-scayt_word="bbcac" data-scaytid="4">bbcac</span></i> has nice prefixes, but <i><span data-scayt_word="abbbc" data-scaytid="11">abbbc</span></i> does not because <i>count(<span data-scayt_word="abbb" data-scaytid="12">abbb</span>, b) = 3</i> and <i>count(<span data-scayt_word="abbb" data-scaytid="13">abbb</span>, c) = 0</i>.</p>\n<p>Count the number of strings of length <i>L</i> on an alphabet of size <i>K</i> that have nice prefixes. This number can be large, so print its remainder when divided by 1000000007.</p>\n', '<dd>The input is a single line containing the two integers <i>L</i> and <i>K</i>, separated by spaces, with 1 &lt;= <i>L</i> &lt;= 10<sup>18</sup> and 1 &lt;= <i>K</i> &lt;= 50.</dd>', '<dd>Output a single line containing the number of strings of length <i>L</i> on an alphabet of size <i>K</i> that have nice prefixes, modulo 1000000007.</dd>', '<dd>\n<pre>4 2</pre>\n</dd>', '<dd>\n<pre>12</pre>\n</dd>', '<dd></dd>', '<dd>waterloo 13 June, 2009</dd>', '19.23%', '66.67%', '2016-06-16 16:31:06', -1, '未分类', -0.287961911419449, -0.325298699051597),
(109, 'http://acm.hust.edu.cn/problem/show/1501', '1501', 'Hust', '5s', '256MB', 'Convex Hull', '<img align="right" src="http://acm.hust.edu.cn/image/p1501.png"/>Finding the convex hull of a set of points is an important problem that is often part of a larger problem. There are many algorithms for finding the convex hull. Since problems involving the convex hull sometimes appear in the ACM World Finals, it is a good idea for contestants to know some of these algorithms.<br/>\n<br/>\r\nFinding the convex hull of a set of points in the plane can be divided into two sub-tasks. First, given a set of points, find a subset of those points that, when joined with line segments, form a convex polygon that encloses all of the original points. Second, output the points of the convex hull in order, walking counter-clockwise around the polygon. In this problem, the first sub-task has already been done for you, and your program should complete the second sub-task. That is, given the points that are known to lie on the convex hull, output them in order walking counter-clockwise around the hull.', '<dd>The first line of input contains a single integer 3 &lt;= <i>n</i> &lt;= 100000, the number of points. The following <i>n</i> lines of input each describe a point. Each of these lines contains two integers and either a <tt>Y</tt> or an <tt>N</tt>, separated by spaces. The two integers specify the x- and y-coordinates of the point. A <tt>Y</tt> indicates that the point is on the convex hull of all the points, and a <tt>N</tt> indicates that it is not. The x- and y-coordinates of each point will be no less than -1000000000 and no greater than 1000000000. No point will appear more than once in the input. The points in the input will never all lie on a line.</dd>', '<dd>First, output a line containing a single integer <i>m</i>, the number of points on the convex hull. Next output <i>m</i> lines, each describing a point on the convex hull, in counter-clockwise order around the hull. Each of these lines should contain the x-coordinate of the point, followed by a space, followed by the y-coordinate of the point. Start with the point on the hull whose x-coordinate is minimal. If there are multiple such points, start with the one whose y-coordinate is minimal.</dd>', '<dd>\n<pre>5\r\n1 1 Y\r\n1 -1 Y\r\n0 0 N\r\n-1 -1 Y\r\n-1 1 Y</pre>\n</dd>', '<dd>\n<pre>4\r\n-1 -1\r\n1 -1\r\n1 1\r\n-1 1</pre>\n</dd>', '<dd></dd>', '<dd>waterloo 13 June, 2009</dd>', '0.00%', '0.00%', '2016-06-16 16:31:06', -1, '未分类', -0.890455678679915, -0.91804923437335),
(110, 'http://acm.hust.edu.cn/problem/show/1502', '1502', 'Hust', '5s', '256MB', 'Slalom', '<img align="right" src="http://acm.hust.edu.cn/image/p1502.png"/>You are competing in a ski slalom, and you need to select the best skis for the race. The format of the race is that there are <i>N</i> pairs of left and right gates, where each right gate is <i>W</i> <span data-scayt_word="metres" data-scaytid="2">metres</span> to the right of its corresponding left gate, and you may neither pass to the left of the left gate nor to the right of the right gate. The <i>i</i><sup><span data-scayt_word="th" data-scaytid="5">th</span></sup> pair of gates occurs at distance <i>y<sub>i</sub></i> down the hill, with the horizontal position of the <i>i</i><sup><span data-scayt_word="th" data-scaytid="6">th</span></sup> left gate given by <i>x<sub>i</sub></i>. Each gate is further down the hill than the previous gate (<span data-scayt_word="i.e" data-scaytid="1">i.e</span>. <i>y<sub>i</sub></i> < <i>y<sub>i+1</sub></i> for all <i>i</i>).<br/>\n<br/>\r\nYou may select from <i>S</i> pairs of skis, where the <i>j</i><sup><span data-scayt_word="th" data-scaytid="7">th</span></sup> pair has speed <i>s<sub>j</sub></i>. Your movement is governed by the following rule: if you select a pair of skis with speed <i>s<sub>j</sub></i>, you move with a constant downward velocity of <i>s<sub>j</sub></i> <span data-scayt_word="metres" data-scaytid="3">metres</span> per second. Additionally, at any time you may move at a horizontal speed of at most <i>v<sub>h</sub></i> <span data-scayt_word="metres" data-scaytid="4">metres</span> per second.<br/>\n<br/>\r\nYou may start and finish at any two horizontal positions. Determine which pair of skis will allow you to get through the race course, passing through all the gates, in the shortest amount of time.', '<dd>The first line of input contains the three integers <i>W</i>, <i>v<sub>h</sub></i>, and <i>N</i>, separated by spaces, with 1 &lt;= <i>W</i> &lt;= 10<sup>8</sup>, 1 &lt;= <i>v<sub>h</sub></i> &lt;= 10<sup>6</sup>, and 1 &lt;= <i>N</i> &lt;= 10<sup>5</sup>.<br/>\r\nThe following <i>N</i> lines of input each contain two integers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i>, the horizontal and vertical positions respectively of the <i>i</i><sup><span data-scayt_word="th" data-scaytid="8">th</span></sup> left gate, with 1 &lt;= <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &lt;= 10<sup>8</sup>.<br/>\r\nThe next line of input contains an integer <i>S</i>, the number of skis, with 1 &lt;= <i>S</i> &lt;= 10<sup>6</sup>.<br/>\r\nThe following <i>S</i> lines of input each contain one integer <i>s<sub>j</sub></i>, the speed of the <i>j</i><sup><span data-scayt_word="th" data-scaytid="9">th</span></sup> pair of skis, with 1 &lt;= <i>s<sub>j</sub></i> &lt;= 10<sup>6</sup>.</dd>', '<dd>If it is impossible to complete the race with any pair of skis, print the line <tt>IMPOSSIBLE</tt>. Otherwise, print the vertical speed <i>s<sub>j</sub></i> of the pair of skis that allows you to get through the race course in the shortest time.</dd>', '<dd>\n<pre>Case #1:\r\n3 2 3\r\n1 1\r\n5 2\r\n1 3\r\n3\r\n3\r\n2\r\n1\r\n\r\nCase #2:\r\n3 2 3\r\n1 1\r\n5 2\r\n1 3\r\n1\r\n3</pre>\n</dd>', '<dd>\n<pre>Case #1:\r\n2\r\n\r\nCase #2:\r\nIMPOSSIBLE</pre>\n</dd>', '<dd></dd>', '<dd>waterloo 13 June, 2009</dd>', '12.50%', '16.67%', '2016-06-16 16:31:06', -1, '未分类', -0.78091135735983, -0.532745974283807);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(111, 'http://acm.hust.edu.cn/problem/show/1503', '1503', 'Hust', '5s', '128MB', 'Snowflakes', '<img align="right" src="http://acm.hust.edu.cn/image/p1503.jpg"/>Emily the entrepreneur has a cool business idea: packaging and selling snowflakes. She has devised a machine that captures snowflakes as they fall, and serializes them into a stream of snowflakes that flow, one by one, into a package. Once the package is full, it is closed and shipped to be sold.<br/>\n<br/>\r\nThe marketing motto for the company is "bags of uniqueness." To live up to the motto, every snowflake in a package must be different from the others. Unfortunately, this is easier said than done, because in reality, many of the snowflakes flowing through the machine are identical. Emily would like to know the size of the largest possible package of unique snowflakes that can be created. The machine can start filling the package at any time, but once it starts, all snowflakes flowing from the machine must go into the package until the package is completed and sealed.', '<dd>The first line of input contains one integer specifying the number of test cases to follow. Each test case begins with a line containing an integer <i>n</i>, the number of snowflakes processed by the machine. The following <i>n</i> lines each contain an integer (in the range 0 to 10^9, inclusive) uniquely identifying a snowflake. Two snowflakes are identified by the same integer if and only if they are identical. The input will contain no more than one million total snowflakes.</dd>', '<dd>For each test case output a line containing single integer, the maximum number of unique snowflakes that can be in a package.</dd>', '<dd>\n<pre>1\r\n5\r\n1\r\n2\r\n3\r\n2\r\n1</pre>\n</dd>', '<dd>\n<pre>3</pre>\n</dd>', '<dd></dd>', '<dd>waterloo 8 February, 2009</dd>', '100.00%', '100.00%', '2016-06-16 16:31:06', -1, '未分类', -0.917841759009936, 2.16437684634299),
(112, 'http://acm.hust.edu.cn/problem/show/1504', '1504', 'Hust', '5s', '128MB', 'Ocean Currents', '<img align="right" src="http://acm.hust.edu.cn/image/p1504.jpg"/>For a boat on a large body of water, strong currents can be dangerous, but with careful planning, they can be harnessed to help the boat reach its destination. Your job is to help in that planning.\r\n<p>At each location, the current flows in some direction. The captain can choose to either go with the flow of the current, using no energy, or to move one square in any other direction, at the cost of one energy unit. The boat always moves in one of the following eight directions: north, south, east, west, northeast, northwest, southeast, southwest. The boat cannot leave the boundary of the lake. You are to help him devise a strategy to reach the destination with the minimum energy consumption.</p>\n', '<dd><p>The lake is represented as a rectangular grid. The first line of input contains two integers <i>r</i> and <i>c</i>, the number of rows and columns in the grid. The grid has no more than 1000 rows and no more than 1000 columns. Each of the following <i>r</i> lines contains exactly <i>c</i> characters, each a digit from 0 to 7 inclusive. The character 0 means the current flows north (<span data-scayt_word="i.e" data-scaytid="1">i.e</span>. up in the grid, in the direction of decreasing row number), 1 means it flows northeast, 2 means east (<span data-scayt_word="i.e" data-scaytid="2">i.e</span>. in the direction of increasing column number), 3 means southeast, and so on in a clockwise manner:</p>\n<pre>\r\n7 0 1\r\n \\|/\r\n6-*-2\r\n /|\\\r\n5 4 3\r\n</pre>\r\nThe line after the grid contains a single integer <i>n</i>, the number of trips to be made, which is at most 50. Each of the following <i>n</i> lines describes a trip using four integers <i><span data-scayt_word="rs" data-scaytid="3">rs</span></i>, <i>cs</i>, <i>rd</i>, <i>cd</i>, giving the row and column of the starting point and the destination of the trip. Rows and columns are numbered starting with 1.</dd>', '<dd>For each trip, output a line containing a single integer, the minimum number of energy units needed to get from the starting point to the destination.</dd>', '<dd>\n<pre>5 5\r\n04125\r\n03355\r\n64734\r\n72377\r\n02062\r\n3\r\n4 2 4 2\r\n4 5 1 4\r\n5 3 3 4</pre>\n</dd>', '<dd>\n<pre>0\r\n2\r\n1</pre>\n</dd>', '<dd></dd>', '<dd>waterloo 8 February, 2009</dd>', '25.49%', '77.78%', '2016-06-16 16:31:06', -1, '未分类', 0.396690096831082, -0.132338826398754),
(113, 'http://acm.hust.edu.cn/problem/show/1505', '1505', 'Hust', '5s', '128MB', 'Colliding Traffic', 'For a boat on a small, constrained body of water, other traffic can be a major hazard. The more traffic there is in the same area, the higher the risk of a collision.<br/>\n<br/>\r\nYour job is to monitor traffic and help detect likely collisions before they occur. You have sensors to detect the position, direction, and speed of each boat. Assuming the direction and speed remain constant, your task is to determine whether any of the boats will collide. Two boats are considered to collide if they come within a given distance of each other.', '<dd>The first line of input contains a single integer <i>c</i>, the number of test cases to follow. Each test case starts with a line containing two numbers, <i>n</i>, the number of boats, and <i>r</i>, the collision distance. Two boats are considered to collide if they come within <i>r</i> <span data-scayt_word="metres" data-scaytid="1">metres</span> of each other. There will be no more than 1000 boats. Each boat is identified by a line containing four numbers <i>x</i>, <i>y</i>, <i>d</i>, <i>s</i>. The numbers <i>x</i> and <i>y</i> give the current position of the boat as a distance east and north, respectively, from a common origin, and will be between -1000 and 1000, inclusive. The lake is small enough that we can model it as a flat surface. The number <i>d </i>gives the direction in which the boat is heading in degrees clockwise from north (so east is 90 degrees). The number <i>s</i> gives the speed of the boat in <span data-scayt_word="metres" data-scaytid="2">metres</span> per second, and will be between 0.001 and 1000. Note that <i>r</i>, <i>x</i>, <i>y</i>, <i>d</i>, and <i>s</i> are not necessarily integers. The input data will be such that the answer will not change if any of the numbers <i>x</i>, <i>y</i>, <i>d</i> and <i>s</i> are changed by 10^-6 or less.</dd>', '<dd>For each test case, output a line containing a single integer, the number of seconds, rounded to the nearest second, before any of the boats come within <i>r</i> <span data-scayt_word="metres" data-scaytid="3">metres</span> of each other. If none of the boats ever collide, output the line:\r\n<pre>\r\nNo collision.</pre>\n<br/>\n</dd>', '<dd>\n<pre>2\r\n2 5\r\n0 0 90 1\r\n10 10 180 1\r\n2 10\r\n0 0 0 0\r\n8 8 270 1</pre>\n</dd>', '<dd>\n<pre>6\r\n2</pre>\n</dd>', '<dd></dd>', '<dd>waterloo 8 February, 2009</dd>', '21.48%', '75.00%', '2016-06-16 16:31:06', -1, '未分类', 2.69712084455286, -0.255944112235479),
(114, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1500', '1500', 'UVALive', '3.000 seconds\\n\\t', NULL, '3499 - No Fold\\''em Hold\\''em', '<P>\nThe recent Texas Hold''em craze has spawned a bunch of on-line Poker sites. These sites tend to breed a group of poor players whose primary strategy is to never fold or throw away a hand. These players will always play and bet on every card on every hand  no matter what the cost or what cards they have. You have decided to take advantage of these stupid players by developing your own poker site that allows you to always beat these players. \n\n<P>\n\n<P>\n<BR>\nThe way your site will work is: there are only two players in each game: you and your opponent (this is called a <SPAN  CLASS="textit">heads-up</SPAN> game). Each of the two players will get two ``hole cards"; these cards are dealt face down so, presumably, only the player can see them. Four of the five community cards (cards shared by both players) will be dealt face up on the table. We will dispense with any betting for the purpose of this problem: it is irrelevant since each player will always call every bet right to the ``river" (the fifth and final community card). You will always be seated at position 1, and your opponent at position 2. The program knows what seat you are sitting at and the hole cards for both players, therefore, it can compute all the cards that remain in the deck that will <SPAN  CLASS="textit">maximize</SPAN> the amount of money you would get playing the hand folding is <SPAN  CLASS="textit">not</SPAN> an option. In the event there is no card that would allow you to win or tie the hand, you will be forced to take a loss on that hand (after all, it looks good if you lose <SPAN  CLASS="textit">sometimes</SPAN>).', '<P>\nThe first line of input contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN>\n<tex2html_verbatim_mark> which is the number of data sets that follow <!-- MATH\n $(1 \\le N \\le 100)$\n -->\n<SPAN CLASS="MATH">(1<IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/34/3499img1.png"\n ALT="$ \\le$"><I>N</I><IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/34/3499img1.png"\n ALT="$ \\le$">100)</SPAN>\n<tex2html_verbatim_mark>. Each data set consists of three lines. The first line of each dataset specifies your two hole cards. The second line is your opponent''s hole cards. The third line is the four community cards. A card is specified by two characters: it''s rank (A,2,3,4,5,6,7,8,9,T,J,Q,K) and it''s suit (S,D,H,C) for Spades, Diamonds, Hearts, and Clubs respectively. For example, the <SPAN  CLASS="textit">Ace of Hearts</SPAN> would be <TT>AH</TT>, the <SPAN  CLASS="textit">Nine of Spades</SPAN> would be <TT>9S</TT>. Within a line, there are no spaces or invalid characters. All input will be valid.', '<P>\nFor each data set, your program will output (on a new line) the data set number followed by a colon, followed by a space, and a list of card(s) that will <SPAN  CLASS="textit">maximize</SPAN> the amount of money you could get playing the hand. If no card will allow you to win or tie, just display `<TT>LOSER</TT>'' instead of the cards. Each card should be separated by a single space. Your program will display up to 15 cards on each output line. If more than one output line is required for a dataset, additional lines should be indented by exactly 3 spaces. Cards should be output in suit order (S,D,H,C) and rank order within each suit (Ace high).', '<P>\n<PRE>\n3 \nJD3S \nKH5S \nKDAC2DQD \n2S3S \n2C3C \n4D5DJHAH \n4S7D \nKHKD \nAHADKSKC\n</PRE>', '<P>\n<PRE>\n1: TS 3D 4D 5D 6D 7D 8D 9D TD AD TH TC\n2: 4S 5S 6S 7S 8S 9S TS JS QS KS AS 2D 3D 6D 7D \n   8D 9D TD JD QD KD AD 2H 3H 4H 5H 6H 7H 8H 9H\n   TH QH KH 4C 5C 6C 7C 8C 9C TC JC QC KC AC\n3: LOSER\n</PRE>', NULL, 'Regionals 2005,North America - Greater NY', '30.77%', '66.67%', '2016-06-16 16:31:05', -1, '未分类', -0.857123760010235, 0.344836376886451),
(115, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1501', '1501', 'UVALive', '3.000 seconds\\n\\t', NULL, '3500 - Model Rocket Height', '<P>\nOne method used to determine the height achieved by a model rocket is the <SPAN  CLASS="textit">geodesic</SPAN> method. Two observers <SPAN CLASS="MATH"><I>A</I></SPAN>\n<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>\n<tex2html_verbatim_mark> are spaced 100 feet apart along a base line along one edge of the flat test field. The launch platform is equidistant from observers <SPAN CLASS="MATH"><I>A</I></SPAN>\n<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>\n<tex2html_verbatim_mark> and 50 feet from the base line. Each observer has a theodolite or some other device for measuring angle above the horizontal (elevation angle) of a distant object and the azimuth angle (the angle the vertical plane of the sight line makes with the line from <SPAN CLASS="MATH"><I>A</I></SPAN>\n<tex2html_verbatim_mark> through <SPAN CLASS="MATH"><I>B</I></SPAN>\n<tex2html_verbatim_mark> measured counter-clockwise). Each measuring device is on a stand. <SPAN CLASS="MATH"><I>A</I></SPAN>\n<tex2html_verbatim_mark>''s device is <SPAN CLASS="MATH"><I>HA</I></SPAN>\n<tex2html_verbatim_mark> feet above the launch platform and <SPAN CLASS="MATH"><I>B</I></SPAN>\n<tex2html_verbatim_mark>''s device is <SPAN CLASS="MATH"><I>HB</I></SPAN>\n<tex2html_verbatim_mark> feet above the launch platform. When a rocket is fired, near the top of its flight, it deploys a parachute and emits a puff of smoke. Each observer measures the elevation angle and azimuth angle of the puff of smoke from their location. If the peak location is on the wrong side of the baseline or outside the lines determined by <SPAN CLASS="MATH"><I>A</I></SPAN>\n<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>\n<tex2html_verbatim_mark> perpendicular to the base line, it is out of bounds and disqualified. From this information, the height of the rocket may be determined as follows: \n\n<P>\nOn each sight line, find the point on that sight line closest to the other sight line. The point halfway between these two points is assumed to be the location of the rocket at the top of its flight. The height achieved by the rocket is the vertical distance of this point above the launch platform. \n\n<P>\n\n<P>\n<BR>\nThis problem is to write a program which, given the parameters <SPAN CLASS="MATH"><I>HA</I></SPAN>\n<tex2html_verbatim_mark> (the distance of the measuring device <SPAN CLASS="MATH"><I>A</I></SPAN>\n<tex2html_verbatim_mark> above the launch platform in feet), <SPAN CLASS="MATH"><I>HB</I></SPAN>\n<tex2html_verbatim_mark> (the distance of the measuring device <SPAN CLASS="MATH"><I>B</I></SPAN>\n<tex2html_verbatim_mark> above the launch platform in feet), <SPAN CLASS="MATH"><IMG\n WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img1.png"\n ALT="$ \\alpha$"></SPAN>\n<tex2html_verbatim_mark> (the elevation angle of the rocket in degrees measured by the left observer <SPAN CLASS="MATH"><I>A</I></SPAN>\n<tex2html_verbatim_mark>), <SPAN CLASS="MATH"><IMG\n WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img2.png"\n ALT="$ \\beta$"></SPAN>\n<tex2html_verbatim_mark> (the elevation angle of the rocket in degrees observed by the right observer <SPAN CLASS="MATH"><I>B</I></SPAN>\n<tex2html_verbatim_mark>), <SPAN CLASS="MATH"><IMG\n WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img3.png"\n ALT="$ \\gamma$"></SPAN>\n<tex2html_verbatim_mark> (the azimuth angle in degrees measured by the left observer <SPAN CLASS="MATH"><I>A</I></SPAN>\n<tex2html_verbatim_mark>) and <SPAN CLASS="MATH"><IMG\n WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img4.png"\n ALT="$ \\delta$"></SPAN>\n<tex2html_verbatim_mark> (the azimuth angle in degrees measured by the right observer <SPAN CLASS="MATH"><I>B</I></SPAN>\n<tex2html_verbatim_mark>), computes the height of the rocket above the launch platform in feet to the nearest foot.', '<P>\nThe first line of input contains the number of shots that follow <SPAN CLASS="MATH"><I>N</I></SPAN>\n<tex2html_verbatim_mark> <!-- MATH\n $(1 \\le N \\le 100)$\n -->\n<SPAN CLASS="MATH">(1<IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img5.png"\n ALT="$ \\le$"><I>N</I><IMG\n WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img5.png"\n ALT="$ \\le$">100)</SPAN>\n<tex2html_verbatim_mark> and the parameters <SPAN CLASS="MATH"><I>HA</I></SPAN>\n<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>HB</I></SPAN>\n<tex2html_verbatim_mark> in that order as decimal values (the values are separated by one or more spaces). These values would be measured once at the beginning of the day and remain fixed through all <SPAN CLASS="MATH"><I>N</I></SPAN>\n<tex2html_verbatim_mark> rocket shots. Each succeeding line of input will contain the angles <!-- MATH\n $\\alpha,\\beta,\\gamma$\n -->\n<SPAN CLASS="MATH"><IMG\n WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img1.png"\n ALT="$ \\alpha$">,<IMG\n WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img2.png"\n ALT="$ \\beta$">,<IMG\n WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img3.png"\n ALT="$ \\gamma$"></SPAN>\n<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG\n WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img4.png"\n ALT="$ \\delta$"></SPAN>\n<tex2html_verbatim_mark> in that order (measured in degrees) as decimal values. The angles <!-- MATH\n $\\alpha,\\beta$\n -->\n<SPAN CLASS="MATH"><IMG\n WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img1.png"\n ALT="$ \\alpha$">,<IMG\n WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img2.png"\n ALT="$ \\beta$"></SPAN>\n<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG\n WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img3.png"\n ALT="$ \\gamma$"></SPAN>\n<tex2html_verbatim_mark> will be strictly between 0 and 90 degrees and <SPAN CLASS="MATH"><IMG\n WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/35/3500img4.png"\n ALT="$ \\delta$"></SPAN>\n<tex2html_verbatim_mark> will be strictly between 90 degrees and 180 degrees.', '<P>\nFor each set of four angles (other than the end indicator), the output contains a line with the shot number, <!-- MATH\n $(1\\ldots N)$\n -->\n<SPAN CLASS="MATH">(1...<I>N</I>)</SPAN>\n<tex2html_verbatim_mark>, a colon, a space and finally the height above the field in feet to the nearest foot with no leading spaces.', '<P>\n<PRE>\n4 5.25 2.92 \n39.6 36.0 35.4 151.2\n65.1 71.2 16.5 160.6\n59.4 59.5 43.8 139.0\n45.0 41.2 32.9 152.6\n</PRE>', '<P>\n<PRE>\n1: 50 \n2: 135 \n3: 119 \n4: 58\n</PRE>', NULL, 'Regionals 2005,North America - Greater NY', '50.00%', '62.50%', '2016-06-16 16:31:05', -1, '未分类', -0.736228480018895, 1.63036856315976),
(116, 'http://poj.org/problem?id=3000', '3000', 'Poj', ' 1000MS', ' 65536K', 'Frogger', '<div class="ptx" lang="en-US">“Frogger” was one of the first really popular arcade games after it was introduced by SEGA in 1981. The game consists of helping a frog cross a multi-lane motorway without getting run over by a car. You are given a view of an n-lane motorway where each lane consists of m different spaces that can either be empty or be occupied by a car. On each side of the motorway is a curb on which the frog can move freely. In the traffic lanes the frog can only move on the spaces not occupied by cars. The motorway s constructed in such a way that the direction in which the cars travelalternates between the lanes, with cars in the first lane (the one closest to the starting point of the frog) moving to the right. The cars never switch lanes and only move one step forward in each turn. To ensure a steady supply of traffic, a car that reaches the boundary of its lane is reentered at the opposite end of its lane.\r<br><img src="http://poj.org/images/3000_1.jpg"> <br>In one turn of the game all the cars move one step in their assigned direction while the frog can either move one step to the right or to the left, or one step up or down (between lanes or between the curb and the adjoining lane), or it can stand still. Contrary to the cars the frog cannot “wrap-around” i.e. move in one step between the first and last position of a lane or a curb.\r<br> <br>The frog and the cars move simultaneously. Thus the frog can move to a space given that there will be no car on it in the next round. If the frog is on the same space at the same time as a car it is run over and dies. Note that the frog can jump over an adjacent approaching car in the same lane as itself.\r<br> <br>Your job is to write a computer program that will calculate the minimum number of turns needed for the frog to get from its starting position on the curb to its final position on the curb on the other side of the road or to determine that this is not possible within a given number of rounds.</br></br></br></br></br></img></br></div>', '<div class="ptx" lang="en-US">First there will be a line containing the number of scenarios you are asked to help the frog in. For each scenario there will first be a line containing a positive integer x ≤ 10<sup>5</sup> giving the maximum number of rounds that can be used. The next line contains the number of lanes n, 1 ≤ n ≤ 20, and the length of each lane m, 1 ≤ m ≤ 50. Each of the next n + 2 lines will contain a string of m characters. The character X indicates a car, the character O (letter O) indicates a free space, the character F gives the starting position of the frog, and the character G gives the final destination of the frog. The first line indicates the destination curb, consisting of O’s and exactly one G while the last line gives the starting curb consisting of O’s and exactly one F, while the intermediate lines each represent one lane of the motorway.</div>', '<div class="ptx" lang="en-US">The output will be one line per scenario, either giving the minimum number of turns needed before the frog can get from its starting position to the final position without getting run over by a car or a statement indicating that this was not possible within the maximum number of allowed turns.</div>', '<pre class="sio">2\r\n10\r\n4 4\r\nOOGO\r\nXXOO\r\nXOOX\r\nXXOO\r\nXXOO\r\nOOFO\r\n2\r\n2 2\r\nOG\r\nXX\r\nOO\r\nFO\r\n</pre>', '<pre class="sio">The minimum number of turns is 9.\r\nThe problem has no solution.</pre>', '', 'Svenskt Mästerskap i Programmering/Norgesmesterskapet 2003', '33.12%', '74.58%', '2016-06-16 16:31:04', -1, '未分类', -0.974769244582241, -0.402164218758903),
(117, 'http://poj.org/problem?id=3001', '3001', 'Poj', ' 1000MS', ' 65536K', 'Gallup', '<div class="ptx" lang="en-US">Often, we see results of gallups, like this:\r<br> <br>Prefer red: 3.5%\r<br>Prefer green: 4.5%\r<br>Prefer yellow: 22.0%\r<br>Prefer blue: 70.0%\r<br> <br>and you begin to wonder: how many people did they really ask? If the numbers are simple, like 20%, 40%, and 40%, you know that they asked 5 people (or 10, or 15, or more, but we are interested in the minimum number of people).\r<br> <br>Your task is to write a program that reads sets of percentages and calculates the smallest number of people that could produce the given percentages. We know that this number is always less than 10 000.</br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input is a set of percentages. Each set is on a line of its own. Every line starts with an integer n (0 ≤ n ≤ 20) giving the number of percentages in the set. If n &gt; 0, the percentages follow as n numbers; these numbers may have 0–5 decimals, and all percentages in a set have the same number of decimals. (If there are no decimals, there is no decimal point.) The percentages always add up to about 100% as there may be small rounding errors. Numbers are rounded when digits are removed; they are rounded upwards if the first removed digit is 5 or more. Thus, 4.472 is rounded to 4.47, 4.5, or 4, depending on how many digits you want.</div>', '<div class="ptx" lang="en-US">For each set of data, print a line starting with “Case i :”, where “i” is the data set’s number. Then follows a space and an integer giving the computed number of people. If no legal answer in the range 1–9999 exists, print “error” instead of the number.</div>', '<pre class="sio">3 20 40 40\r\n3 33.3 33.3 33.3\r\n2 33 67\r\n1 100.0000\r\n4 3.75 4.25 22.00 70.00\r\n2 49 51\r\n2 50 51\r\n2 49 50\r\n0</pre>', '<pre class="sio">Case 1: 5\r\nCase 2: 3\r\nCase 3: 3\r\nCase 4: 1\r\nCase 5: 400\r\nCase 6: 35\r\nCase 7: 200\r\nCase 8: error</pre>', '', 'Svenskt Mästerskap i Programmering/Norgesmesterskapet 2003', '50.10%', '86.30%', '2016-06-16 16:31:04', -1, '未分类', -0.986667993117947, 1.00805824372317),
(118, 'http://poj.org/problem?id=3002', '3002', 'Poj', ' 1000MS', ' 65536K', 'Jackpot', '<div class="ptx" lang="en-US">Bill has found the perfect way to make money playing the slot machines. After months of careful research, he has finally figured out the mechanics behind how the machines operate. Now he is ready to make profit of his findings.\r<br> <br>But first an introduction to the game. A slot machine consists of a number of wheels, usually three or four, each with a number of symbols printed on it – cherries, oranges, bells, etc. – and will show one of its symbols at a given time. To play, you insert a coin, push a button and the wheels start spinning. After spinning for a while, each wheel stops – at random it seems – at one of its symbols. If all wheels stop at the same symbol, or some nice combination of symbols, the player wins. One combination that is especially desirable is having the jackpot symbol on all wheels. This combination is simply called ’jackpot’ and will make you rich for life.\r<br> <br>What Bill has discovered is that each wheel will stop at the jackpot symbol with a certain periodicity, which differs a lot between wheels. He has also figured out (after some sneeking around at the slot-machine factory) that all newly manufactured slot-machines are delivered showing the jackpot combination, and that they all have a counter at the back, telling how many times the machine has been played. This counter is always set to zero at delivery.\r<br> <br>Now, all Bill needs to do is to calculate the number of times a machine has to be played between two occurrences of the jackpot combination. We will call this number the jackpot periodicity. This is of course the same as the number of times the machine has to be played after leaving the factory, before it gives its first jackpot. Thus, with a glance at the counter on the back of a machine, Bill can figure out if it is about to give a jackpot.\r<br> <br>As Bill knows that you are a skillful computer programmer, he turns to you with the problem of calculating the jackpot periodicity. For each machine, he will give you the number of wheels, and the periodicity with which the jackpot symbol shows up on each wheel.</br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">One line with the number of machines n ≤ 20. For each machine, one line with the number of wheels w ≤ 5, and one line with w numbers, p<sub>1</sub>, ..., p<sub>w</sub> the periodicity of each wheel p<sub>k</sub> ≤ 1000.</div>', '<div class="ptx" lang="en-US">One line per machine: The jackpot periodicity of the machine, if it is less than or equal to a billion (10<sup>9</sup>), otherwise output the text ’More than a billion.’.</div>', '<pre class="sio">1\r\n3\r\n10 6 15</pre>', '<pre class="sio">30</pre>', '', 'Svenskt Mästerskap i Programmering/Norgesmesterskapet 2003', '33.49%', '90.85%', '2016-06-16 16:31:04', -1, '未分类', -0.881282940746023, -0.371434989599988),
(119, 'http://poj.org/problem?id=3003', '3003', 'Poj', ' 1000MS', ' 65536K', 'Spiderman’s workout', '<div class="ptx" lang="en-US">Staying fit is important for every super hero, and Spiderman is no exception. Every day he undertakes a climbing exercise in which he climbs a certain distance, rests for a minute, then climbs again, rests again, and so on. The exercise is described by a sequence of distances d1, d2, . . . , dm telling how many meters he is to climb before the first first break, before the second break, and so on. Froman exercise perspective it does not really matter if he climbs up or down at the i:th climbing stage, but it is practical to sometimes climb up and sometimes climb down so that he both starts and finishes at street level. Obviously, he can never be below street level. Also, he would like to use as low a building as possible (he does not like to admit it, but he is actually afraid of heights). The building must be at least 2 meters higher than the highest point his feet reach during the workout.\r<br> <br>He wants your help in determining when he should go up and when he should go down. The answer must be legal: it must start and end at street level (0 meters above ground) and it may never go below street level. Among the legal solutions he wants one that minimizes the required building height. When looking for a solution, you may not reorder the distances.\r<br> <br>If the distances are 20 20 20 20 he can either climb up, up, down, down or up, down, up, down. Both are legal, but the second one is better (in fact optimal) because it only requires a building of height 22, whereas the first one requires a building of height 42. If the distances are 3 2 5 3 1 2, an optimal legal solution is to go up, up, down, up, down, down. Note that for some distance sequences there is no legal solution at all (e.g., for 3 4 2 1 6 4 5).\r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of the input contains an integer N giving the number of test scenarios. The following 2N lines specify the test scenarios, two lines per scenario: the first line gives a positive integer M ≤ 40 which is the number of distances, and the following line contains the M positive integer distances. For any scenario, the total distance climbed (the sum of the distances in that scenario) is at most 1000.</div>', '<div class="ptx" lang="en-US">For each input scenario a single line should be output. This line should either be the string "IMPOSSIBLE" if no legal solution exists, or it should be a string of length M containing only the characters "U" and "D", where the i:th character indicates if Spiderman should climb up or down at the i:th stage. If there are several different legal and optimal solutions, output one of them (it does not matter which one as long as it is optimal).</div>', '<pre class="sio">3\r\n4\r\n20 20 20 20\r\n6\r\n3 2 5 3 1 2\r\n7\r\n3 4 2 1 6 4 5</pre>', '<pre class="sio">UDUD\r\nUUDUDD\r\nIMPOSSIBLE</pre>', '', 'Svenskt Mästerskap i Programmering/Norgesmesterskapet 2003', '38.52%', '86.13%', '2016-06-16 16:31:04', -1, '未分类', -0.951485557106689, 0.0463164230198473),
(120, 'http://poj.org/problem?id=3004', '3004', 'Poj', ' 2000MS', ' 65536K', 'Subway planning', '<div class="ptx" lang="en-US">The government in a foreign country is looking into the possibility of establishing a subway system in its capital. Because of practical reasons, they would like each subway line to start at the central station and then go in a straight line in some angle as far as necessary. You have been hired to investigate whether such an approach is feasible. Given the coordinates of important places in the city as well as the maximum distance these places can be from a subway station (possibly the central station, which is already built), your job is to calculate the minimum number of subway lines needed. You may assume that any number of subway stations can be built along a subway line.\r<br> <br><img src="http://poj.org/images/3004_1.jpg"> <br>Figure 1: The figure above corresponds to the first data set in the example input.\r<br> <br/></br></br></img></br></br></div>', '<div class="ptx" lang="en-US">The first line in the input file contains an integer N, the number of data sets to follow. Each set starts with two integers, n and d (1 ≤ n ≤ 500, 0 ≤ d &lt; 150). n is the number of important places in the city that must have a subway station nearby, and d is the maximum distance allowed between an important place and a subway station. Then comes n lines, each line containing two integers x and y (-100 ≤ x, y ≤ 100), the coordinates of an important place in the capital. The central station will always have coordinates 0, 0. All pairs of coordinates within a data set will be distinct (and none will be 0, 0).</div>', '<div class="ptx" lang="en-US">For each data set, output a single integer on a line by itself: the minimum number of subway lines needed to make sure all important places in the city is at a distance of at most d from a subway station.</div>', '<pre class="sio">2\r\n7 1\r\n-1 -4\r\n-3 1\r\n-3 -1\r\n2 3\r\n2 4\r\n2 -2\r\n6 -2\r\n4 0\r\n0 4\r\n-12 18\r\n0 27\r\n-34 51</pre>', '<pre class="sio">4\r\n2</pre>', '', 'Svenskt Mästerskap i Programmering/Norgesmesterskapet 2003', '26.81%', '77.42%', '2016-06-16 16:31:04', -1, '未分类', -0.962681197774376, -0.926222153874442),
(121, 'http://poj.org/problem?id=3005', '3005', 'Poj', ' 1000MS', ' 65536K', 'Exploding CPU', '<div class="ptx" lang="en-US">The well known hardware manufacturing company Processors for Professors is about to release a highly specialized CPU with exceptional functionality in, amongst other areas, number theory. It has, for example, an instruction PFACT that takes one parameter and returns all prime factors of that parameter, with an outstanding execution speed. It has, however, one considerable problem. The scientists at the testing lab has just found out that the PFACT instruction for some special input values freaks out and makes the entire processor explode. Even though this could be an amusing effect, it is not the way it was intended to work. The skilled mathematicians have, by trial and error, found that the explosive numbers all share the same interesting number theoretic properties, which might be of help when troubleshooting.\r<br> <br>An explosive number is a number x = p<sub>0</sub>p<sub>1</sub>p<sub>2</sub> . . . p<sub>n</sub> where all p<sub>i</sub>s are distinct prime numbers such that p<sub>i</sub> = Ap<sub>i-1</sub> +B for i = 1, 2, . . . , n. n ≥ 3, p<sub>0</sub> ≡ 1. A and B are always integers, and might be different for different explosive numbers.\r<br> <br>For example, the processor will explode when factorizing the number 4505, because 4505 = 1 · 5 · 17 · 53 and 5 = 3 · 1 + 2, 17 = 3 · 5 + 2 and 53 = 3 · 17 + 2 and the numbers 5, 17 and 53 are all prime numbers. In this case A = 3 and B = 2.\r<br> <br>You are kindly asked to write a computer program that will aid this company in estimating the impact of the errors, by calculating the amount of explosive numbers that exists within a given range of integers.</br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input starts with a row containing the number 0 ≤ N ≤ 100 of test cases that will follow. For each test case, there will be one row containing two integers, x<sub>L</sub> and x<sub>H</sub> separated by a single space. These numbers are such that 0 ≤ x<sub>L</sub> ≤ x<sub>H</sub> ≤ 2,000,000,000.', '<div class="ptx" lang="en-US">For each test case, output the number of explosive numbers that exist in the range x<sub>L</sub> ≤ x ≤ x<sub>H</sub>.</div>', '<pre class="sio">2\r\n4505 4505\r\n0 5000</pre>', '<pre class="sio">1\r\n5</pre>', '', 'Svenskt Mästerskap i Programmering/Norgesmesterskapet 2003', '43.81%', '85.71%', '2016-06-16 16:31:04', -1, '未分类', -0.986667993117947, 0.485661348021622),
(122, 'http://poj.org/problem?id=1001', '1001', 'Poj', ' 500MS', ' 10000K', 'Exponentiation', '<div class="ptx" lang="en-US">Problems involving the computation of exact values of very large magnitude and precision are common. For example, the computation of the national debt is a taxing experience for many computer systems. \r<br> <br>This problem requires that you write a program to compute the exact value of R<sup>n</sup> where R is a real number ( 0.0 &lt; R &lt; 99.999 ) and n is an integer such that 0 &lt; n &lt;= 25. </br></br></div>', '<div class="ptx" lang="en-US">The input will consist of a set of pairs of values for R and n. The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9.</div>', '<div class="ptx" lang="en-US">The output will consist of one line for each line of input giving the exact value of R^n. Leading zeros should be suppressed in the output. Insignificant trailing zeros must not be printed. Don''t print the decimal point if the result is an integer.</div>', '<pre class="sio">95.123 12\r\n0.4321 20\r\n5.1234 15\r\n6.7592  9\r\n98.999 10\r\n1.0100 12\r\n</pre>', '<pre class="sio">548815620517731830194541.899025343415715973535967221869852721\r\n.00000005148554641076956121994511276767154838481760200726351203835429763013462401\r\n43992025569.928573701266488041146654993318703707511666295476720493953024\r\n29448126.764121021618164430206909037173276672\r\n90429072743629540498.107596019456651774561044010001\r\n1.126825030131969720661201</pre>', '<div class="ptx" lang="en-US">If you don''t know how to determine wheather encounted the end of input:\r<br><i>s</i> is a string and <i>n</i> is an integer\r<br><pre><b>C++</b>\r<br>while(cin&gt;&gt;s&gt;&gt;n)\r<br>{\r<br>...\r<br>}\r<br><b>c</b>\r<br>while(scanf("%s%d",s,&amp;n;)==2) //to  see if the scanf read in as many items as you want\r<br>/*while(scanf(%s%d",s,&amp;n;)!=EOF) //this also work    */\r<br>{\r<br>...\r<br>}</br></br></br></br></br></br></br></br></br></br></pre></br></br></div>', 'East Central North America 1988', '24.35%', '68.59%', '2016-06-16 16:31:04', 5, '图', 3.25274793971292, -1.13053000179587),
(123, 'http://poj.org/problem?id=1002', '1002', 'Poj', ' 2000MS', ' 65536K', '487-3279', '<div class="ptx" lang="en-US">Businesses like to have memorable telephone numbers. One way to make a telephone number memorable is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When you get back to your hotel tonight you can order a pizza from Gino''s by dialing 310-GINO. Another way to make a telephone number memorable is to group the digits in a memorable way. You could order your pizza from Pizza Hut by calling their ``three tens'''' number 3-10-10-10.\r<br> <br>The standard form of a telephone number is seven decimal digits with a hyphen between the third and fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows:\r<br> <br>A, B, and C map to 2\r<br>D, E, and F map to 3\r<br>G, H, and I map to 4\r<br>J, K, and L map to 5\r<br>M, N, and O map to 6\r<br>P, R, and S map to 7\r<br>T, U, and V map to 8\r<br>W, X, and Y map to 9\r<br> <br>There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary. The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the standard form of 3-10-10-10 is 310-1010.\r<br> <br>Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.)\r<br> <br>Your company is compiling a directory of telephone numbers from local businesses. As part of the quality control process you want to check that no two (or more) businesses in the directory have the same telephone number.\r<br> <br/></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input will consist of one case. The first line of the input specifies the number of telephone numbers in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the telephone numbers in the directory, with each number alone on a line. Each telephone number consists of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly seven of the characters in the string will be digits or letters.', '<div class="ptx" lang="en-US">Generate a line of output for each telephone number that appears more than once in any form. The line should give the telephone number in standard form, followed by a space, followed by the number of times the telephone number appears in the directory. Arrange the output lines by telephone number in ascending lexicographical order. If there are no duplicates in the input print the line:\r<br> <br>No duplicates.\r<br/></br></br></div>', '<pre class="sio">12\r\n4873279\r\nITS-EASY\r\n888-4567\r\n3-10-10-10\r\n888-GLOP\r\nTUT-GLOP\r\n967-11-11\r\n310-GINO\r\nF101010\r\n888-1200\r\n-4-8-7-3-2-7-9-\r\n487-3279\r\n</pre>', '<pre class="sio">310-1010 2\r\n487-3279 4\r\n888-4567 3</pre>', '', 'East Central North America 1999', '17.84%', '73.56%', '2016-06-16 16:31:04', 21, '排序', 6.43328342330717, -1.67119833105136),
(124, 'http://poj.org/problem?id=1003', '1003', 'Poj', ' 1000MS', ' 10000K', 'Hangover', '<div class="ptx" lang="en-US"><p>How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We''re assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 <tt>+</tt> 1/3 <tt>=</tt> 5/6 card lengths. In general you can make <i>n</i> cards overhang by 1/2 <tt>+</tt> 1/3 <tt>+</tt> 1/4 <tt>+</tt> ... <tt>+</tt> 1/(<i>n</i> <tt>+</tt> 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(<i>n</i> <tt>+</tt> 1). This is illustrated in the figure below.</p> <br><center><img height="115" src="http://poj.org/images/1003/hangover.jpg" width="424"/></center> <br/></br></div>', '<div class="ptx" lang="en-US">The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.</div>', '<div class="ptx" lang="en-US">For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.</div>', '<pre class="sio">1.00\r\n3.71\r\n0.04\r\n5.19\r\n0.00\r\n</pre>', '<pre class="sio">3 card(s)\r\n61 card(s)\r\n1 card(s)\r\n273 card(s)</pre>', '', 'Mid-Central USA 2001', '48.80%', '95.42%', '2016-06-16 16:31:04', 4, '动规', 2.16247101990822, 0.900090681813467),
(125, 'http://poj.org/problem?id=1004', '1004', 'Poj', ' 1000MS', ' 10000K', 'Financial Management', '<div class="ptx" lang="en-US">Larry graduated this year and finally has a job. He''s making a lot of money, but somehow never seems to have enough. Larry has decided that he needs to grab hold of his financial portfolio and solve his financing problems. The first step is to figure out what''s been going on with his money. Larry has his bank account statements and wants to see how much money he has. Help Larry by writing a program to take his closing balance from each of the past twelve months and calculate his average account balance. </div>', '<div class="ptx" lang="en-US">The input will be twelve lines. Each line will contain the closing balance of his bank account for a particular month. Each number will be positive and displayed to the penny. No dollar sign will be included. </div>', '<div class="ptx" lang="en-US">The output will be a single number, the average (mean) of the closing balances for the twelve months. It will be rounded to the nearest penny, preceded immediately by a dollar sign, and followed by the end-of-line. There will be no other spaces or characters in the output. </div>', '<pre class="sio">100.00\r\n489.12\r\n12454.12\r\n1234.10\r\n823.05\r\n109.20\r\n5.27\r\n1542.25\r\n839.18\r\n83.99\r\n1295.01\r\n1.75</pre>', '<pre class="sio">$1581.42</pre>', '', 'Mid-Atlantic 2001', '37.49%', '95.21%', '2016-06-16 16:31:04', 19, '二叉树', 3.71458163856016, -0.0392271068009143),
(126, 'http://poj.org/problem?id=1005', '1005', 'Poj', ' 1000MS', ' 10000K', 'I Think I Need a Houseboat', '<div class="ptx" lang="en-US">Fred Mapper is considering purchasing some land in Louisiana to build his house on. In the process of investigating the land, he learned that the state of Louisiana is actually shrinking by 50 square miles each year, due to erosion caused by the Mississippi River. Since Fred is hoping to live in this house the rest of his life, he needs to know if his land is going to be lost to erosion.\r<br> <br>After doing more research, Fred has learned that the land that is being lost forms a semicircle. This semicircle is part of a circle centered at (0,0), with the line that bisects the circle being the X axis. Locations below the X axis are in the water. The semicircle has an area of 0 at the beginning of year 1. (Semicircle illustrated in the Figure.)\r<br><p align="center"><img border="0" height="201" src="http://poj.org/images/1005/semicircle.GIF" width="229"/></p></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of input will be a positive integer indicating how many data sets will be included (N). Each of the next N lines will contain the X and Y Cartesian coordinates of the land Fred is considering. These will be floating point numbers measured in miles. The Y coordinate will be non-negative. (0,0) will not be given.</div>', '<div class="ptx" lang="en-US">For each data set, a single line of output should appear. This line should take the form of: “Property N: This property will begin eroding in year Z.” Where N is the data set (counting from 1), and Z is the first year (start from 1) this property will be within the semicircle AT THE END OF YEAR Z. Z must be an integer. After the last data set, this should print out “END OF OUTPUT.” </div>', '<pre class="sio">2\r\n1.0 1.0\r\n25.0 0.0</pre>', '<pre class="sio">Property 1: This property will begin eroding in year 1.\r\nProperty 2: This property will begin eroding in year 20.\r\nEND OF OUTPUT.</pre>', '<div class="ptx" lang="en-US">1.No property will appear exactly on the semicircle boundary: it will either be inside or outside. \r<br>2.This problem will be judged automatically. Your answer must match exactly, including the capitalization, punctuation, and white-space. This includes the periods at the ends of the lines. \r<br>3.All locations are given in miles. </br></br></div>', 'Mid-Atlantic 2001', '43.52%', '95.86%', '2016-06-16 16:31:04', 4, '动规', 1.64430756378853, 0.46157627651869);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(127, 'http://poj.org/problem?id=1006', '1006', 'Poj', ' 1000MS', ' 10000K', 'Biorhythms', '<div class="ptx" lang="en-US">Some people believe that there are three cycles in a person''s life that start the day he or she is born. These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths 23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle, a person performs at his or her best in the corresponding field (physical, emotional or mental). For example, if it is the mental curve, thought processes will be sharper and concentration will be easier. \r<br>Since the three cycles have different periods, the peaks of the three cycles generally occur at different times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the same day) for any person. For each cycle, you will be given the number of days from the beginning of the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a date expressed as the number of days from the beginning of the current year. You task is to determine the number of days from the given date to the next triple peak. The given date is not counted. For example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a triple peak occurs on the given date, you should give the number of days to the next occurrence of a triple peak.\r<br/></br></div>', '<div class="ptx" lang="en-US">You will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which p = e = i = d = -1. </div>', '<div class="ptx" lang="en-US">For each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form:\r<br> <br>Case 1: the next triple peak occurs in 1234 days.\r<br> <br>Use the plural form ``days'''' even if the answer is 1. </br></br></br></br></div>', '<pre class="sio">0 0 0 0\r\n0 0 0 100\r\n5 20 34 325\r\n4 5 6 7\r\n283 102 23 320\r\n203 301 203 40\r\n-1 -1 -1 -1</pre>', '<pre class="sio">Case 1: the next triple peak occurs in 21252 days.\r\nCase 2: the next triple peak occurs in 21152 days.\r\nCase 3: the next triple peak occurs in 19575 days.\r\nCase 4: the next triple peak occurs in 16994 days.\r\nCase 5: the next triple peak occurs in 8910 days.\r\nCase 6: the next triple peak occurs in 10789 days.</pre>', '', 'East Central North America 1999', '31.68%', '89.75%', '2016-06-16 16:31:04', 3, '模拟', 2.45407148686395, -0.521759056566569),
(128, 'http://acm.sgu.ru/problem.php?contest=0&problem=103', '103', 'Sgu', '0.25 \r\n second(s)', '4096\r\n kilobytes', 'Traffic Lights', '<div align="center">input: standard<br/>output: standard</div><br/><br/><br/>In the city of Dingilville the traffic is arranged in an unusual way. There are junctions and roads connecting the junctions. There is at most one road between any two different junctions. There is no road connecting a junction to itself. Travel time for a road is the same for both directions. At every junction there is a single traffic light that is either blue or purple at any moment. The color of each light alternates periodically: blue for certain duration and then purple for another duration. Traffic is permitted to travel down the road between any two junctions, if and only if the lights at both junctions are the same color at the moment of departing from one junction for the other. If a vehicle arrives at a junction just at the moment the lights switch it must consider the new colors of lights. Vehicles are allowed to wait at the junctions. You are given the city map which shows: <li>the travel times for all roads (integers) <li>the durations of the two colors at each junction (integers) <li>and the initial color of the light and the remaining time (integer) for this color to change at each junction. <br/><br/>Your task is to find a path which takes the minimum time from a given source junction to a given destination junction for a vehicle when the traffic starts. In case more than one such path exists you are required to report only one of them.<br/><br/><div align="left" style="margin-top:1em;"><b>Input</b></div>The first line contains two numbers: The id-number of the source junction and the id-number of the destination junction. The second line contains two numbers: <i>N</i>, <i>M</i>. The following <i>N</i> lines contain information on <i>N</i> junctions. The (<i>i</i>+2)''th line of the input file holds information about the junction <i>i</i> : <i>C</i><sub><i>i</i></sub>, <i>r</i><sub><i>iC</i></sub>, <i>t</i><sub><i>iB</i></sub>, <i>t</i><sub><i>iP</i></sub> where <i>C</i><sub><i>i</i></sub> is either <i>B</i> for <i>blue</i> or <i>P</i> for <i>purple</i>, indicating the initial color of the light at the junction <i>i</i>. Finally, the next <i>M</i> lines contain information on <i>M</i> roads. Each line is of the form: <i>i</i>, <i>j</i>, <i>l</i><sub><i>ij</i></sub> where <i>i</i> and <i>j</i> are the id-numbers of the junctions which are connected by this road. 2 ≤ <i>N</i> ≤ 300 where <i>N</i> is the number of junctions. The junctions are identified by integers 1 through <i>N</i>. These numbers are called id-numbers. 1 ≤ <i>M</i> ≤ 14000 where <i>M</i> is the number of roads. 1 ≤ <i>l</i><sub><i>ij</i></sub> ≤ 100 where <i>l</i><sub><i>ij</i></sub> is the time required to move from junction <i>i</i> to <i>j</i> using the road that connects <i>i</i> and <i>j</i>. 1 ≤ <i>t</i><sub><i>iC</i></sub> ≤ 100 where <i>t</i><sub><i>iC</i></sub> is the duration of the color <i>c</i> for the light at the junction <i>i</i>. The index <i>c</i> is either ''B'' for blue or ''P'' for purple. 1 ≤ <i>r</i><sub><i>iC</i></sub> ≤ <i>t</i><sub><i>iC</i></sub> where <i>r</i><sub><i>iC</i></sub> is the remaining time for the initial color <i>c</i> at junction <i>i</i>. <br/><br/><div align="left" style="margin-top:1em;"><b>Output</b></div>If a path exists: <li>The first line will contain the time taken by a minimum-time path from the source junction to the destination junction. <li>Second line will contain the list of junctions that construct the minimum-time path you have found. You have to write the junctions to the output file in the order of travelling. Therefore the first integer in this line must be the id-number of the source junction and the last one the id-number of the destination junction. <br/><br/>If a path does not exist: <li>A single line containing only the integer 0. <br/><br/><div align="left" style="margin-top:1em;"><b>Example(s)</b></div>\n<table cellpadding="4" cellspacing="0" style="border-collapse:collapse; border: 1px black solid;">\n<tr>\n<td style="border-collapse:collapse; border: 1px black solid;" valign="top" width="400">\n<pre>sample input</pre>\n</td>\n<td style="border-collapse:collapse; border: 1px black solid;" valign="top" width="400">\n<pre>sample output</pre>\n</td>\n</tr>\n<tr>\n<td style="border-collapse:collapse; border: 1px black solid;" valign="top" width="400">\n<pre>\r\n1 4\r\n4 5\r\nB 2 16 99\r\nP 6 32 13\r\nP 2 87 4\r\nP 38 96 49\r\n1 2 4\r\n1 3 40\r\n2 3 75\r\n2 4 76\r\n3 4 77\r\n</pre>\n</td>\n<td style="border-collapse:collapse; border: 1px black solid;" valign="top" width="400">\n<pre>\r\n127\r\n1 2 4\r\n</pre>\n</td>\n</tr>\n</table><br/>\n<br/><br/> </li></li></li></li></li></li>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2016-06-06 17:07:37', 6, '最短路', NULL, NULL),
(129, 'http://acm.timus.ru/problem.aspx?space=1&num=1111', '1111', 'Ural', '0.5s', '64MB', 'Squares', '<div class="problem_par"><div class="problem_par_normal">You are given <i>n</i> (1 ≤ <i>n</i> ≤ 50) squares and point <i>P</i>. The distance between <i>P</i> and square is the shortest line segment that connects <i>P</i> with the contour or the internal area of the square. If  <i>P</i> is inside the square then the distance is zero. It is possible some squares to be points i.e. to have vertices that coincide. Write a program that will sort the squares in ascending order according the distance from <i>P</i>.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The first line contains the integer <i>n</i>. The following <i>n</i> lines contain four integers in the range (−9999, 9999). The first two numbers define the <i>x</i> and <i>y</i> coordinates of one of the vertices of the square, the next two numbers define the opposite vertex. The last line contains the <i>x</i> and <i>y</i> coordinates of <i>P</i>.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The output should be a line containing the ids of the squares sorted according to the distance from <i>P</i>. The ids are defined according to the order in which the squares are given in the input. Use ids to break ties i.e. if two squares are the same distance from <i>P</i> then write the square with the lowest id first. Using 10<sup>−14</sup> precision when comparing the distances is accurate enough.</div></div>', '2\r\n0 0 1 1\r\n0 3 1 4\r\n0 0\r\n<br>', '1 2<br>', '', '', '12.26%', NULL, '2016-06-16 16:31:06', 19, '二叉树', 2.22740208303106, -0.770649890297454),
(130, 'http://acm.timus.ru/problem.aspx?space=1&num=1112', '1112', 'Ural', '0.5s', '64MB', 'Cover', '<div class="problem_par"><div class="problem_par_normal">You are given <i>N</i> (0 &lt; <i>N</i> &lt; 100) line segments on a line. Every segment is defined with its endpoints <i>A<sub>i</sub></i> and <i>B<sub>i</sub></i> (<i>A<sub>i</sub></i> ≠ <i>B<sub>i</sub></i>, <nobr>1 ≤ <i>i</i> ≤ <i>N</i></nobr>). The endpoints are integer coordinates in the interval [−999, 999]. Some of the segments probably intersect. Write a program, which removes minimum number of the given segments, so that none of the left segments have common interior point.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The first line of input contains the integer <i>N</i>. Each of the following <i>N</i> lines, contains two integers (<i>A<sub>i</sub></i> and <i>B<sub>i</sub></i>), separated with one space.</div></div>', '<div class="problem_par"><div class="problem_par_normal">On the first line write the integer <i>P</i>, equal to the number of segments, which are left after your program removes the excess segments. The following <i>P</i> lines should contain the coordinates of the left and the right endpoints of the segments which are left. These coordinates must be separated with one space. Coordinates of the left endpoints must be written in their ascending order. If the problem has more the one solution, write only one of them no matter which.</div></div>', '3\r\n6 3\r\n1 3\r\n2 5\r\n<br>', '2\r\n1 3\r\n3 6\r\n<br>', '', 'Problem Source: Bulgarian National Olympiad Day #2', '31.03%', NULL, '2016-06-16 16:31:06', 4, '动规', 1.12118054576369, 0.653207674353243),
(131, 'http://acm.timus.ru/problem.aspx?space=1&num=1113', '1113', 'Ural', '0.5s', '64MB', 'Jeep', '<div class="problem_par"><div class="problem_par_normal">Our jeep is in the desert and must reach a point which is <i>N</i> kilometres away from it. The terrain is tough, the car is old, and it seems like the fuel flows out, and because of this on every kilometre travelled, one litre of fuel is spent. But the jeep has fuel-cans and fuel tank with total capacity of <i>M</i> &lt; <i>N</i> litres. On other hand, at the beginning of the road there is unlimited amount of fuel, and everywhere in the desert there are empty cisterns, in which the jeep, passing near them, can leave unlimited amount of fuel.\r\n</div></div><div class="problem_par"><div class="problem_par_normal">Write a program which calculates the minimum amount of fuel in litres which is needed to reach the destination point.</div></div>', '<div class="problem_par"><div class="problem_par_normal">Two integers <i>N</i> and <i>M</i> are written on the only line of input. It is known that 5<i>M</i> ≥ <i>N</i> &gt; 0. (<i>N</i> &lt; 32000).</div></div>', '<div class="problem_par"><div class="problem_par_normal">The result (the minimum liters of fuel, eventually rounded up), must be written on the only line of output.</div></div>', '1000 500<br>', '3837<br>', '', 'Problem Source: Bulgarian National Olympiad Day #2', '41.71%', NULL, '2016-06-16 16:31:06', 19, '二叉树', 0.259123675634591, 1.46337276707937),
(132, 'http://acm.timus.ru/problem.aspx?space=1&num=1114', '1114', 'Ural', '0.6s', '64MB', 'Boxes', '<div class="problem_par"><div class="problem_par_normal"><i>N</i> boxes are lined up in a sequence (1 ≤ <i>N</i> ≤ 20). You have <i>A</i> red balls and <i>B</i> blue balls (0 ≤ <i>A</i> ≤ 15, 0 ≤ <i>B</i> ≤ 15). The red balls (and the blue ones) are exactly the same. You can place the balls in the boxes. It is allowed to put in a box, balls of the two kinds, or only from one kind. You can also leave some of the boxes empty. It''s not necessary to place all the balls in the boxes. Write a program, which finds the number of different ways to place the balls in the boxes in the described way.</div></div>', '<div class="problem_par"><div class="problem_par_normal">Input contains one line with three integers <i>N</i>, <i>A</i> and <i>B</i> separated by space.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The result of your program must be an integer written on the only line of output.</div></div>', '2 1 1<br>', '9<br>', '', 'Problem Source: First competition for selecting the Bulgarian IOI team.', '30.63%', NULL, '2016-06-16 16:31:06', 4, '动规', 1.43356769342589, 0.622864412453388),
(133, 'http://acm.timus.ru/problem.aspx?space=1&num=1115', '1115', 'Ural', '1s', '64MB', 'Ships', '<div class="problem_par"><div class="problem_par_normal">The military intelligence of one country found out that <i>N</i> (<i>N</i> &lt; 100) battle ships of neighboring enemy country are situated in <i>M</i> rows (1 &lt; <i>M</i> &lt; 10). The intelligence knows the lengths <i>l</i><sub>1</sub>, <i>l</i><sub>2</sub>, , <i>l<sub>N</sub></i> of the battle ships which are whole numbers in the interval [1, 100], and wants to know in which rows the ships are situated. The only thing that is known about the <i>M</i> rows are their lengths — <i>L</i><sub>1</sub>, <i>L</i><sub>2</sub>, , <i>L<sub>M</sub></i>. Assume that the ships touch their neighbours in the rows and that every row contains at least one ship. Write program that will find one possible ordering of the ships in rows.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The first line of the input contains <i>N</i> and <i>M</i>. The next <i>N</i> lines contain the lengths of the ships. The next <i>M</i> lines contain the lengths of the rows.</div></div>', '<div class="problem_par"><div class="problem_par_normal">The output should contain <i>M</i> pairs of lines. The first line of each pair should contain the amount of the ships in the current row, the following line should contain the lengths of the ships from the current row. The order of the <i>M</i> row descriptions should be the same as the order in which the rows are given in the input.</div></div>', '5 2\r\n4\r\n10\r\n2\r\n5\r\n3\r\n11\r\n13\r\n<br>', '3\r\n5 4 2\r\n2\r\n10 3\r\n<br>', '', 'Problem Source: First competition for selecting the Bulgarian IOI team.', '17.50%', NULL, '2016-06-16 16:31:06', 4, '动规', 1.67892924618738, -0.373153159409353),
(134, 'https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1604', '1604', 'UVA', '3.000 seconds\\n\\t', NULL, '10663 - Non-Powerful Subsets', '<iframe src="https://uva.onlinejudge.org/external/106/10663.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, NULL, '28.87%', '67.83%', '2016-06-16 16:31:08', -1, '未分类', -0.211215957251125, -0.928064828539012),
(135, 'http://poj.org/problem?id=2912', '2912', 'Poj', ' 5000MS', ' 65536K', 'Rochambeau', '<div class="ptx" lang="en-US"><span lang="en-us"><p><i>N</i> children are playing Rochambeau (scissors-rock-cloth) game with you. One of them is the judge. The rest children are divided into three groups (it is possible that some group is empty). You don’t know who is the judge, or how the children are grouped. Then the children start playing Rochambeau game for <i>M</i> rounds. Each round two children are arbitrarily selected to play Rochambeau for one once, and you will be told the outcome while not knowing which gesture the children presented. It is known that the children in the same group would present the same gesture (hence, two children in the same group always get draw when playing) and different groups for different gestures. The judge would present gesture randomly each time, hence no one knows what gesture the judge would present. Can you guess who is the judge after after the game ends? If you can, after how many rounds can you find out the judge at the earliest?</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Input contains multiple test cases. Each test case starts with two integers <i>N</i> and <i>M</i> (1 ≤ <i>N</i> ≤ 500, 0 ≤ <i>M</i> ≤ 2,000) in one line, which are the number of children and the number of rounds. Following are <i>M</i> lines, each line contains two integers in [0, <i>N</i>) separated by one symbol. The two integers are the IDs of the two children selected to play Rochambeau for this round. The symbol may be “=”, “&gt;” or “&lt;”, referring to a draw, that first child wins and that second child wins respectively.</p></span></div>', '<div class="ptx" lang="en-US"><p>There is only one line for each test case. If the judge can be found, print the ID of the judge, and the least number of rounds after which the judge can be uniquely determined. If the judge can not be found, or the outcomes of the <i>M</i> rounds of game are inconsistent, print the corresponding message.</p></div>', '<pre class="sio">3 3\r\n0&lt;1\r\n1&lt;2\r\n2&lt;0\r\n3 5\r\n0&lt;1\r\n0&gt;1\r\n1&lt;2\r\n1&gt;2\r\n0&lt;2\r\n4 4\r\n0&lt;1\r\n0&gt;1\r\n2&lt;3\r\n2&gt;3\r\n1 0</pre>', '<pre class="sio">Can not determine\r\nPlayer 1 can be determined to be the judge after 4 lines\r\nImpossible\r\nPlayer 0 can be determined to be the judge after 0 lines</pre>', '', 'Baidu Star 2006 Preliminary', '36.19%', '89.30%', '2016-06-16 16:31:04', -1, '未分类', -0.931852622022774, -0.147194668710614),
(136, 'http://poj.org/problem?id=3100', '3100', 'Poj', ' 1000MS', ' 65536K', 'Root of the Problem', '<div class="ptx" lang="en-US"><p>Given positive integers B and N, find an integer A such that A<sup>N</sup> is as close as possible to B. (The result A is an approximation to the Nth root of B.) Note that A<sup>N</sup> may be less than, equal to, or greater than B.</p></div>', '<div class="ptx" lang="en-US"><p>The input consists of one or more pairs of values for B and N. Each pair appears on a single line, delimited by a single space. A line specifying the value zero for both B and N marks the end of the input. The value of B will be in the range 1 to 1,000,000 (inclusive), and the value of N will be in the range 1 to 9 (inclusive).</p></div>', '<div class="ptx" lang="en-US"><p>For each pair B and N in the input, output A as defined above on a line by itself.</p></div>', '<pre class="sio">4 3\r\n5 3\r\n27 3\r\n750 5\r\n1000 5\r\n2000 5\r\n3000 5\r\n1000000 5\r\n0 0</pre>', '<pre class="sio">1\r\n2\r\n3\r\n4\r\n4\r\n4\r\n5\r\n16</pre>', '', 'Mid-Central USA 2006', '53.62%', '96.31%', '2016-06-16 16:31:04', -1, '未分类', -0.671892009127903, 1.30040118058635),
(137, 'http://poj.org/problem?id=3101', '3101', 'Poj', ' 2000MS', ' 65536K', 'Astronomy', '<div class="ptx" lang="en-US"><p>There are <i>n</i> planets in the planetary system of star X. They orbit star X in circular orbits located in the same plane. Their tangent velocities are constant. Directions of orbiting of all planets are the same.</p><p>Sometimes the event happens in this planetary system which is called <i>planet parade</i>. It is the moment when all planets and star X are located on the same straight line.</p><p>Your task is to find the length of the time interval between two consecutive planet parades.</p></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The first line of the input file contains <i>n</i> — the number of planets (2 ≤ <i>n</i> ≤ 1 000).</p><p>Second line contains n integer numbers <i>t<sub>i</sub></i> — the orbiting periods of planets (1 ≤ <i>t<sub>i</sub></i> ≤ 10 000). Not all of <i>t<sub>i</sub></i> are the same.</p></span></div>', '<div class="ptx" lang="en-US"><p>Output the answer as a common irreducible fraction, separate numerator and denominator by a space.</p></div>', '<pre class="sio">3\r\n6 2 3</pre>', '<pre class="sio">3 1</pre>', '<div class="ptx" lang="en-US"><div align="center"><img src="http://poj.org/images/3101_1.gif"/></div></div>', 'Northeastern Europe 2005', '22.20%', '67.99%', '2016-06-16 16:31:04', -1, '未分类', -0.847344464808952, -1.30909173880037),
(138, 'http://poj.org/problem?id=3102', '3102', 'Poj', ' 2000MS', ' 65536K', 'Bee Garden', '<div class="ptx" lang="en-US"><span lang="en-us"><p>George’s father Ben is fond of bee breeding. He has got a bee garden near his country house and he likes to walk around the garden and gather honey from the hives.</p><p>Ben has <i>n</i> hives, located at various points of his garden. Some of them are connected to each other or Ben’s house by straight roads. Ben always walks along the roads, and he never moves from one road to another anywhere except at hives. Neither Ben’s house nor any hive is located on a road.</p><p>The roads are organized in such a way, that Ben has exactly one way to get from his house to any hive.</p><p>Each week Ben makes a roundtrip. He starts from his house and walks by the roads in such a way that he visits each hive at least once. George once came to see his father and noticed that his father takes the shortest path that allows him to visit each hive and return to his house.</p><p>He thought that his father is getting older, so Ben must be getting really tired with all that walking. He decided to build another straight road that would help his father to visit all the hives faster. That road must connect two hives or a hive and Ben’s house. Help George to build the road in such a way that his father needs to walk as short a path as possible to visit all the hives and return home.</p><p>Note that neither Ben’s house nor any hive must be located on the new road.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The first line of the input file contains <i>n</i> — the number of the hives (1 ≤ <i>n</i> ≤ 200).</p><p>Let us consider Ben’s garden located on a Cartesian plane in such a way that his house occupied the point (0, 0). The following n lines contain two integer numbers each — the coordinates of the hives. The coordinates do not exceed 10 000 by their absolute values, no two hives coincide, no hive is located at (0, 0). Let the hives be numbered from 1 to <i>n</i>.</p><p>The following <i>n</i> lines describe roads — each road is described by the numbers of hives it connects, Ben’s house is denoted by 0.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Output two numbers — the numbers of the hives to be connected by the road. Output 0 instead of hive’s number for Ben’s house.</p><p>If there is no straight road that shortens Ben’s roundtrip output “<code>-1</code>”.</p></span></div>', '<pre class="sio">3\r\n1 0\r\n1 1\r\n0 1\r\n0 2\r\n1 2\r\n1 3</pre>', '<pre class="sio">0 3</pre>', '', 'Northeastern Europe 2005', '24.35%', '81.68%', '2016-06-16 16:31:04', -1, '未分类', -0.968900998145313, -1.13053000179587),
(139, 'http://poj.org/problem?id=3103', '3103', 'Poj', ' 1000MS', ' 65536K', 'Cutting a Block', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Carpenter Bill has a huge wooden block. The block has a shape of rectangular parallelepiped.</p><p>The block is so huge that it cannot pass through the door of Bill’s house. So he decided to cut it into <i>n</i> smaller blocks. Bill is not a very smart guy so he wants to make all small blocks rectangular, and all of them should be equal.</p><p>Write a program that would help Bill to cut his block.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Let us introduce a coordinate system such that the edges of the block are parallel to the coordinate axes and one of the block’s corners is placed at the origin. The opposite corner of the block has coordinates (<i>x</i>, <i>y</i>, <i>z</i>).</p><p>The first line of the input file contains four integer numbers — <i>x</i>, <i>y</i>, <i>z</i> and <i>n</i> (1 ≤ <i>x</i>, <i>y</i>, <i>z</i>, <i>n</i> ≤ 1 000).</p></span></div>', '<div class="ptx" lang="en-US"><p>Output file should contain <i>n</i> lines each describing one small block. Each small block is described by six numbers: <i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>, <i>z</i><sub>1</sub>, <i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>, <i>z</i><sub>2</sub>, where (<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>, <i>z</i><sub>1</sub>) are the coordinates of one corner of the block and (<i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>, <i>z</i><sub>2</sub>) are the coordinates of its opposite corner.</p><p>Coordinates must be precise up to eight digits after the decimal point.</p></div>', '<pre class="sio"><b>sample input #1</b>\r\n3 2 2 4\r\n\r\n<b>sample input #2</b>\r\n3 2 2 6</pre>', '<pre class="sio"><b>sample output #1</b>\r\n0 0 0 1.5 1 2\r\n3 0 0 1.5 1 2\r\n0 1 0 1.5 2 2\r\n3 1 0 1.5 2 2\r\n\r\n<b>sample output #2</b>\r\n0 0 0 1 2 1\r\n0 0 1 1 2 2\r\n1 0 0 3 1 1\r\n1 0 1 3 1 2\r\n1 1 0 3 2 1\r\n1 1 1 3 2 2</pre>', '<div class="ptx" lang="en-US"><div align="center"><img src="http://poj.org/images/3103_1.gif"/></div></div>', 'Northeastern Europe 2005', '49.82%', '93.28%', '2016-06-16 16:31:04', -1, '未分类', -0.962383729060984, 0.984803691927231),
(140, 'http://poj.org/problem?id=3104', '3104', 'Poj', ' 2000MS', ' 65536K', 'Drying', '<div class="ptx" lang="en-US"><p>It is very hard to wash and especially to dry clothes in winter. But Jane is a very smart girl. She is not afraid of this boring process. Jane has decided to use a radiator to make drying faster. But the radiator is small, so it can hold only one thing at a time.</p><p>Jane wants to perform drying in the minimal possible time. She asked you to write a program that will calculate the minimal time for a given set of clothes.</p><p>There are <i>n</i> clothes Jane has just washed. Each of them took <i>a<sub>i</sub></i> water during washing. Every minute the amount of water contained in each thing decreases by one (of course, only if the thing is not completely dry yet). When amount of water contained becomes zero the cloth becomes dry and is ready to be packed.</p><p>Every minute Jane can select one thing to dry on the radiator. The radiator is very hot, so the amount of water in this thing decreases by <i>k</i> this minute (but not less than zero — if the thing contains less than <i>k</i> water, the resulting amount of water will be zero).</p><p>The task is to minimize the total time of drying by means of using the radiator effectively. The drying process ends when all the clothes are dry.</p></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The first line contains a single integer <i>n</i> (1 ≤ <i>n</i> ≤ 100 000). The second line contains <i>a<sub>i</sub></i> separated by spaces (1 ≤ <i>a<sub>i</sub></i> ≤ 10<sup>9</sup>). The third line contains <i>k</i> (1 ≤ <i>k</i> ≤ 10<sup>9</sup>).</p></span></div>', '<div class="ptx" lang="en-US"><p>Output a single integer — the minimal possible number of minutes required to dry all clothes.</p></div>', '<pre class="sio"><b>sample input #1</b>\r\n3\r\n2 3 9\r\n5\r\n\r\n<b>sample input #2</b>\r\n3\r\n2 3 6\r\n5</pre>', '<pre class="sio"><b>sample output #1</b>\r\n3\r\n\r\n<b>sample output #2</b>\r\n2</pre>', '', 'Northeastern Europe 2005', '25.76%', '86.99%', '2016-06-16 16:31:04', -1, '未分类', -0.655612357722233, -1.0134267231092),
(141, 'http://poj.org/problem?id=3105', '3105', 'Poj', ' 1000MS', ' 65536K', 'Expectation', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Eric has constructed an easy scheme for generating random integer numbers. His scheme inputs an integer <i>n</i> and generates evenly distributed random integer value between 0 and (<i>n</i> − 1) inclusive. For example, if <i>n</i> = 3, the scheme generates 0, 1 or 2, each with probability 1/3.</p><p>Now Eric is planning to construct more complicated schemes. The first one will consist of two independent random generators with their outputs forwarded to his favorite <code>XOR</code> gate, which does bitwise exclusive or with its two inputs.</p><p>Eric’s friend Nick studies math. Nick said that the scheme is very interesting, and the most interesting thing is the expectation of the result. Now they both think how to calculate the expectation. Could you help them?</p><p>Remember that the expectation of the random variable is its average value. For a variable <i>ξ</i> with nonnegative integer values it can be calculated as</p><p align="center"><img align="absmiddle" src="http://poj.org/images/3105_1.gif">,</img></p><p>where <i>p<sub>i</sub></i> is the probability of <i>ξ</i> being equal to <i>i</i>.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The first line of the input contains the number <i>k</i> of cases to solve (1 ≤ <i>k</i> ≤ 1 000). Each case consists of a single integer 1 ≤ <i>n</i> ≤ 10<sup>9</sup> on a separate line.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>For each case output the expected value of the new Eric’s scheme with at least two digits after the decimal point. Output each result on a separate line.</p></span></div>', '<pre class="sio">2\r\n3\r\n4</pre>', '<pre class="sio">1.33\r\n1.50</pre>', '', 'Northeastern Europe 2005', '48.53%', '93.07%', '2016-06-16 16:31:04', -1, '未分类', -0.968684657262846, 0.877666649724529),
(142, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1111', '1111', 'UVALive', '3.000 seconds\\n\\t', NULL, '3110 - GHOST', '<P>\nGHOST is a spelling game played by bored school kids on long car/bus rides. The purpose\nof the game it to accumulate letters that spell some word without ever actually finishing a word.\nBefore the game begins, players agree on the order in which they will play. Plays proceed from\none player to the next, returning then to the first player until the game is completed. Each player\nmust, in turn, 1) extend the current ``word", 2) bluff, or 3) challenge.\n\n<P>\n<DL COMPACT>\n<DT>1.</DT>\n<DD>The most common play is to extend the current sequence of letters by adding a single letter,\n      so that the resulting sequence of letters forms the beginning of some word. For example, the\n      first player might call ``P", thinking (secretly) of the word ``part". The second player might\n      call ``L", thinking of the word ``play". The third player might call ``E", thinking of the word\n      ``please".\n\n<P>\nA player loses if they actually complete a valid English word of 4 or more letters. For\n      example, if there were only three players, after ``PLE" the first player might try to extend the\n      word by calling ``A", thinking of the word ``plead". This would, however, be a losing play\n      because ``plea" is a valid word.\n\n<P>\n</DD>\n<DT>2.</DT>\n<DD>A player who cannot think of a valid letter to extend the current sequence may opt to ``bluff"\n      by calling out an arbitrary letter, hoping that the next player will not notice.\n\n<P>\n</DD>\n<DT>3.</DT>\n<DD>Finally, if a player believes, on his turn, that the preceding player was bluffing or that the\n      preceding player completed a word, he may challenge the preceding player. If all players\n      agree that the current sequence completes a word (of at least 4 letters), the preceding player\n      loses. If the preceding player cannot name a word that can be formed from the current\n      sequence, the preceding player loses. If the current sequence is not a valid word and the\n      preceding player is able to name a possible word beginning with the sequence, the challenger\n      loses.\n</DD>\n</DL>\n\n<P>\nWrite a program to serve as a player in a game of GHOST. Note that a skillful player will,\non her turn, not only worry about coming up with a legal extension to the current sequence of\nletters, but will also think about all the words that could be formed from an extension and whether,\ncomparing the number of letters in those words to the number of players, consider whether a\npossible extension could result in her getting stuck on a future turn with no legal extension that\ndoes not end a word, thus losing the game.', '<P>\nThe input for this game will consist of a sequence of one or more scenarios.\n\n<P>\nEach scenario contains the following:\n\n<P>\nThe first line of the scenario will contain a single integer indicating the number of players in the\ngame. This value will be at least 2 for a valid scenario. The end of the input file will be indicated\nby a value less than 2 for this number.\n\n<P>\nFollowing this will be a list of words to serve as the program''s dictionary/vocabulary for the\nscenario. Each word will appear on a separate line, with no leading, trailing, or internal whitespace.\nEach word will consist only of the characters {<TT>a</TT>-<TT>z</TT>}. The end of this list of words will be signaled\nby an empty line.\n\n<P>\nFollowing that empty line, the final input line of the scenario will contain the current sequence\nof letters, again with no leading or trailing spaces. This sequence may be empty if the computer\nplayer is the first player. The sequence may also contain more letters than the number of players,\nindicating that all players (including the computer player) have taken one or more turns.', '<P>\nYour program will produce a single line of output for each scenario.\n   That line of output will consist of the current sequence of letters from the input, followed by a\nsingle blank, followed by:\n\n<P>\n<DL COMPACT>\n<DT>1.</DT>\n<DD>The word `<TT>Challenge</TT>'' if the current sequence is a complete word in the vocabulary list or is\n      not a prefix of any word in the vocabulary list, or\n\n<P>\n</DD>\n<DT>2.</DT>\n<DD>A single character representing a valid extension if it can find some word formed with that\n      extension such that this extension does not complete a word and, if all other players continue\n      to spell out that same word, neither that word nor any shorter word would be completed on\n      the computer player''s turn.\n\n<P>\nIf multiple such extensions are possible, and if any extensions guarantee a different player\n      will lose, the program should select the lexicographicaly smallest.\n\n<P>\n</DD>\n<DT>3.</DT>\n<DD>The word `<TT>Bluff</TT>'' if the only possible extensions would lead to a loss by the computer player.\n</DD>\n</DL>', '<P>\n<PRE>\n3\narea\narched\napple\napply\napplied\n\nar\n2\narea\narch\napple\napply\napplied\napplying\n\na\n2\narea\n\nax\n0\n</PRE>', '<P>\n<PRE>\nar e\na p\nax Challenge\n</PRE>', NULL, 'Regionals 2004,North America - Mid-Atlantic USA', '17.04%', '48.28%', '2016-06-16 16:31:05', -1, '未分类', -0.258142600053141, -0.573018897036199),
(143, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1112', '1112', 'UVALive', '3.000 seconds\\n\\t', NULL, '3111 - Doggone Moles', '<P>\nA mole has pockmarked our yard with a rectangular grid of tunnels. Infuriated at the damage,\nwe have released a number of terriers into the yard to catch the mole. The terriers have very\nsensitive hearing and, if they come close enough to the mole, can dig very quickly and catch the\nrodent. Unfortunately, the mole is very sensitive to the vibrations caused by the footsteps of the\nterriers, and will actively try to evade them.\n\n<P>\nWe have no idea where the mole was when the terriers were released. But we have watched the\nterriers move about the yard for some time, and the mole has not been caught. Write a program\nthat deduces where the mole might be, given our observations.\n\n<P>\nAt the time we began recording our observations, we also know that the mole was not in a\nposition underneath or adjacent to a terrier. In each subsequent time interval, the terriers may have\nremained in the same position or may have moved one space horizontally or vertically. Then the\nmole may have done the same. If, before or after any of these moves, by terriers or by the mole, a\nterrier were directly over the mole or in a position adjacent (horizontally or vertically) to the mole,\nthe mole would have been caught.\n\n<P>\nWrite a program that accepts a description of the yard and of the location of the terriers within\nit over a period of time. The program should print a list of the possible positions of the mole at the\nend of that time.', '<P>\nThe input for this program consists of one or more observation sets.\n\n<P>\nEach observation set is constructed as follows:\n\n<P>\n\n<UL>\n<LI>The first line contains 4 integers\n\n<P>\n<!-- MATH\n $W \\ L \\ N \\ T$\n -->\n<SPAN CLASS="MATH"><I>W</I>&nbsp;<I>L</I>&nbsp;<I>N</I>&nbsp;<I>T</I></SPAN>\n\n<P>\n<SPAN CLASS="MATH"><I>W</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN> are positive integers representing the width (<SPAN CLASS="MATH"><I>x</I></SPAN> dimension) and length (<SPAN CLASS="MATH"><I>y</I></SPAN> dimension)\n    of the yard. <SPAN CLASS="MATH"><I>N</I></SPAN> is the non-negative number of terriers. <SPAN CLASS="MATH"><I>T</I></SPAN> is the positive number of time\n    intervals over which we have conducted observations.\n\n<P>\n</LI>\n<LI>The remainder of the observation set contains one line per terrier. Each line contains <SPAN CLASS="MATH">2<I>T</I></SPAN>\n    integers denoting the <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates of the terrier at each of the <SPAN CLASS="MATH"><I>T</I></SPAN> time steps, expressed\n    separated by whitespace without parentheses or commas. Possible coordinates range from\n    (0, 0) in one corner of the yard to <SPAN CLASS="MATH">(<I>W</I>, <I>L</I>)</SPAN> at the opposite corner.\n</LI>\n</UL>\n\n<P>\nThe end of input is signaled by a line containing 4 zeros in place of a valid <!-- MATH\n $(W, L, N, T)$\n -->\n<SPAN CLASS="MATH">(<I>W</I>, <I>L</I>, <I>N</I>, <I>T</I>)</SPAN> set.', '<P>\nFor each observation set, your program should print a line `<TT>Observation Set</TT>'' followed by the\ninteger number of the set (starting at 1).\n\n<P>\nIf there is at least one possible location for the mole, then, beginning on the next line, print all\nthe possible locations of the mole as <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> pairs, 8 pairs per output line (except possibly fewer for\nthe final line of output for the set). There should be no leading blanks before the first pair on a line\nnor trailing blanks after the final pair on the line, but successive pairs on the same line should be\nseparated by exactly one blank. A pair is printed in the format `<TT>(<SPAN CLASS="MATH"><I>x</I></SPAN>,<SPAN CLASS="MATH"><I>y</I></SPAN>)</TT>'' with no internal blanks.\nPairs should be printed in an order such that pairs with lower values of <SPAN CLASS="MATH"><I>y</I></SPAN> come before any pairs with higher\nvalues of <SPAN CLASS="MATH"><I>y</I></SPAN> and, for pairs with the same <SPAN CLASS="MATH"><I>y</I></SPAN> value, pairs with lower values of <SPAN CLASS="MATH"><I>x</I></SPAN> come\nbefore pairs with higher values of <SPAN CLASS="MATH"><I>x</I></SPAN>.\n\n<P>\nIf there are no possible locations for the mole, then the second line of output for the observation\nset will consist of the message `<TT>No possible locations</TT>''.', '<P>\n<PRE>\n1 4 2 3\n1 1  1 2  1 3\n0 1  0 2  0 3\n6 2 2 4\n3 0  3 1  4 1  4 0\n3 1  3 1  4 1  3 1\n0 0 0 0\n</PRE>', '<P>\n<PRE>\nObservation Set 1\nNo possible locations\nObservation Set 2\n(0,0) (1,0) (2,0) (6,0) (0,1) (1,1) (5,1) (6,1)\n(0,2) (1,2) (2,2) (4,2) (5,2) (6,2)\n</PRE>\n\n<P>\n\n<P><P>\n<BR>\n\n<B>Note:</B>  The sample input set may be visualized as:\n\n<P>\n<DIV ALIGN="CENTER">\n<!-- MATH\n $\\epsfbox{p3111.eps}$\n -->', NULL, 'Regionals 2004,North America - Mid-Atlantic USA', '23.66%', '54.05%', '2016-06-16 16:31:05', -1, '未分类', -0.488942680036608, -0.130469595261404),
(144, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1113', '1113', 'UVALive', '3.000 seconds\\n\\t', NULL, '3112 - Line of Sight', '<P>\nAn architect is very proud of his new home and wants to be sure it can be seen by people\npassing by his property line along the street. The property contains various trees, shrubs, hedges,\nand other obstructions that may block the view. For the purpose of this problem, model the house,\nproperty line, and obstructions as straight lines parallel to the <SPAN CLASS="MATH"><I>x</I></SPAN> axis:\n\n<P>\n<DIV ALIGN="CENTER">\n<!-- MATH\n $\\epsfbox{p3112.eps}$\n -->\n<IMG\n  ALIGN="BOTTOM" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/p3112.jpg"\n ALT="\\epsfbox{p3112.eps}">\n</DIV>\n\n<P>\nTo satisfy the architect''s need to know how visible the house is, you must write a program\nthat accepts as input the locations of the house, property line, and surrounding obstructions and\ncalculates the longest continuous portion of the property line from which the entire house can be\nseen, with no part blocked by any obstruction.', '<P>\nBecause each object is a line, it is represented in the input file with a left and right <SPAN CLASS="MATH"><I>x</I></SPAN> coordinate\nfollowed by a single <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate:\n\n<P>\n\n<P>\n<BR>\n\n<!-- MATH\n $x1 \\ x2 \\ y$\n -->\n<SPAN CLASS="MATH"><I>x</I>1&nbsp;<I>x</I>2&nbsp;<I>y</I></SPAN>\n\n<P>\n\n<P>\n<BR>\nwhere <SPAN CLASS="MATH"><I>x</I>1</SPAN>, <SPAN CLASS="MATH"><I>x</I>2</SPAN>, and <SPAN CLASS="MATH"><I>y</I></SPAN> are non-negative real numbers. <SPAN CLASS="MATH"><I>x</I>1 &lt; <I>x</I>2</SPAN>\n\n<P>\nAn input file can describe the architecture and landscape of multiple houses. For each house,\nthe first line will have the coordinates of the house. The second line will contain the coordinates\nof the property line. The third line will have a single integer that represents the number of\nobstructions, and the following lines will have the coordinates of the obstructions, one per line.\n\n<P>\nFollowing the final house, a line `<TT>0 0 0</TT>'' will end the file.\n\n<P>\nFor each house, the house will be above the property line (<!-- MATH\n $house \\ y > property \\ line \\ y$\n -->\n<SPAN CLASS="MATH"><I>house</I>&nbsp;<I>y</I> &gt; <I>property</I>&nbsp;<I>line</I>&nbsp;<I>y</I></SPAN>). No\nobstruction will overlap with the house or property line, e.g. if <!-- MATH\n $obstacle \\ y = house \\ y$\n -->\n<SPAN CLASS="MATH"><I>obstacle</I>&nbsp;<I>y</I> = <I>house</I>&nbsp;<I>y</I></SPAN>, you are\nguaranteed the entire range <!-- MATH\n $obstacle[x1, x2]$\n -->\n<SPAN CLASS="MATH"><I>obstacle</I>[<I>x</I>1, <I>x</I>2]</SPAN> does not intersect with <!-- MATH\n $house[x1, x2]$\n -->\n<SPAN CLASS="MATH"><I>house</I>[<I>x</I>1, <I>x</I>2]</SPAN>.', '<P>\nFor each house, your program should print a line containing the length of the longest continuous\nsegment of the property line from which the entire house can be to a precision of 2 decimal places.\nIf there is no section of the property line where the entire house can be seen, print `<TT>No View</TT>''.', '<P>\n<PRE>\n2 6 6\n0 15 0\n3\n1 2 1\n3 4 1\n12 13 1\n1 5 5\n0 10 0\n1\n0 15 1\n0 0 0\n</PRE>', '<P>\n<PRE>\n8.80\nNo View\n</PRE>', NULL, 'Regionals 2004,North America - Mid-Atlantic USA', '20.72%', '71.93%', '2016-06-16 16:31:05', -1, '未分类', 0.219943279912612, -0.327009617499757),
(145, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1114', '1114', 'UVALive', '3.000 seconds\\n\\t', NULL, '3113 - Tangled in Cables', '<P>\nYou are the owner of SmallCableCo and have purchased the franchise rights for a small town.\nUnfortunately, you lack enough funds to start your business properly and are relying on parts you\nhave found in an old warehouse you bought. Among your finds is a single spool of cable and a lot\nof connectors. You want to figure out whether you have enough cable to connect every house in\ntown. You have a map of town with the distances for all the paths you may use to run your cable\nbetween the houses. You want to calculate the shortest length of cable you must have to connect\nall of the houses together.', '<P>\nInput file consists on several towns. For each town:\n\n<P>\n\n<UL>\n<LI>The first line gives the length of cable on the spool as a real number.\n</LI>\n<LI>The second line contains the number of houses, <SPAN CLASS="MATH"><I>N</I></SPAN>\n</LI>\n<LI>The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines give the name of each house''s owner. Each name consists of up to 20 characters\n{<TT>a</TT>-<TT>z</TT>,<TT>A</TT>-<TT>Z</TT>,<TT>0</TT>-<TT>9</TT>} and contains no whitespace or punctuation.\n</LI>\n<LI>Next line: <SPAN CLASS="MATH"><I>M</I></SPAN>, number of paths between houses\n</LI>\n<LI>next <SPAN CLASS="MATH"><I>M</I></SPAN> lines in the form\n\n<P>\n\n<P>\n<BR>\n\n<!-- MATH\n $<house \\ name \\ A> \\ <house \\ name \\ B> \\ <distance>$\n -->\n<SPAN CLASS="MATH">&lt; <I>house</I>&nbsp;<I>name</I>&nbsp;<I>A</I> &gt; &nbsp; &lt; <I>house</I>&nbsp;<I>name</I>&nbsp;<I>B</I> &gt; &nbsp; &lt; <I>distance</I> &gt;</SPAN>\n\n<P>\n\n<P>\n<BR>\nWhere the two house names match two different names in the list above and the distance is a\n    positive real number. There will not be two paths between the same pair of houses.\n</LI>\n</UL>', '<P>\nThe output will consist of a single line for each town. If there is not enough cable to connect all of the houses in\nthe town, output\n\n<P>\n\n<P>\n<BR>\n\n<TT>Not enough cable</TT>\n\n<P>\n\n<P>\n<BR>\nIf there is enough cable, then output\n\n<P>\n\n<P>\n<BR>\n\n<TT>Need <SPAN CLASS="MATH"><I>X</I></SPAN> miles of cable</TT>\n\n<P>\n\n<P>\n<BR>\nPrint <SPAN CLASS="MATH"><I>X</I></SPAN> to the nearest tenth of a mile (0.1).', '<P>\n<PRE>\n100.0\n4\nJones\nSmiths\nHowards\nWangs\n5\nJones Smiths 2.0\nJones Howards 4.2\nJones Wangs 6.7\nHowards Wangs 4.0\nSmiths Wangs 10.0\n</PRE>', '<P>\n<PRE>\nNeed 10.2 miles of cable\n</PRE>', NULL, 'Regionals 2004,North America - Mid-Atlantic USA', '22.90%', '78.65%', '2016-06-16 16:31:05', -1, '未分类', 3.96769695964415, -0.181275859513495);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(146, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1115', '1115', 'UVALive', '3.000 seconds\\n\\t', NULL, '3114 - All Roads Lead to Albuquerque, er, Rome', '<P>\nA friend of mine has an unusual method of driving around the city, which he says helps reduce\nthe number of routes he must memorize in order to not get lost. He picks two locations as hubs\n(<SPAN CLASS="MATH"><I>H</I>1</SPAN> and <SPAN CLASS="MATH"><I>H</I>2</SPAN>), assigns all other locations to either <SPAN CLASS="MATH"><I>H</I>1</SPAN> or <SPAN CLASS="MATH"><I>H</I>2</SPAN>, and then learns the shortest path from\nall locations to and from their associated hub. If he then wishes to travel from <SPAN CLASS="MATH"><I>A</I></SPAN> to <SPAN CLASS="MATH"><I>B</I></SPAN>, he goes\nfrom <SPAN CLASS="MATH"><I>A</I></SPAN> to the hub associated with <SPAN CLASS="MATH"><I>A</I></SPAN>, then to the hub associated with <SPAN CLASS="MATH"><I>B</I></SPAN> (if <SPAN CLASS="MATH"><I>B</I></SPAN> is associated with\nthe other hub than <SPAN CLASS="MATH"><I>A</I></SPAN>), then to <SPAN CLASS="MATH"><I>B</I></SPAN>. My friend always travels to the hubs, even if that means that he\nvisits his destination two or three times.\n\n<P>\nYour program should analyze a city (a set of nodes and edge lengths) and pick the best pair of\nhubs and assignment of nodes to hubs. The best configuration will be the configuration that mini-\nmizes the average distance of the trips between all pairs of nodes.', '<P>\nThe input contains several test cases.\n\n<P>\nThe input for each test case starts with a single line\n\n<P>\n\n<P>\n<BR>\n\n<SPAN CLASS="MATH"><I>n</I>&nbsp;<I>m</I></SPAN>\n\n<P>\n\n<P>\n<BR>\n\n<!-- MATH\n $2 \\le n \\le 50$\n -->\n<SPAN CLASS="MATH">2<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$"><I>n</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$">50</SPAN> and <!-- MATH\n $1 \\le m \\le 1000$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$"><I>m</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$">1000</SPAN>. <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of locations in the city and <SPAN CLASS="MATH"><I>m</I></SPAN> is the number\nof road segments that directly connect two locations in the city. There may be more than one road\nsegment between a pair of locations, and a road segment may start and end at the same location.\n\n<P>\nEach of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines will describe the road segment between two locations and will contain\nthree integers\n\n<P>\n\n<P>\n<BR>\n\n<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I>&nbsp;<I>d</I></SPAN>\n\n<P>\n\n<P>\n<BR>\n\n<!-- MATH\n $1 \\le a \\le n$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$"><I>a</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$"><I>n</I></SPAN>, <!-- MATH\n $1 \\le b \\le n$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$"><I>b</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$"><I>n</I></SPAN>, and <!-- MATH\n $1 \\le d \\le 1000$\n -->\n<SPAN CLASS="MATH">1<IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$"><I>d</I><IMG\n WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"\n src="https://icpcarchive.ecs.baylor.edu/external/31/3114img1.png"\n ALT="$ \\le$">1000</SPAN>. <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are locations that describe the ends of the\nroad segment and <SPAN CLASS="MATH"><I>d</I></SPAN> is the distance required to travel from <SPAN CLASS="MATH"><I>a</I></SPAN> to <SPAN CLASS="MATH"><I>b</I></SPAN> (or <SPAN CLASS="MATH"><I>b</I></SPAN> to <SPAN CLASS="MATH"><I>a</I></SPAN>) along the road segment.\nThere are no one-way roads.\n\n<P>\nThere will always exist a path between any two locations along the given road segments.\n\n<p>Input will be finished by a test case with n=m=0. That test case shouldn''t be procesed.', '<P>\nFor each test case, output an optimal choice of hubs and assignment of locations to hubs by outputting a line\ncontaining <SPAN CLASS="MATH"><I>n</I></SPAN> integers, separated by spaces. If the <SPAN CLASS="MATH"><I>i</I></SPAN>-th location is a hub, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th\ninteger should be zero. If the <SPAN CLASS="MATH"><I>i</I></SPAN>-th location is not a hub, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th integer should give the number of\nthe <SPAN CLASS="MATH"><I>i</I></SPAN>-th location''s hub (1 to <SPAN CLASS="MATH"><I>n</I></SPAN> inclusive).\n\n<p>\nIf more than one configuration\nyields the lowest average, print any of them.', '<P>\n<PRE>\n3 2\n1 2 40\n2 3 20\n7 10\n1 1 1\n1 2 2\n2 4 2\n4 3 2\n3 1 2\n2 3 5\n3 7 10\n7 6 1\n5 6 1\n4 5 1\n16 15\n1 8 1\n2 8 1\n3 8 1\n4 9 1\n5 9 1\n6 9 1\n7 8 1\n8 9 3\n9 10 1\n8 11 1\n8 12 1\n8 13 1\n9 14 1\n9 15 1\n9 16 1\n</PRE>', '<P>\n<PRE>\n0 0 2\n4 4 4 0 0 5 5\n8 8 8 9 9 9 8 0 0 9 8 8 8 9 9 9\n</PRE>\n\n<P>\n\n<P><P>\n<BR>\n\n<B>Note:</B> for the first test case, `<TT>2 0 0</TT>'' is also a valid output.', NULL, 'Regionals 2004,North America - Mid-Atlantic USA', '11.49%', '38.30%', '2016-06-16 16:31:05', -1, '未分类', 0.43425763989726, -0.944038326771866),
(147, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=1116', '1116', 'UVALive', '3.000 seconds\\n\\t', NULL, '3115 - Balanced Budget Initiative', '<P>\nAfter bouncing 10 checks last month, you feel compelled to do something about your financial\nmanagement. Your bank has started providing you with your statement online, and you believe\nthat this is the opportunity to get your account in order by making sure you have the money to\ncover the checks you write.\n\n<P>\nYour bank provides you with a monthly statement that lists your starting balance, each trans-\naction, and final balance. Your task is to compare the statement with the transactions from your\ncheckbook register over the same time interval. You will identify transactions that appear in only\nthe statement or register, as well as incorrect amounts recorded in the register (naturally the bank''s\nstatement is always correct) and math mistakes in your register.', '<P>\nInput consists of several datasets. In each of them,\nthe bank statement appears first. It begins and ends with lines of the form:\n\n<P>\n\n<P>\n<BR>\n\n<TT>balance <SPAN CLASS="MATH"><I>X</I></SPAN></TT>\n\n<P>\n\n<P>\n<BR>\nwith the first line indicating the starting balance and the second line indicating the final balance.\n\n<P>\nIn between the balances is the list of transactions, one per line, in the form:\n\n<P>\n\n<P>\n<BR>\n\n<TT><SPAN CLASS="MATH">{</SPAN>check<SPAN CLASS="MATH">|</SPAN>deposit<SPAN CLASS="MATH">}</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH"><I>X</I></SPAN></TT>\n\n<P>\n\n<P>\n<BR>\nWhere <SPAN CLASS="MATH"><I>N</I></SPAN> is the integer check or deposit number (the same check or deposit number will only\nappear once, although the same number can apply to both a check and deposit), and <SPAN CLASS="MATH"><I>X</I></SPAN> is the\namount of the transaction.\n\n<P>\nFollowing the final balance the register entries appear. The first line of the register is the starting balance\n\n<P>\n\n<P>\n<BR>\n\n<SPAN CLASS="MATH"><I>X</I></SPAN>\n\n<P>\n\n<P>\n<BR>\nFollowing are pairs of lines, with the next transaction appearing followed by the balance you\ncalculated by hand after entering the transaction.\n\n<P>\n\n<P>\n<BR>\n\n<TT><SPAN CLASS="MATH">{</SPAN>check<SPAN CLASS="MATH">|</SPAN>deposit<SPAN CLASS="MATH">}</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH"><I>X</I></SPAN></TT>\n\n<P>\n\n<SPAN CLASS="MATH"><I>X</I></SPAN>\n\n<P>\n\n<P>\n<BR>\nThe pairs repeat until the end of the dataset. Datasets will be separated by a blank line.\n\n<P>\nFor all input numbers and intermediates, <!-- MATH\n $|X| < 1000000$\n -->\n<SPAN CLASS="MATH">| <I>X</I>| &lt; 1000000</SPAN>. All dollar amounts are given to the\npenny (0.01).', '<P>\nFor ease correcting your register, the output for each transaction occurs in the order it appears in\nthe register. Each register entry receives exactly one line in the output.\n\n<P>\nIf the register entry is entirely correct, meaning that it is found in the statement for the same\namount, the math in the register is correct, and it is not a duplicate entry for a transaction previously\nfound in the register, then output the line\n\n<P>\n\n<P>\n<BR>\n\n<TT><SPAN CLASS="MATH">{</SPAN>check<SPAN CLASS="MATH">|</SPAN>deposit<SPAN CLASS="MATH">}</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN> is correct</TT>\n\n<P>\nHowever, if the transaction is not entirely correct, you will output a single line beginning with the\ntransaction type and number, and one or more of the following mistakes, whitespace separated, in this order:\n\n<P>\n\n<UL>\n<LI><SPAN  CLASS="textbf">is not in statement</SPAN> the transaction type and number do not occur in the statement\n</LI>\n<LI><SPAN  CLASS="textbf">repeated transaction</SPAN> the transaction has occurred previously in the register\n</LI>\n<LI><SPAN  CLASS="textbf">incorrect amount</SPAN> the register amount is different than the statement amount\n</LI>\n<LI><SPAN  CLASS="textbf">math uses correct value</SPAN> the math uses the value from the statement, although the actual transaction\namount is recorded incorrectly in the register. This can only appear if <SPAN  CLASS="textbf">incorrect amount</SPAN> is also displayed.\n</LI>\n<LI><SPAN  CLASS="textbf">math mistake</SPAN> the register balance after the transaction matches neither the statement amount for the\ntransaction, nor the register entry for the transaction (if different than the statement\n      amount)\n</LI>\n</UL>\n\n<P>\nFollowing the line for the final entry in the register, a listing of all transactions missing from\nthe register will be printed. These items may be printed in any order, one per line:\n\n<P>\n\n<P>\n<BR>\n\n<TT>missed <SPAN CLASS="MATH">{</SPAN>check<SPAN CLASS="MATH">|</SPAN>deposit<SPAN CLASS="MATH">}</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN></TT>\n\n<P>Print a blank line between datasets.', '<P>\n<PRE>\nbalance 1000.00\ncheck 100 10.00\ncheck 101 20.00\ncheck 102 30.00\ncheck 103 100.00\ndeposit 1 10.00\ndeposit 2 20.00\ndeposit 3 30.00\ndeposit 4 500.00\nbalance 1400.00\n1000.00\ncheck 100 10.00\n990.00\ndeposit 2 25.00\n1015.00\ncheck 101 20.00\n990.00\ncheck 102 30.00\n960.00\ncheck 101 21.00\n940.00\ncheck 103 100.00\n840.00\ndeposit 3 30.00\n870.00\ndeposit 4 500.00\n1370.00\n</PRE>', '<P>\n<PRE>\ncheck 100 is correct\ndeposit 2 incorrect amount\ncheck 101 math mistake\ncheck 102 is correct\ncheck 101 repeated transaction incorrect amount math uses correct value\ncheck 103 is correct\ndeposit 3 is correct\ndeposit 4 is correct\nmissed deposit 1\n</PRE>', NULL, 'Regionals 2004,North America - Mid-Atlantic USA', '9.93%', '44.12%', '2016-06-16 16:31:05', -1, '未分类', -0.170218760059439, -1.04832486918405),
(148, 'http://acm.hdu.edu.cn/showproblem.php?pid=2056', '2056', 'Hdu', '1.0s', '32.0MB', 'Rectangles', '<div class="panel_content">Given two rectangles and the coordinates of two points on the diagonals of each rectangle,you have to  calculate the area of the intersected part of two rectangles. its sides are parallel to OX and OY .</div>', '<div class="panel_content">Input The first line of input is 8 positive numbers which indicate the coordinates of four points that must be on each diagonal.The 8 numbers are x1,y1,x2,y2,x3,y3,x4,y4.That means the two points on the first rectangle are(x1,y1),(x2,y2);the other two points on the second rectangle are (x3,y3),(x4,y4).</div>', '<div class="panel_content">Output For each case output the area of their intersected part in a single line.accurate up to 2 decimal places.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1.00 1.00 3.00 3.00 2.00 2.00 4.00 4.00\r\n5.00 5.00 13.00 13.00 4.00 4.00 12.50 12.50</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1.00\r\n56.25</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=%D0%A3%C7%EC%B1%ADWarm+Up&amp;source=1&amp;searchmode=source"> 校庆杯Warm Up </a> </div>', '32.45%', NULL, '2016-06-16 16:31:07', -1, '未分类', -0.577005642118496, -0.419970499322577),
(149, 'http://acm.hdu.edu.cn/showproblem.php?pid=2057', '2057', 'Hdu', '1.0s', '32.0MB', 'A + B Again', '<div class="panel_content">There must be many A + B problems in our HDOJ , now a new one is coming.<br>Give you two hexadecimal integers , your task is to calculate the sum of them,and print it in hexadecimal too.<br>Easy ? AC it !</br></br></div>', '<div class="panel_content">The input contains several test cases, please process to the end of the file.<br>Each case consists of two hexadecimal integers A and B in a line seperated by a blank.<br>The length of A and B is less than 15.</br></br></div>', '<div class="panel_content">For each test case,print the sum of A and B in hexadecimal in one line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">+A -A\r\n+1A 12\r\n1A -9\r\n-1A -12\r\n1A -AA</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">0\r\n2C\r\n11\r\n-2C\r\n-90</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=%D0%A3%C7%EC%B1%ADWarm+Up&amp;source=1&amp;searchmode=source"> 校庆杯Warm Up </a> </div>', '43.24%', NULL, '2016-06-16 16:31:07', -1, '未分类', -0.539558407440624, 0.359769675888862),
(150, 'http://poj.org/problem?id=1050', '1050', 'Poj', ' 1000MS', ' 10000K', 'To the Max', '<div class="ptx" lang="en-US">Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1*1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle.\r<br>As an example, the maximal sub-rectangle of the array:\r<br> <br> 0 -2 -7  0\r<br> 9  2 -6  2\r<br>-4  1 -4  1\r<br>-1  8  0 -2\r<br>is in the lower left corner:\r<br> <br> 9  2\r<br>-4  1\r<br>-1  8\r<br>and has a sum of 15.\r<br/></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input consists of an N * N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N^2 integers separated by whitespace (spaces and newlines). These are the N^2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127].</div>', '<div class="ptx" lang="en-US">Output the sum of the maximal sub-rectangle.</div>', '<pre class="sio">4\r\n0 -2 -7 0 9 2 -6 2\r\n-4 1 -4  1 -1\r\n\r\n8  0 -2</pre>', '<pre class="sio">15</pre>', '', 'Greater New York 2001', '52.82%', '91.89%', '2016-06-16 16:31:04', 4, '动规', 0.248800701432668, 1.23395960402654),
(151, 'http://poj.org/problem?id=1051', '1051', 'Poj', ' 1000MS', ' 10000K', 'P,MTHBGWB', '<div class="ptx" lang="en-US">Morse code represents characters as variable length sequences of dots and dashes. In practice, characters in a message are delimited by short pauses. The following table shows the Morse code sequences:\r<br><table border="1" cellpadding="0" cellspacing="0" width="100%"> <tr> <td width="12%">A</td> <td width="12%">.-</td> <td width="12%">H</td> <td width="12%">....</td> <td width="13%">O</td> <td width="13%">---</td> <td width="13%">V</td> <td width="13%">...-</td> </tr> <tr> <td width="12%">B</td> <td width="12%">-...</td> <td width="12%">I</td> <td width="12%">..</td> <td width="13%">P</td> <td width="13%">.--.</td> <td width="13%">W</td> <td width="13%">.--</td> </tr> <tr> <td width="12%">C</td> <td width="12%">-.-.</td> <td width="12%">J</td> <td width="12%">.---</td> <td width="13%">Q</td> <td width="13%">--.-</td> <td width="13%">X</td> <td width="13%">-..-</td> </tr> <tr> <td width="12%">D</td> <td width="12%">-..</td> <td width="12%">K</td> <td width="12%">-.-</td> <td width="13%">R</td> <td width="13%">.-.</td> <td width="13%">Y</td> <td width="13%">-.--</td> </tr> <tr> <td width="12%">E</td> <td width="12%">.</td> <td width="12%">L</td> <td width="12%">.-..</td> <td width="13%">S</td> <td width="13%">...</td> <td width="13%">Z</td> <td width="13%">--..</td> </tr> <tr> <td width="12%">F</td> <td width="12%">..-.</td> <td width="12%">M</td> <td width="12%">--</td> <td width="13%">T</td> <td width="13%">-</td> <td width="13%">　</td> <td width="13%">　</td> </tr> <tr> <td width="12%">G</td> <td width="12%">--.</td> <td width="12%">N</td> <td width="12%">-.</td> <td width="13%">U</td> <td width="13%">..-</td> <td width="13%">　</td> <td width="13%">　</td> </tr></table> <br>Note that four dot-dash combinations are unassigned. For the purposes of this problem we will assign them as follows (these are not the assignments for actual Morse code):\r<br><table border="1" cellpadding="0" cellspacing="0" width="100%"> <tr> <td width="25%">underscore</td> <td width="25%">..--</td> <td width="25%">period</td> <td width="25%">---.</td> </tr> <tr> <td width="25%">comma</td> <td width="25%">.-.-</td> <td width="25%">question mark</td> <td width="25%">----</td> </tr></table> <br>Thus, the message "ACM_GREATER_NY_REGION" is encoded as:\r<br>.- -.-. -- ..-- --. .-. . .- - . .-. ..-- -. -.-- ..-- .-. . --. .. --- -.\r<br>M.E. Ohaver proposed an encryption scheme based on mutilating Morse code. Her scheme replaces the pauses between letters, necessary because Morse is a variable-length encoding that is not prefix-free, with a string that identifies the number of dots and dashes in each. For example, consider the message ".--.-.--". Without knowing where the pauses should be, this could be "ACM", "ANK", or several other possibilities. If we add length information, however, ".--.-.--242", then the code is unabiguous. \r<br>Ohaver''s scheme has three steps, the same for encryption and decryption:\r<br>1.	Convert the text to Morse code without pauses but with a string of numbers to indicate code lengths\r<br>2.	Reverse the string of numbers\r<br>3.	Convert the dots and dashes back into to text using the reversed string of numbers as code lengths\r<br>As an example, consider the encrypted message "AKADTOF_IBOETATUK_IJN". Converting to Morse code with a length string yields ".--.-.--..----..-...--..-...---.-.--..--.-..--...----.232313442431121334242". Reversing the numbers and decoding yields the original message "ACM_GREATER_NY_REGION".\r<br/></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">This problem requires that you implement Ohaver''s encoding algorithm. The input will consist of several messages encoded with Ohaver''s algorithm. The first line of the input is an integer n that specifies the number of test cases. The following n lines contain one message per line. Each message will use only the twenty-six capital letters, underscores, commas, periods, and question marks. Messages will not exceed 100 characters in length.</div>', '<div class="ptx" lang="en-US">For each message in the input, output the line number starting in column one, a colon, a space, and then the decoded message. The output format must be adhered to precisely.</div>', '<pre class="sio">5\r\nAKADTOF_IBOETATUK_IJN\r\nPUEL\r\nQEWOISE.EIVCAEFNRXTBELYTGD.\r\n?EJHUT.TSMYGW?EJHOT\r\nDSU.XFNCJEVE.OE_UJDXNO_YHU?VIDWDHPDJIKXZT?E\r\n</pre>', '<pre class="sio">1: ACM_GREATER_NY_REGION\r\n2: PERL\r\n3: QUOTH_THE_RAVEN,_NEVERMORE.\r\n4: TO_BE_OR_NOT_TO_BE?\r\n5: THE_QUICK_BROWN_FOX_JUMPS_OVER_THE_LAZY_DOG\r\n</pre>', '', 'Greater New York 2001', '57.19%', '94.40%', '2016-06-16 16:31:04', 25, '贪心', -0.787553253417029, 1.59689671598452),
(152, 'http://poj.org/problem?id=1052', '1052', 'Poj', ' 1000MS', ' 10000K', 'Plato''s Blocks', '<div class="ptx" lang="en-US">Plato believed what we perceive is but a shadow of reality.  Recent archaeological excavations have uncovered evidence that this belief may have been encouraged by Plato''s youthful amusement with cleverly-designed blocks.  The blocks have the curious property that, when held with any face toward a light source, they cast shadows of various letters, numbers, shapes, and patterns.  It is possible for three faces incident to a corner to correspond to three different shadow patterns.  Opposite faces, of course, cast shadows which are mirror images of one another.\r<br>The blocks are formed by gluing together small cubes to form a single, connected object.  As an example, the figures below show, layer by layer, the internal structure of a block which can cast shadows of the letters "E", "G", or "B".\r<br><center><img src="http://poj.org/images/1052/block.gif"/></center> <br>Only a partial set of blocks was discovered, but the curious scientists would like to determine what combinations of shadows are possible.  Your program, the solution to this problem, will help them!  The program will input groups of shadow patterns, and for each group will report whether or not a solid can be constructed that will cast those three shadows.\r<br/></br></br></br></div>', '<div class="ptx" lang="en-US">The input contains a sequence of data sets, each specifying a dimension and three shadow patterns.  The first line of a data set contains a positive integer 1 &lt;= n &lt;= 20 that specifies the dimensions of the input patterns.  The remainder of the data set consists of 3n lines, each containing a string of n "X" and "-" characters.  Each group of n lines represents a pattern.  Where an "X" appears a shadow should be cast by the final solid, and where a "-" appears, light should pass through.  For this problem, the input patterns may be assumed to have at least one "X" along each edge of the pattern.  The input is terminated by a line containing a single zero in place of a valid dimension.', '<div class="ptx" lang="en-US">For each data set in the input, output the data set number and one of the following messages:\r<br> <br>Valid set of patterns\r<br>	Impossible combination\r<br>For a set of patterns to be considered valid, it must be possible to construct, by gluing unit cubes together along their faces, a one-piece solid capable of casting the shadow of each of the input patterns.\r<br/></br></br></br></br></div>', '<pre class="sio">5\r\nXXXXX\r\nX----\r\nX--XX\r\nX---X\r\nXXXXX\r\nXXXXX\r\nX----\r\nXXXXX\r\nX----\r\nXXXXX\r\nXXXXX\r\nX---X\r\nXXXX-\r\nX---X\r\nXXXXX\r\n3\r\nX--\r\n-X-\r\n--X\r\nXX-\r\nXXX\r\n-XX\r\n-XX\r\nXXX\r\nXX-\r\n0\r\n</pre>', '<pre class="sio">Data set 1: Valid set of patterns\r\nData set 2: Impossible combination\r\n</pre>', '', 'Greater New York 2001', '40.38%', '74.03%', '2016-06-16 16:31:04', 6, '最短路', -0.978636337856346, 0.200793088521417),
(153, 'http://poj.org/problem?id=1053', '1053', 'Poj', ' 1000MS', ' 10000K', 'Set Me', '<div class="ptx" lang="en-US">The game of Set is played with a deck of eighty-one cards, each having the following four characteristics:\r<br>.	Symbol: diamonds, ovals, or squiggles\r<br>.	Count: 1, 2, or 3 symbols\r<br>.	Color: red, green, or purple\r<br>.	Shading: outlined, filled, or striped\r<br>The cards are shuffled and a tableau of twelve cards is laid out. Players then attempt to be the first to identify "sets" which exist in the tableau. Sets are removed as they are identified and new cards are dealt in their place. Play continues in this manner until all cards have been used. The winner is the player with the most sets.\r<br>A set is a collection of three cards in which each characteristic is either the same on all three cards or different on all three cards. For example, the cards shown below form a set.\r<br><center><img src="http://poj.org/images/1053/me1.gif"/></center> <br>To see how the cards above form a set, take each characteristic in turn. First, each card has different symbol: the first card has squiggles, the second diamonds, and the third ovals. Second, each card has the same count of symbols, three. Third each card has a different color, and finally, each card has a different shading. Thus, each characteristic is either the same on all three cards or different on all three cards, satisfying the requirement for a set.\r<br>Consider the following example of three cards which do not form a set.\r<br><center><img src="http://poj.org/images/1053/me2.gif"/></center> <br>Again, take each characteristic in turn. Each card has a different symbol, each card has a different count of symbols, and each card is the same color. So far this satisfies the requirements for a set. When the shading characteristic is considered, however, two cards are filled and one card is striped. Thus, the shading on all three cards is neither all the same nor all different, and so these cards do not form a set.\r<br/></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input for this program consists of several tableaus of cards. The tableaus are listed in the input file one card per line, with a single blank line between tableaus. The end of  the input is marked by the end of the file. Each card in a tableau is specified by four consecutive characters on the input line. The first identifies the type of symbol on the card, and will be either a "D", "O", or "S", for Diamond, Oval, or Squiggle, respectively. The second character will be the digit 1, 2, or 3, identifying the number of symbols on the card. The third identifes the color and will be an "R", "G", or "P" for Red, Green, or Purple, respectively. The final character identifes the shading and will be an "O", "F", or "S" for Outlined, Filled, or Striped. All characters will be in uppercase.</div>', '<div class="ptx" lang="en-US">The output for the program is, for each tableau, a list of all possible sets which could be formed using cards in the tableau. The order in which the sets are output is not important, but your output should adhere to the format illustrated by the example below. In the event that no sets exist in a tableau, report "*** None Found ***".</div>', '<pre class="sio">S1PS\r\nD3PO\r\nS2GF\r\nO2GS\r\nO2GF\r\nO3PO\r\nS2RF\r\nS3GS\r\nD2GS\r\nO1GS\r\nO1GF\r\nS2PS\r\n\r\nO2GF\r\nO1PF\r\nD2PO\r\nD3RO\r\nS2PO\r\nO1GF\r\nO1GS\r\nD2GO\r\nS3PF\r\nS2GF\r\nD2GS\r\nS1RS\r\n</pre>', '<pre class="sio">CARDS:  S1PS D3PO S2GF O2GS O2GF O3PO S2RF S3GS D2GS O1GS O1GF S2PS\r\nSETS:   1.  D3PO S2RF O1GS\r\n        2.  S3GS D2GS O1GS\r\n\r\nCARDS:  O2GF O1PF D2PO D3RO S2PO O1GF O1GS D2GO S3PF S2GF D2GS S1RS\r\nSETS:   *** None Found ***\r\n</pre>', '', 'Greater New York 2001', '45.78%', '88.44%', '2016-06-16 16:31:04', 11, 'Dijkstra', -0.916708760250057, 0.649273730300166),
(154, 'http://poj.org/problem?id=1054', '1054', 'Poj', ' 5000MS', ' 100000K', 'The Troublesome Frog', '<div class="ptx" lang="en-US">In Korea, the naughtiness of the cheonggaeguri, a small frog, is legendary.  This is a well-deserved reputation, because the frogs jump through your rice paddy at night, flattening rice plants.  In the morning, after noting which plants have been flattened, you want to identify the path of the frog which did the most damage.  A frog always jumps through the paddy in a straight line, with every hop the same length:\r<br><img src="http://poj.org/images/1054/frog1.jpg"> <br>Your rice paddy has plants arranged on the intersection points of a grid as shown in Figure-1, and the troublesome frogs hop completely through your paddy, starting outside the paddy on one side and ending outside the paddy on the other side as shown in Figure-2:\r<br><img src="http://poj.org/images/1054/frog2.jpg"> <br>Many frogs can jump through the paddy, hopping from rice plant to rice plant.  Every hop lands on a plant and flattens it, as in Figure-3.  Note that some plants may be landed on by more than one frog during the night.  Of course, you can not see the lines showing the paths of the frogs or any of their hops outside of your paddy ?for the situation in Figure-3, what you can see is shown in Figure-4:\r<br><img src="http://poj.org/images/1054/frog3.jpg"> <br>From Figure-4, you can reconstruct all the possible paths which the frogs may have followed across your paddy.  You are only interested in frogs which have landed on at least 3 of your rice plants in their voyage through the paddy.  Such a path is said to be a frog path.  In this case, that means that the three paths shown in Figure-3 are frog paths (there are also other possible frog paths). The vertical path down column 1 might have been a frog path with hop length 4 except there are only 2 plants flattened so we are not interested; and the diagonal path including the plants on row 2 col. 3, row 3 col. 4, and row 6 col. 7 has three flat plants but there is no regular hop length which could have spaced the hops in this way while still landing on at least 3 plants, and hence it is not a frog path.  Note also that along the line a frog path follows there may be additional flattened plants which do not need to be landed on by that path (see the plant at (2, 6) on the horizontal path across row 2 in Figure-4), and in fact some flattened plants may not be explained by any frog path at all.\r<br> <br>Your task is to write a program to determine the maximum number of landings in any single frog path (where the maximum is taken over all possible frog paths).  In Figure-4 the answer is 7, obtained from the frog path across row 6.\r<br/></br></br></br></img></br></br></img></br></br></img></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains two integers R and C, respectively the number of rows and columns in your rice paddy, 1 &lt;= R,C &lt;= 5000.  The second line contains the single integer N, the number of flattened rice plants, 3 &lt;= N &lt;= 5000.  Each of the remaining N lines contains two integers, the row number (1 &lt;= row number &lt;= R) and the column number (1 &lt;= column number &lt;= C) of a flattened rice plant, separated by one blank. Each flattened plant is only listed once.</div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The output contains one line with a single integer, the number of plants flattened along a frog path which did the most damage if there exists at least one frog path, otherwise, 0.</div>', '<pre class="sio">6 7\r\n14\r\n2 1\r\n6 6\r\n4 2\r\n2 5\r\n2 6\r\n2 7\r\n3 4\r\n6 1\r\n6 2\r\n2 3\r\n6 3\r\n6 4\r\n6 5\r\n6 7\r\n</pre>', '<pre class="sio">7</pre>', '', 'IOI 2002', '29.93%', '84.52%', '2016-06-16 16:31:04', 4, '动规', -0.686062336929517, -0.667100005291164),
(155, 'http://poj.org/problem?id=1055', '1055', 'Poj', ' 1000MS', ' 10000K', 'BULK MAILING', '<div class="ptx" lang="en-US">An organization that wishes to make a large mailing can save postage by following U.S. Postal Service rules for a bulk mailing. Letters in zip code order are bundled into packets of 10-15 letters each.  Bundles may consist of letters in which all 5 digits of zip code are the same (5-digit bundles), or they may consist of letters in which only the first 3 digits of zip code are the same (3-digit bundles).  If there are fewer than 10 letters to make up a bundle of either type, those letters are mailed first class.\r<br/></div>', '<div class="ptx" lang="en-US">You are to write a program to read a data set of 5-digit zip codes, one per line, until end of input.  Your program should count the number of 5-digit bundles, 3-digit bundles, and first class letters.  You should include as many letters as possible in 5-digit bundles first, then as many as possible in 3-digit bundles, with as few bundles of 10 to 15 letters as possible. For example, if there are 31 letters with the same zip code, they must be combined into exactly three 5-digit bundles.  \r<br>Not all zip codes in the data set will be valid.  A valid zip code consists of exactly 5 digits (0-9), all of which cannot be 0.  Non-numeric characters are not allowed.  At the end of your output, print the invalid zip codes found.  (Duplicates need only be printed once.)</br></div>', '<div class="ptx" lang="en-US">Print a report that lists 5-digit zip code bundles first, with the number of letters and number of bundles for each zip code.  Next list all 3-digit zip code bundles with the same two counts, followed \r<br>by all zip codes that are not bundled and to be sent first class.  At the end print totals of letters and bundles, followed by the number of invalid zip codes and a list of these.  Single space the report, and print blank lines following the heading, before the total line, and between the three groups of zip codes.  For 3-digit bundles, print the zip codes in the form dddxx, where ddd represents the three significant digits and xx represents the last two digits to be omitted. Your output should be similar to that shown in the sample.\r<br/></br></div>', '<pre class="sio">95864\r\n95864\r\n95864\r\n95867\r\n95920\r\n9j876\r\n95616                 \r\n95616                 \r\n95747                 \r\n95814                 \r\n95818                 \r\n95818                 \r\n8976\r\n95818                 \r\n95818\r\n95819                 \r\n95819                 \r\n00000\r\n95819                 \r\n95819                 \r\n95819\r\n95819                 \r\n95819                 \r\n95825\r\n95825\r\n95825\r\n95825\r\n95825\r\n95826\r\n95826\r\n95826\r\n95826\r\n95826\r\n95826\r\n95827\r\n8976\r\n95833\r\n95833\r\n95833\r\n95833\r\n95819                 \r\n95819\r\n95819\r\n95819\r\n95833\r\n95833\r\n95833\r\n95864\r\n95864\r\n95864\r\n123456\r\n95864\r\n95864\r\n95864\r\n95864\r\n</pre>', '<pre class="sio">ZIP         LETTERS     BUNDLES\r\n\r\n95819          11           1\r\n95864          10           1\r\n\r\n958xx          25           2\r\n\r\n95616           2           0\r\n95747           1           0\r\n95920           1           0\r\n\r\nTOTALS         50           4\r\n\r\nINVALID ZIP CODES\r\n\r\n9j876\r\n8976\r\n00000\r\n123456\r\n</pre>', '<div class="ptx" lang="en-US">you can copy the sample output to notpad,then you can see the real format of output.</div>', 'Pacific Northwest 1998', '29.46%', '69.93%', '2016-06-16 16:31:04', 19, '二叉树', -0.973471199287437, -0.706134431520055),
(156, 'http://poj.org/problem?id=1056', '1056', 'Poj', ' 1000MS', ' 10000K', 'IMMEDIATE DECODABILITY', '<div class="ptx" lang="en-US">An encoding of a set of symbols is said to be immediately decodable if no code for one symbol is the prefix of a code for another symbol.  We will assume for this problem that all codes are in binary, that no two codes within a set of codes are the same, that each code has at least one bit and no more than ten bits, and that each set has at least two codes and no more than eight.\r<br> <br>Examples:  Assume an alphabet that has symbols {A, B, C, D}\r<br> <br>The following code is immediately decodable:\r<br>     A:01   B:10   C:0010   D:0000\r<br> <br>but this one is not:\r<br>     A:01   B:10   C:010   D:0000    (Note that A is a prefix of C)\r<br/></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Write a program that accepts as input a series of groups of records from standard input.  Each record in a group contains a collection of zeroes and ones representing a binary code for a different symbol.  Each group is followed by a single separator record containing a single 9; the separator records are not part of the group. Each group is independent of other groups; the codes in one group are not related to codes in any other group (that is, each group is to be processed independently). </div>', '<div class="ptx" lang="en-US"> For each group, your program should determine whether the codes in that group are immediately decodable, and should print a single output line giving the group number and stating whether the group is, or is not, immediately decodable.</div>', '<pre class="sio">01\r\n10\r\n0010\r\n0000\r\n9\r\n01\r\n10\r\n010\r\n0000\r\n9\r\n</pre>', '<pre class="sio">Set 1 is immediately decodable\r\nSet 2 is not immediately decodable\r\n \r\n</pre>', '', 'Pacific Northwest 1998', '47.98%', '94.81%', '2016-06-16 16:31:04', 19, '二叉树', -0.654233184596503, 0.831988065839656),
(157, 'http://poj.org/problem?id=1057', '1057', 'Poj', ' 1000MS', ' 10000K', 'FILE MAPPING', '<div class="ptx" lang="en-US">It is often helpful for computer users to see a visual representation of the file structure on their computers.  The "explorer" in Microsoft Windows is an example of such a system.  Before the days of graphical user interfaces, however, such visual representations were not possible.  The best that could be done was to show a static "map"of directories and files, using indentation as a guide to directory contents.  For example:\r<br><pre>ROOT\r<br>|	DIR1\r<br>|        File1\r<br>|	File2\r<br>|	File3\r<br>|	DIR2\r<br>|	DIR3\r<br>|	File1\r<br>File1\r<br>File2\r<br/></br></br></br></br></br></br></br></br></br></pre> <br>This shows that the root directory contains two files and three subdirectories.  The first subdirectory contains 3 files, the second is empty and the third contains one file.</br></br></div>', '<div class="ptx" lang="en-US">Write a program that reads a series of data sets representing a computer file structure.   A data set ends with a line containing a single *, and the end of valid data is denoted by a line containing a single #.  The data set contains a series of file and directory names.  (The root directory is assumed to be the starting point.) The end of a directory is denoted by a '']''  Directory names begin with a lower case ''d'' and file names begin with a lower case ''f''  File names may or may not have an extension (such as fmyfile.dat or fmyfile).  File and directory names may not contain spaces. </div>', '<div class="ptx" lang="en-US">Note that the contents of any directory should list any subdirectories first, followed by files, if any.  All files should be in alphabetical order within each directory.  Note that each data set output is marked by the label "DATA SET x:" where x denotes the number of the set, beginning at 1.  Note also the blank line between the output data sets.  Each level of indentation should show a ''|'' followed by 5 spaces.', '<pre class="sio">file1\r\nfile2\r\ndir3\r\ndir2\r\nfile1\r\nfile2\r\n]\r\n]\r\nfile4\r\ndir1\r\n]\r\nfile3\r\n*\r\nfile2\r\nfile1\r\n*\r\n#\r\n</pre>', '<pre class="sio">DATA SET 1:\r\nROOT\r\n|     dir3\r\n|     |     dir2\r\n|     |     file1\r\n|     |     file2\r\n|     dir1\r\nfile1\r\nfile2\r\nfile3\r\nfile4\r\n\r\nDATA SET 2:\r\nROOT\r\nfile1\r\nfile2</pre>', '', 'Pacific Northwest 1998', '49.23%', '89.45%', '2016-06-16 16:31:04', 19, '二叉树', -0.941723174785348, 0.935803029214367),
(158, 'http://poj.org/problem?id=1058', '1058', 'Poj', ' 1000MS', ' 65536K', 'The Gourmet Club', '<div class="ptx" lang="en-US">The gourmet club of ACM City has 16 members. They contracted the proprietor of the local French restaurant Chateau Java to arrange dinner parties for 5 consecutive evenings. They asked to be seated around 4 tables, 4 persons per table. They also stipulated that during the 5 evenings, every member of the club will share a table exactly once with each member of the club. Mr. I.B. Emm, the restaurateur, assigned his Maitre D'' the task of scheduling the seating for the 5 evenings. On the first evening, the Maitre D'' seated the members as they arrived and recorded their seating. Each subsequent evening, he carefully planned the seating to match the requirement that no member will be dining twice with some other member.  Unfortunately, the Maitre D'' disappeared on the morning of the fourth evening. Mr. Emm was left only with his notes which included the recorded seating arrangements during the previous 3 evenings. As he was trying to schedule the seating for the remaining evenings, it dawned on him that this task may not be that easy. He is asking for your help to try and see whether the remaining two evenings can be scheduled.  The following is a sample of the Maitre D''s seating arrangements during the first 3 evenings:\r<br> <br>ABCD	EFGH	IJKL	MNOP\r<br>AEIM	BFJN	CGKO	DHLP\r<br>AFKP	BGLM	CHIN	DEJO\r<br> <br>The members of the gourmet club were identified by the letters A,B,C,...,P.  \r<br>Each line represents one evening of seating with each set of four letters a single table. Thus on the first evening A dines with B, C and D etc.   Write a program that will read from the input the seating arrangement of the first three evenings and will either complete the schedule or determine that the Maitre D'' screwed up.\r<br/></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Each data set will be 3 lines. Each line will consist of four blocks, each 4 letters long. All letters will be in upper case. Blocks will be separated by "white space". Data sets will be separated by blank lines.</div>', '<div class="ptx" lang="en-US">For a successful schedule, echo the input and add two lines showing the successful schedule. If it is not possible to complete the schedule, do not echo the input, but print "It is not possible to complete this schedule."  Separate output for each data set with a blank line.</div>', '<pre class="sio">ABCD EFGH IJKL MNOP\r\nAEIM BFJN CGKO DHLP\r\nAFKP BGLM CHIN DEJO\r\n</pre>', '<pre class="sio">It is not possible to complete this schedule.</pre>', '<div class="ptx" lang="en-US">If there are several solutions ,any one is ok.</div>', 'Pacific Northwest 1998', '30.26%', '71.46%', '2016-06-16 16:31:04', 4, '动规', -0.95781352791886, -0.63969285496024),
(159, 'http://poj.org/problem?id=1059', '1059', 'Poj', ' 1000MS', ' 10000K', 'Chutes and Ladders', '<div class="ptx" lang="en-US">A popular board game for children is called "Chutes and Ladders".  The board has squares which are numbered from 1 to 100, and players have counters which start on the theoretical square 0.  The players take turns at throwing a die with the numbers 1 to 6 on it, and each moves his or her counter forward the number of squares corresponding to the number on the die (the square they reach is found by adding the die number to the square number their counter is on).  The first person to reach square 100 is the winner.  \r<br>The interest is caused by the fact that pairs of squares are connected together by "ladders" (which connect a lower-numbered square to a higher-numbered square) and "chutes" (which run from high to low).  If a counter lands on the start of a chute or ladder (i.e., this is the square reached after throwing the die), then the counter is moved to the corresponding square at the end of the chute or ladder.  Note that landing on the end square of a ladder or a chute has no effect, only the start square counts.  Furthermore, there are some squares such that if a player''s counter lands on them, then the player must either miss the next turn, or immediately throw the die again for another turn, depending on what is written on the board.  A miss-a-turn or extra-turn square is never the start or end of a ladder or chute.  If a player is on square 95 or higher, then a die throw which takes them past 100 must be ignored - thus a player on square 99 must ignore all throws which are not 1.  \r<br/></br></div>', '<div class="ptx" lang="en-US">Input  will start with a set of less than 1000 die throws which you must use for all games, starting each new game with the first player "throwing" the first number in the set, the next player "throwing" the second number, and so on.  This set of die throws will simply be a list of random numbers between 1 and 6, separated by single spaces, with not more than 80 characters on each line.  It will be terminated by the number 0.  After this set of die throws, there will be one or more game sets.  Each game set is in three parts.  The first part is a line containing a single number giving the number of players in the game.  This will be more than 1 and less than 6.  Then the board is described, in two parts. The first part lists the ladders and the chutes on the board, each ladder or chute being defined on a single line.  Each is given by two numbers, from 1 to 99,separated by one or more spaces.  The first number gives the start square, and the second number gives the end square; so it is a ladder if the first number is less than the second number, and a chute if the order is the other way.  The chute/ladder definitions are terminated by a line containing two 0''s.  The second part of the board description gives the lose-a-turn/extra-turn squares, if there are any.  These are single numbers, one per line, defining the squares.  If the number is negative, its positive counterpart is a lose-a-turn square; if positive, it represents an extra-turn square.  (For example, -16 means that square 16 on the board is a lose-a-turn square, while a 25 means that players landing on square 25 must immediately roll again.)   The end of this set of descriptions, and of the game description, is given by a single 0.  The end of all the game descriptions is given by a game with the number of players equal to 0.</div>', '<div class="ptx" lang="en-US">Output must be one line for each game in the input, giving the number of the player who wins the game.  Every game will determine a winner in fewer throws than those given at the start of the data.</div>', '<pre class="sio">3 6 3 2 5 1 3 4 2 3 1 2 0\r\n2\r\n6 95\r\n99 1\r\n0 0\r\n-3\r\n98\r\n0\r\n2\r\n3 99\r\n6 90\r\n0 0\r\n0\r\n0\r\n</pre>', '<pre class="sio">2\r\n2</pre>', '', 'Pacific Northwest 1998', '2.25%', '82.57%', '2016-06-16 16:31:04', 3, '模拟', 0.0653706757106341, -2.96597855426076);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(160, 'http://poj.org/problem?id=1060', '1060', 'Poj', ' 1000MS', ' 10000K', 'Modular multiplication of polynomials', '<div class="ptx" lang="en-US">Consider polynomials whose coefficients are 0 and 1. Addition of two polynomials is achieved by ''adding'' the coefficients  for  the  corresponding  powers  in  the polynomials. The  addition  of  coefficients  is  performed  by addition modulo 2, i.e., (0 + 0) mod 2 = 0, (0 + 1) mod 2 = 1, (1 + 0) mod 2 = 1, and (1 + 1) mod 2 = 0. Hence, it is the same as the exclusive-or operation. \r<br> <br>(x^6 + x^4 + x^2 + x + 1) + (x^7 + x + 1) = x^7 + x^6 + x^4 + x^2  \r<br> <br>Subtraction of two polynomials is done similarly. Since subtraction of coefficients is performed by subtraction modulo  2  which  is  also  the  exclusive-or  operation,  subtraction  of  polynomials  is  identical  to  addition  of polynomials. \r<br> <br>  (x^6 + x^4 + x^2 + x + 1) - (x^7 + x + 1) = x^7 + x^6 + x^4 + x^2  \r<br> <br>Multiplication of two polynomials is done in the usual way (of course, addition of coefficients is performed by addition modulo 2). \r<br> <br>(x^6 + x^4 + x^2 + x + 1) (x^7 + x + 1)  =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 \r<br> <br>Multiplication of two polynomials f(x) and g(x) modulo a polynomial h(x) is the remainder of f(x)g(x) divided by h(x). \r<br> <br>(x^6 + x^4 + x^2 + x + 1) (x^7 + x + 1) modulo (x^8 + x^4 + x^3 + x + 1) =  x^7 + x^6 + 1 \r<br>The largest exponent of a polynomial is called its degree. For example, the degree of x^7 + x^6 + 1 is 7. \r<br> <br>Given three polynomials f(x), g(x), and h(x), you are to write a program that computes f(x)g(x) modulo h(x). \r<br>We assume that the degrees of both f(x) and g(x) are less than the degree of h(x).  The degree of a polynomial is less than 1000. \r<br> <br>Since  coefficients  of  a  polynomial  are  0  or  1,  a  polynomial  can  be  represented  by  d+1  and  a  bit  string  of length  d+1,  where  d  is  the  degree  of  the  polynomial  and  the  bit  string  represents  the  coefficients  of  the polynomial. For example, x^7 + x^6 + 1 can be represented by 8 1 1 0 0 0 0 0 1. </br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input consists of T test cases.  The number of test cases (T) is given in the first line of the input file. Each test  case  consists  of  three  lines  that  contain  three  polynomials  f(x),  g(x),  and  h(x),  one  per  line.  Each polynomial is represented as described above.  </div>', '<div class="ptx" lang="en-US">The output should contain the polynomial f(x)g(x) modulo h(x), one per line.</div>', '<pre class="sio">2 \r\n7 1 0 1 0 1 1 1 \r\n8 1 0 0 0 0 0 1 1 \r\n9 1 0 0 0 1 1 0 1 1 \r\n10 1 1 0 1 0 0 1 0 0 1 \r\n12 1 1 0 1 0 0 1 1 0 0 1 0 \r\n15 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1</pre>', '<pre class="sio">8 1 1 0 0 0 0 0 1 \r\n14 1 1 0 1 1 0 0 1 1 1 0 1 0 0 </pre>', '', 'Taejon 2001', '45.38%', '92.11%', '2016-06-16 16:31:04', 15, '拓扑排序', -0.88047166243677, 0.616052942020259),
(161, 'http://acm.sgu.ru/problem.php?contest=0&problem=200', '200', 'Sgu', '0.25 \r\n sec.', '65536\r\n KB', 'Cracking RSA', '<div align="center">input: standard<br/>output: standard</div><br/><br/><br/><div align="left">The following problem is somehow related to the final stage of many famous integer factorization algorithms involved in some cryptoanalytical problems, for example cracking well-known RSA public key system.\r\n<br/>\n<br/>The most powerful of such algorithms, so called quadratic sieve descendant algorithms, utilize the fact that if n = pq where p and q are large unknown primes needed to be found out, then if v<sup>2</sup>=w<sup>2</sup> (mod n), u ≠ v (mod n) and u ≠ -v (mod n), then gcd(v + w, n) is a factor of n (either p or q).\r\n<br/>\n<br/>Not getting further in the details of these algorithms, let us consider our problem. Given m integer numbers b<sub>1</sub>, b<sub>2</sub>, ..., b<sub>m</sub> such that all their prime factors are from the set of first t primes, the task is to find such a subset S of {1, 2, ..., m} that product of b<sub>i</sub> for i from S is a perfect square i.e.  equal to u<sup>2</sup> for some integer u. Given such S we get one pair for testing (product of S elements stands for v when w is known from other steps of algorithms which are of no interest to us, testing performed is checking whether pair is nontrivial, i.e. u ≠ v (mod n) and u ≠ -v (mod n)). Since we want to factor n with maximum possible probability, we would like to get as many such sets as possible. So the interesting problem could be to calculate the number of all such sets. This is exactly your task.\r\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">\n<br/>The first line of the input file contains two integers t and m (1 ≤ t ≤ 100, 1 ≤ m ≤ 100). The second line of the input file contains m integer numbers b<sub>i</sub> such that all their prime factors are from t first primes (for example, if t = 3 all their prime factors are from the set {2, 3, 5}). 1 ≤ b<sub>i</sub> ≤ 10<sup>9</sup> for all i.\r\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">\n<br/>Output the number of non-empty subsets of the given set {b<sub>i</sub>}, the product of numbers from which is a perfect square\r\n<br/>\n<br/>\n</div>', '<div align="left"><br/>Input</div><div align="left"><font face="Courier New"></font></div><div align="left"><pre></pre></div><div align="left">\n<br/>3 4\r\n<br/>9 20 500 3\r\n<br/>\n</div><div align="left"></div>', NULL, NULL, NULL, NULL, NULL, '2016-06-06 16:46:14', -1, '未分类', NULL, NULL),
(162, 'http://acm.sgu.ru/problem.php?contest=0&problem=201', '201', 'Sgu', '0.25 \r\n sec.', '65536\r\n KB', 'Non Absorbing DFA', '<div align="center">input: standard<br/>output: standard</div><br/><br/><br/><div align="left">In the theory of compilers and languages <em>finite state machines</em>, also known as <em>finite automata</em> are widely used. Deterministic finite automation (DFA) is an ordered set &lt;Σ, U, s, T, φ&gt; where Σ is the finite set called <em>input alphabet</em>, U is the finite set of <em>states</em>, s from U is the <em>initial state</em>, T subset of U is the set of <em>terminal states</em> and φ : U × Σ → U is the  <em>transition function</em>. \r\n<br/>\n<br/>The input of the automation is the string α over Σ. Initially the automation is in state s. Each step it reads the first character c of the input string and changes its state to φ(u, c) where u is the current state. After that the first character of the input string is removed and the step repeats. If when its input string is empty the automation is in the terminal state, it is said that it <em>accepts</em> the initial string α, in the other case it <em>rejects</em> it.\r\n<br/>\n<br/>In some cases to simplify the automation the concept of <em>nonabsorbing edges</em> is introduced. That is, in addition to φ the function χ : U × Σ → {0, 1}  is introduced and when making a transition from some state u with some character c, the leading character is removed from the input string only if χ(u, c) = 0. If χ(u, c) = 1, the input string is kept intact and next transition is performed with the new state and the same character.\r\n<br/>\n<br/>It is said that such automation accepts some string α  if after a number of steps it transits to the terminal  state and the input string becomes empty. \r\n<br/>\n<br/>Your task is given the DFA with nonabsorbing edges to compute the number of strings of the given length N that it accepts.\r\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">\n<br/>The first line of the input file contains Σ — a subset of the English alphabet, several different small letters. Next line contains K = | U | — the number of states of the automation (1 ≤ K ≤ 1000). Let states be numbered from 1 to K. Next line contains S (1 ≤ S ≤ K) — the initial state, followed by L = | T | — the number of terminal states and then L different integer numbers ranging from 1 to K — the numbers of terminal states. \r\n<br/>\n<br/>Next K lines contain  | Σ | integer numbers each and define φ. Next K lines define χ in a similar way.  The last line of the input file contains N (1 ≤ N ≤ 60).\r\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">\n<br/>Output the only number — the number of different strings of length N over Σ that the given DFA accepts.\r\n<br/>\n<br/>In the given example the two strings accepted by the automation are ``aaa'''' and ``abb''''.\r\n<br/>\n</div>', '<div align="left"><br/>Input</div><div align="left"><font face="Courier New"></font></div><div align="left"><pre></pre></div><div align="left">ab \r\n<br/>2 \r\n<br/>1 1 2 \r\n<br/>2 1 \r\n<br/>1 2 \r\n<br/>0 1 \r\n<br/>0 0 \r\n<br/>3\r\n<br/>\n</div><div align="left"></div>', NULL, NULL, NULL, NULL, NULL, '2016-06-06 16:46:17', -1, '未分类', NULL, NULL),
(163, 'http://acm.sgu.ru/problem.php?contest=0&problem=202', '202', 'Sgu', '0.25 \r\n sec.', '65536\r\n KB', 'The Towers of Hanoi Revisited', '<div align="center">input: standard<br/>output: standard</div><br/><br/><br/><div align="left">You all must know the puzzle named ``The Towers of Hanoi''''. The puzzle has three pegs and N discs of different radii, initially all disks are located on the first peg, ordered by their radii - the largest at the bottom, the mallest at the top. In a turn you may take the topmost disc from any peg and move it to another peg, the only rule says that you may not place the disc atop any smaller disk. The problem is to move all disks to the last peg making the smallest possible number of moves.\r\n<br/>\n<br/>There is the legend that somewhere in Tibet there is a monastery where monks tirelessly move disks from peg to peg solving the puzzle for 64 discs. The legend says that when they finish, the end of the world would come. \r\n<br/>\n<br/>Since it is well known that to solve the puzzle you need to make 2<sup>N</sup>-1 moves, a small calculation shows that the world seems to be a quite safe place for a while. \r\n<br/>\n<br/>However, recent archeologists discoveries have shown that the things can be a bit worse. The manuscript found in Tibet mountains says that the puzzle the monks are solving has not 3 but M pegs. This is the problem, because when increasing the number of pegs, the number of moves needed to move all discs from the first peg to the last one following the rules described, decreases dramatically.\r\n<br/>\n<br/>Calculate how many moves one needs to move N discs from the first peg to the last one when the puzzle has M pegs and provide the scenario for moving the discs.\r\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">Input file contains N and M (1 ≤ N ≤ 64, 4 ≤ M ≤ 65).\r\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">On the first line output L - the number of moves needed to solve the puzzle. Next L lines must contain the moves themselves. For each move print the line of the form\r\n<br/><center>\n<br/> <tt>move &lt;disc-radius&gt; from &lt;source-peg&gt; to &lt;target-peg&gt;</tt>\n<br/></center>\n<br/>if the disc is moved to the empty peg or\r\n<br/><center>\n<br/> <tt>move &lt;disc-radius&gt; from &lt;source-peg&gt; to &lt;target-peg&gt; atop &lt;target-top-disc-radius&gt;</tt>\n<br/></center>\n<br/>if the disc is moved atop some other disc.\r\n<br/>\n<br/>Disc radii are integer numbers from 1 to N, pegs are numbered from 1 to M.\r\n<br/>\n</div>', '<div align="left"><br/>Input</div><div align="left"><font face="Courier New"></font></div><div align="left"><pre></pre></div><div align="left">5 4\r\n<br/>\n</div><div align="left"></div>', NULL, NULL, NULL, NULL, NULL, '2016-06-06 16:46:19', -1, '未分类', NULL, NULL),
(164, 'http://acm.sgu.ru/problem.php?contest=0&problem=203', '203', 'Sgu', '0.25 \r\n sec.', '65536\r\n KB', 'Hyperhuffman', '<div align="center">input: standard<br/>output: standard</div><br/><br/><br/><div align="left">You might have heard about Huffman encoding — that is the coding system that minimizes the expected length of the text if the codes for characters are required to consist of an integral number of bits.\r\n<br/>\n<br/>Let us recall codes assignment process in Huffman encoding. First the <em>Huffman tree</em> is constructed. Let the alphabet consist of N characters, i-th of which occurs P<sub>i</sub> times in the input text. Initially all characters are considered to be active nodes of the future tree, i-th being marked with P<sub>i</sub>. On each step take two  active nodes with smallest marks, create the new node, mark it with the sum of the considered nodes and make them the children of the new node. Then remove the two nodes that now have parent from the set of active nodes and make the new node active. This process is repeated until only one active node exists, it is  made the root of the tree.\r\n<br/>\n<br/>Note that the characters of the alphabet are represented by the leaves of the tree. For each leaf node the length of its code in the Huffman encoding is the length of the path from the root  to the node. The code itself can be constrcuted the following way: for each internal node consider two edges from it to its children. Assign 0 to one of them and 1 to another. The code of the  character is then the sequence of 0s and 1s passed on the way from the root to the leaf node representing this character.\r\n<br/>\n<br/>In this problem you are asked to detect the length of the text after it being encoded with Huffman method. Since the length of the code for the character depends only on the number of occurences of this character, the text itself is not given — only the number of occurences of each character. Characters are given from most rare to most frequent. \r\n<br/>\n<br/>Note that the alphabet used for the text is quite huge — it may contain up to 500 000 characters.\r\n<br/>\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">The first line of the input file contains N — the number of different characters used in the text (2 ≤ N ≤ 500,000). The second line contains N integer numbers P<sub>i</sub> — the number of occurences of each character (1 ≤ P<sub>i</sub> ≤ 10<sup>9</sup>,  P<sub>i</sub> ≤ P<sub>i + 1</sub> for all valid i). \r\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">Output the length of the text after encoding it using Huffman method, in bits.\r\n<br/>\n</div>', '<div align="left"><br/>Input</div><div align="left"><font face="Courier New"></font></div><div align="left"><pre></pre></div><div align="left">3\r\n<br/>1 1 4\r\n<br/>\n</div><div align="left"></div>', NULL, NULL, NULL, NULL, NULL, '2016-06-06 16:46:20', -1, '未分类', NULL, NULL),
(165, 'http://acm.sgu.ru/problem.php?contest=0&problem=204', '204', 'Sgu', '0.5 \r\n sec.', '65536\r\n KB', 'Little Jumper', '<div align="center">input: standard<br/>output: standard</div><br/><br/><br/><div align="left">Little frog Georgie likes to jump. Recently he have discovered the new playground that seems the perfect place to jump. \r\n<br/>\n<br/>Recently the new jumping exercise has become very popular. Two vertical walls are placed on the playground, each of which has a hole. \r\n<br/>\n<br/>The lower sides of the holes in the walls are on heights b<sub>1</sub> and b<sub>2</sub> respectively, and upper sides on heights t<sub>1</sub> and t<sub>2</sub>. Walls are parallel and placed on distance l from each other. \r\n<br/>\n<br/>The jumper starts at the distance d<sub>s</sub> from the first wall. It jumps through the first hole and lands between the walls.  After that from that point he jumps through the second hole. The goal is to land exactly at the distance d<sub>f</sub> from the second wall.\r\n<br/>\n<br/><center>\n<br/><img src="http://acm.sgu.ru/images/p204-01.gif">\n<br/></img></center>\n<br/>\n<br/>Let us describe the jump. The jumper starts from the specified point and starts moving in some chosen direction with the speed not exceeding some maximal speed v, determined by the strength of the jumper. The gravity of g forces him down, thus he moves along the parabolic trajectory. \r\n<br/>\n<br/>The jumper can choose different starting speeds and  different directions for his first and second jump.\r\n<br/>\n<br/>Of course, The jumper must not attempt to pass through the wall, although it is allowed to touch it passing through the hole, this does not change the trajectory of the jump. The jumper is not allowed to pass through both holes in a single jump. \r\n<br/>\n<br/>Find out, what must be the maximal starting speed of the jumper  so that he could fulfil the excersise.\r\n<br/>\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">Input file contains one or more lines, each of which contains eight real numbers, separated by spaces and/or line feeds. They designate b<sub>1</sub>, t<sub>1</sub>, b<sub>2</sub>, t<sub>2</sub>,  l, d<sub>s</sub>, d<sub>f</sub> and g. All numbers are in range from 10<sup>-2</sup> to 10<sup>3</sup>, t<sub>1</sub>≥ b<sub>1</sub> + 10<sup>-2</sup>, t<sub>2</sub>≥ b<sub>2</sub> + 10<sup>-2</sup>.\r\n<br/>\n</div>', '<div align="left"><br/></div><div align="left">For each line of the input file output the smallest possible maximal speed the jumper must have to fulfil the exercise. If it is impossible to fulfil it, output -1. Your answer must be accurate up to 10<sup>-4</sup>.\r\n<br/>\n</div>', '<div align="left"><br/>Input</div><div align="left"><font face="Courier New"></font></div><div align="left"><pre></pre></div><div align="left">0.3 1.0 0.5 0.9 1.7 1.2 2.3 9.8\r\n<br/>0.6 0.8 0.6 0.8 2.4 0.3 1.5 0.7\r\n<br/>\n</div><div align="left"></div>', NULL, NULL, NULL, NULL, NULL, '2016-06-06 16:46:21', -1, '未分类', NULL, NULL),
(166, 'https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=&page=show_problem&problem=4079', '4079', 'UVALive', '3.000 seconds\\n\\t', NULL, '6068 - The Little Girl who Picks Mushrooms', '<iframe src="https://icpcarchive.ecs.baylor.edu/external/60/6068.html" width="100%" height="1000"scrolling="auto" frameborder="0">Unsupported browser.</iframe>', NULL, NULL, NULL, NULL, NULL, 'Regionals 2012,Asia - Changchun', '36.75%', '87.32%', '2016-06-16 16:31:05', -1, '未分类', 0.659562479881121, 0.74460145613317),
(167, 'http://poj.org/problem?id=1111', '1111', 'Poj', ' 1000MS', ' 10000K', 'Image Perimeters', '<div class="ptx" lang="en-US">Technicians in a pathology lab analyze digitized images of slides. Objects on a slide are selected for analysis by a mouse click on the object. The perimeter of the boundary of an object is one useful measure. Your task is to determine this perimeter for selected objects. \r<br> <br>The digitized slides will be represented by a rectangular grid of periods, ''.'', indicating empty space, and the capital letter ''X'', indicating part of an object.  Simple examples are \r<br><pre>\r<br>XX   Grid 1       .XXX   Grid 2 \r<br>XX                .XXX \r<br>                  .XXX \r<br>                  ...X \r<br>                  ..X. \r<br>                  X... </br></br></br></br></br></br></pre> <br>An X in a grid square indicates that the entire grid square, including its boundaries, lies in some object.  The X in the center of the grid below is adjacent to the X in any of the 8 positions around it. The grid squares for any two adjacent X''s overlap on an edge or corner, so they are connected. \r<br><pre>\r<br>XXX \r<br>XXX    Central X and adjacent X''s \r<br>XXX </br></br></br></pre> <br>An object consists of the grid squares of all X''s that can be linked to one another through a sequence of adjacent X''s.  In Grid 1, the whole grid is filled by one object.  In Grid 2 there are two objects.  One object contains only the lower left grid square.  The remaining X''s belong to the other object. \r<br> <br>The technician will always click on an X, selecting the object containing that X.  The coordinates of the click are recorded.  Rows and columns are numbered starting from 1 in the upper left hand corner.  The technician could select the object in Grid 1 by clicking on row 2 and column 2.  The larger object in Grid 2 could be selected by clicking on row 2, column 3. The click could not be on row 4, column 3. \r<br><center><img src="http://poj.org/images/1111/1111_1.gif"/></center> <br> One useful statistic is the perimeter of the object.  Assume each X corresponds to a square one unit on each side.  Hence the object in Grid 1 has perimeter 8 (2 on each of four sides).  The perimeter for the larger object in Grid 2 is illustrated in the figure at the left.  The length is 18. \r<br> <br>Objects will not contain any totally enclosed holes, so the leftmost grid patterns shown below could NOT appear. The variations on the right could appear: \r<br><pre>\r<br>Impossible   Possible \r<br>\r<br>XXXX         XXXX   XXXX   XXXX \r<br>X..X         XXXX   X...   X... \r<br>XX.X         XXXX   XX.X   XX.X \r<br>XXXX         XXXX   XXXX   XX.X \r<br>\r<br>.....        .....  .....  ..... \r<br>..X..        ..X..  ..X..  ..X.. \r<br>.X.X.        .XXX.  .X...  ..... \r<br>..X..        ..X..  ..X..  ..X.. \r<br>.....        .....  .....  ..... </br></br></br></br></br></br></br></br></br></br></br></br></pre></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input will contain one or more grids.  Each grid is preceded by a line containing the number of rows and columns in the grid and the row and column of the mouse click.  All numbers are in the range 1-20.  The rows of the grid follow, starting on the next line, consisting of ''.'' and ''X'' characters. \r<br> <br>The end of the input is indicated by a line containing four zeros.  The numbers on any one line are separated by blanks.  The grid rows contain no blanks. \r<br/></br></br></div>', '<div class="ptx" lang="en-US">For each grid in the input, the output contains a single line with the perimeter of the specified object. </div>', '<pre class="sio">2 2 2 2\r\nXX\r\nXX\r\n6 4 2 3\r\n.XXX\r\n.XXX\r\n.XXX\r\n...X\r\n..X.\r\nX...\r\n5 6 1 3\r\n.XXXX.\r\nX....X\r\n..XX.X\r\n.X...X\r\n..XXX.\r\n7 7 2 6\r\nXXXXXXX\r\nXX...XX\r\nX..X..X\r\nX..X...\r\nX..X..X\r\nX.....X\r\nXXXXXXX\r\n7 7 4 4\r\nXXXXXXX\r\nXX...XX\r\nX..X..X\r\nX..X...\r\nX..X..X\r\nX.....X\r\nXXXXXXX\r\n0 0 0 0</pre>', '<pre class="sio">8\r\n18\r\n40\r\n48\r\n8</pre>', '', 'Mid-Central USA 2001', '59.84%', '94.02%', '2016-06-16 16:31:04', 18, '树的BFS', -0.765080844250729, 1.81698443833891),
(168, 'http://poj.org/problem?id=1112', '1112', 'Poj', ' 1000MS', ' 10000K', 'Team Them Up!', '<div class="ptx" lang="en-US">Your task is to divide a number of persons into two teams, in such a way, that:\r<br> <br>everyone belongs to one of the teams;\r<br> <br>every team has at least one member;\r<br> <br>every person in the team knows every other person in his team;\r<br> <br>teams are as close in their sizes as possible.\r<br> <br>This task may have many solutions. You are to find and output any solution, or to report that the solution does not exist.</br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">For simplicity, all persons are assigned a unique integer identifier from 1 to N.\r<br> <br>The first line in the input file contains a single integer number N (2 &lt;= N &lt;= 100) - the total number of persons to divide into teams, followed by N lines - one line per person in ascending order of their identifiers. Each line contains the list of distinct numbers Aij (1 &lt;= Aij &lt;= N, Aij != i) separated by spaces. The list represents identifiers of persons that ith person knows. The list is terminated by 0.</br></br></div>', '<div class="ptx" lang="en-US">If the solution to the problem does not exist, then write a single message "No solution" (without quotes) to the output file. Otherwise write a solution on two lines. On the first line of the output file write the number of persons in the first team, followed by the identifiers of persons in the first team, placing one space before each identifier. On the second line describe the second team in the same way. You may write teams and identifiers of persons in a team in any order.</div>', '<pre class="sio">5\r\n2 3 5 0\r\n1 4 5 3 0\r\n1 2 5 0\r\n1 2 3 0\r\n4 3 2 1 0</pre>', '<pre class="sio">3 1 3 5\r\n2 2 4</pre>', '', 'Northeastern Europe 2001', '27.12%', '79.17%', '2016-06-16 16:31:04', 15, '拓扑排序', -0.80296754129283, -0.900476042957513),
(169, 'http://poj.org/problem?id=1113', '1113', 'Poj', ' 1000MS', ' 10000K', 'Wall', '<div class="ptx" lang="en-US">Once upon a time there was a greedy King who ordered his chief Architect to build a wall around the King''s castle. The King was so greedy, that he would not listen to his Architect''s proposals to build a beautiful brick wall with a perfect shape and nice tall towers. Instead, he ordered to build the wall around the whole castle using the least amount of stone and labor, but demanded that the wall should not come closer to the castle than a certain distance. If the King finds that the Architect has used more resources to build the wall than it was absolutely necessary to satisfy those requirements, then the Architect will loose his head. Moreover, he demanded Architect to introduce at once a plan of the wall listing the exact amount of resources that are needed to build the wall.\r<br><center><img src="http://poj.org/images/1113/1113_1.gif"/></center> <br>Your task is to help poor Architect to save his head, by writing a program that will find the minimum possible length of the wall that he could build around the castle to satisfy King''s requirements.\r<br> <br>The task is somewhat simplified by the fact, that the King''s castle has a polygonal shape and is situated on a flat ground. The Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of all castle''s vertices in feet.</br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of the input file contains two integer numbers N and L separated by a space. N (3 &lt;= N &lt;= 1000) is the number of vertices in the King''s castle, and L (1 &lt;= L &lt;= 1000) is the minimal number of feet that King allows for the wall to come close to the castle.\r<br> <br>Next N lines describe coordinates of castle''s vertices in a clockwise order. Each line contains two integer numbers Xi and Yi separated by a space (-10000 &lt;= Xi, Yi &lt;= 10000) that represent the coordinates of ith vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices.</br></br></div>', '<div class="ptx" lang="en-US">Write to the output file the single number that represents the minimal possible length of the wall in feet that could be built around the castle to satisfy King''s requirements. You must present the integer number of feet to the King, because the floating numbers are not invented yet. However, you must round the result in such a way, that it is accurate to 8 inches (1 foot is equal to 12 inches), since the King will not tolerate larger error in the estimates.</div>', '<pre class="sio">9 100\r\n200 400\r\n300 400\r\n300 300\r\n400 300\r\n400 400\r\n500 400\r\n500 200\r\n350 200\r\n200 200</pre>', '<pre class="sio">1628</pre>', '<div class="ptx" lang="en-US">结果四舍五入就可以了</div>', 'Northeastern Europe 2001', '34.10%', '91.05%', '2016-06-16 16:31:04', 29, '几何', -0.0724384664210897, -0.320773287473129),
(170, 'http://poj.org/problem?id=1114', '1114', 'Poj', ' 1000MS', ' 10000K', 'Chemical Reactions', '<div class="ptx" lang="en-US">Bill teaches chemistry in the school and has prepared a number of tests for his students. Each test has a chemical formula and a number of possible reaction outcomes that his students are to choose one correct from. However, Bill wants to make sure that he has not made any typos while entering his tests into a computer and that his students won''t easily throw away wrong answers simply by counting a number of chemical elements on the left and on the right side of the equation, which should be always equal in a valid reaction.\r<br> <br>You are to write a program that will help Bill. The program shall read the description of the test for the students that consists of the given left side of the equation and a number of possible right sides, and determines if the number of chemical elements on each right side of the equation is equal to the number of chemical elements on the given left side of the equation.\r<br> <br>To help you, poor computer folks, that are unaware of the complex world of chemistry, Bill has formalized your task. Each side of the equation is represented by a string of characters without spaces, and consists of one or more chemical sequences separated by a ''+'' (plus) characters. Each sequence has an optional preceding integer multiplier that applies to the whole sequence and a number of elements. Each element is optionally followed by an integer multiplier that applies to it. An element in this equation can be either distinct chemical element or a whole sequence that is placed in round parenthesis. Every distinct chemical element is represented by either one capital letter or a capital letter that is followed by a small letter.\r<br> <br>Even more formally, using notation that is similar to BNF, we can write:\r<br> <br>�<formula> ::= [<number>] <sequence> { ''+'' [<number>] <sequence> }\r<br>�<sequence> ::= <element> [<number>] { <element> [<number>] }\r<br>�<element> ::= <chem> | ''('' <sequence> '')''\r<br>�<chem> ::= <uppercase_letter> [ <lowercase_letter> ]\r<br>�<uppercase_letter> ::= ''A''..''Z''\r<br>�<lowercase_letter> ::= ''a''..''z''\r<br>�<number> ::= ''1''..''9'' { ''0''..''9'' }\r<br> <br>Every distinct chemical element is said to occur in the given formula for some total number X, if X is the sum of all separate occurrences of this chemical element multiplied to all numbers that apply to it. For example, in the following chemical formula:\r<br> <br>C2H5OH+3O2+3(SiO2)\r<br> <br>C occurs for a total of 2 times.\r<br>H occurs for a total of 6 times (5 + 1).\r<br>O occurs for a total of 13 times (1 + 3*2 + 3*2).\r<br>Si occurs for a total of 3 times.\r<br> <br>All multipliers in the formula are integer numbers that are at least 2 if explicitly specified and are 1 by default. Each chemical formula is at most 100 characters long, and every distinct chemical element is guaranteed to occur for a total of no more than 10000 times in each formula.\r<br> <br/></br></br></br></br></br></br></br></br></br></br></br></br></number></br></lowercase_letter></br></uppercase_letter></br></lowercase_letter></uppercase_letter></chem></br></sequence></chem></element></br></number></element></number></element></sequence></br></sequence></number></sequence></number></formula></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of the input file represents a chemical formula that is to be tested as the left side of the equation. The second line of the input file contains a single integer number N (1 &lt;= N &lt;= 10), which is the number of right sides of the equation that are to be tested. Each one of the following N lines represents one such formula.</div>', '<div class="ptx" lang="en-US">You are to write to the output file N lines - one line per each possible answer of the chemical test for Bill''s students that is given in the input file. For each right-hand side formula that is encountered in the input file, write to the output file:\r<br> <br>&lt; left_formula &gt;==&lt; right_formula &gt;\r<br> <br>if the total number of occurrences of each distinct chemical element on the left-hand side equals to the total number of occurrences of this chemical element on the right-hand side. Otherwise write:\r<br> <br>&lt; left_formula &gt;!=&lt; right_formula &gt;\r<br> <br>Here &lt; left_formula &gt; must be replaced exactly (character by character) with the original left-hand side formula as it is given in the first line of the input file, and &lt; right_formula &gt; must be replaced exactly with each right-hand side formula as they are given in the input file. Do not place any spaces in the lines you write to the output file.\r<br/></br></br></br></br></br></br></br></br></div>', '<pre class="sio">C2H5OH+3O2+3(SiO2)\r\n7\r\n2CO2+3H2O+3SiO2\r\n2C+6H+13O+3Si\r\n99C2H5OH+3SiO2\r\n3SiO4+C2H5OH\r\nC2H5OH+3O2+3(SiO2)+Ge\r\n3(Si(O)2)+2CO+3H2O+O2\r\n2CO+3H2O+3O2+3Si</pre>', '<pre class="sio">C2H5OH+3O2+3(SiO2)==2CO2+3H2O+3SiO2\r\nC2H5OH+3O2+3(SiO2)==2C+6H+13O+3Si\r\nC2H5OH+3O2+3(SiO2)!=99C2H5OH+3SiO2\r\nC2H5OH+3O2+3(SiO2)==3SiO4+C2H5OH\r\nC2H5OH+3O2+3(SiO2)!=C2H5OH+3O2+3(SiO2)+Ge\r\nC2H5OH+3O2+3(SiO2)==3(Si(O)2)+2CO+3H2O+O2\r\nC2H5OH+3O2+3(SiO2)!=2CO+3H2O+3O2+3Si</pre>', '', 'Northeastern Europe 2001', '52.02%', '80.53%', '2016-06-16 16:31:04', 4, '动规', -0.980556363188244, 1.16751802746672),
(171, 'http://poj.org/problem?id=1115', '1115', 'Poj', ' 1000MS', ' 10000K', 'Statistical Trouble', '<div class="ptx" lang="en-US">Your team was hired by the international corporation ACM (Analytical Calculation Maxims). Every year ACM creates and conducts various surveys. Surveys themselves are simple forms with a list of questions and a list of possible answers for every question. Surveys are distributed around the globe, where field agents question the target group of people. All the answers are gathered in the ICPC (International Computation and Processing Center), where teams of well-paid analysts mine raw data in search for relevant correlations. The raw data for each individual survey consists of lots of lines of answers. Each line corresponds to every questioned person and for every question lists answers that the person has made on that particular survey.\r<br> <br>The first step of analysis that your team was hired to automate is to create cross tables that correlate answers on interesting pairs of questions. In its most simple way, given a pair of questions, cross table has a row for every possible answer on the first question, and has a column for every possible answer on the second question. Each cell of the cross table contains a number of lines in the raw data that has both answers for the corresponding questions at the same time.\r<br> <br>However, your task is complicated by the fact that you are to compute and output not only simple cross table values, but also total values for every row and column in the cross table (that is the sum of values in the corresponding row and column) that are placed in an additional last column and last row, as well as a percentage distributions for every row and column. Percentage distribution for a row is an additional number in every cell in that row that shows percent ratio of the value in that cell to the total value for that row, unless the total value is zero (in that case percentage distribution for this row is not defined). The same applies to the percentage distributions of columns. Thus, the cross table in your output will have at most three values in every cell (the value itself, row-wise percent, and column-wise percent). Please note, that percentage distributions also apply to totals. For example, in the total column for every row the row-wise percent will be always 100%, unless the total value for the row is zero (in that case row-wise percents are not defined), and column -wise percent shows percents ratio of the total value for this row to the total number of lines in the raw data (which is the value that can be found in the last column of the last row).\r<br> <br>Percents are rounded to integers on output. Percent that has a non-zero fractional part is rounded to either the smallest integer number greater than the resulting percent, or the largest integer number smaller than the resulting percent, in such a way, that the sums of all corresponding row-wise percents by row (without row totals) or column -wise percents by column (without column totals) are equal to 100% unless they are undefined. There are various rounding algorithms that produce results satisfying the above constraints. You are free to use any rounding algorithm as long as the above constraints are satisfied.</br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input consists of 3 sections: survey description, survey results, and cross table descriptions.\r<br> <br>The first line of the input contains the name of the survey, which is at most 100 characters long. Subsequent lines describe all the questions in the survey. On the first line of every question there is a 3-character question code (capital letters and digits only) followed by a space, and followed by the question name, which is at most 80 characters long. Each subsequent line for a question describes one possible answer on the question and starts with a space, followed by a single-character code for the answer (capital letter, digit, or character ''.'', ''*'', or ''@''), followed by a space and followed by an answer description, which is at most 40 characters long. The list of questions is terminated by the line with a single character ''#''. All answer codes are unique within the question, and all question codes are unique within the input file. There are at least 2 and at most 10 possible answers per question and at least 2 and at most 100 questions.\r<br> <br>Next lines in the input file describe survey results. Every line contains a character per question (in the order they appear in the input file) that gives the answer code for the corresponding question. The characters follow one another without any delimiters. This section is terminated by the line with a single character ''#''. There is at least one line with answers in the section and at most 10000 answers in total (the number of lines times the number of questions).\r<br> <br>Next lines in the input  describe cross tables that are to be created. Each cross table description occupies one line. That line contains the code for the first question, followed by a space, followed by the different code for the second question, followed by a space, and followed by the cross table name, which is at most 100 characters long. This section is terminated by the line with a single character ''#''. There are at most 100 cross table descriptions in the input file.\r<br> <br>The input has no trailing spaces on any line. All names do not start or end with a space, but may contain spaces.\r<br/></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Write to the output  a cross table for every cross table description in the input file in the order they appear in the input file. On the first line of the cross table write the survey name, followed by a space, followed by a ''-'' (dash) character, followed by a space, followed by the cross table name. Then write the description of the first question, and the description of the second question exactly as they appear in the input file and in the same format. Then write an empty line, followed by the table itself.\r<br> <br>The table contains exactly 1+3*(N1+1) lines and exactly 6*(N2+2) characters on every line, where N1 is the number of possible answers for the first question, and N2 is the number of possible answers for the second question. The table has one line for column headings, and N1+1 rows (3 lines per row). The first N1 of these rows correspond to the answers on the first question in the order they appear in the input file, and the last row is for column totals. The table also has N2+2 columns, where each column is 6 characters wide. The first column is for row headings; the subsequent N2 columns correspond to the answers on the second question in the order they appear in the input file, and the last column is for row totals. All information in the cells (including headings) is aligned to the right and is padded on the left with spaces to become 6 characters wide.\r<br> <br>The heading for the first column is empty. The headings for the subsequent N2 columns are composed from the second question code, followed by a '':'' (colon) character, and followed by the corresponding answer code. The heading for the last column is the string "TOTAL" (without quotes). The headings for the first N1 3-line rows of the cross table are composed from the first question code, followed by a '':'' (colon) character, and followed by the corresponding answer code. The heading for the last row is the string "TOTAL" (without quotes). Row headings are situated on the first line of the corresponding row. The subsequent 2 lines in the heading column of every row must be blank.\r<br> <br>All non-heading cells in the table contain computed values and percents. On the first line of every cell the corresponding cross table integer value is situated. The second line contains properly rounded to integers row-wise percent, with a mandatory trailing ''%'' (percent) character, or a single ''-'' (dash) character if the corresponding row-wise percent is not defined. The third line contains column -wise percent in the same format. All cross tables in the output file must be separated by a single empty line.\r<br/></br></br></br></br></br></br></div>', '<pre class="sio">New Year Phone Survey for ACM ICPC\r\nQ01 Hello!\r\n H Hello!\r\n Y Yes!\r\n * Uhm...\r\n . (silence)\r\n @ (other)\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\nBYE Happy New Year!\r\n Y You too.\r\n * (censored)\r\n @ (other)\r\n . (hang up)\r\n#\r\n.@.\r\nHH@\r\n.@.\r\nYFY\r\nHQ*\r\nH@.\r\nYYY\r\n.H@\r\nHFY\r\nHH@\r\n#\r\nQ01 Q02 Health vs greeting style\r\nQ02 BYE Politeness matrix\r\n#\r\n</pre>', '<pre class="sio">New Year Phone Survey for ACM ICPC - Health vs greeting style\r\nQ01 Hello!\r\n H Hello!\r\n Y Yes!\r\n * Uhm...\r\n . (silence)\r\n @ (other)\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\n\r\n       Q02:H Q02:Y Q02:F Q02:Q Q02:@ TOTAL\r\n Q01:H     2     0     1     1     1     5\r\n         40%    0%   20%   20%   20%  100%\r\n         66%    0%   50%  100%   33%   50%\r\n Q01:Y     0     1     1     0     0     2\r\n          0%   50%   50%    0%    0%  100%\r\n          0%  100%   50%    0%    0%   20%\r\n Q01:*     0     0     0     0     0     0\r\n           -     -     -     -     -     -\r\n          0%    0%    0%    0%    0%    0%\r\n Q01:.     1     0     0     0     2     3\r\n         33%    0%    0%    0%   67%  100%\r\n         34%    0%    0%    0%   67%   30%\r\n Q01:@     0     0     0     0     0     0\r\n           -     -     -     -     -     -\r\n          0%    0%    0%    0%    0%    0%\r\n TOTAL     3     1     2     1     3    10\r\n         30%   10%   20%   10%   30%  100%\r\n        100%  100%  100%  100%  100%  100%\r\n\r\nNew Year Phone Survey for ACM ICPC - Politeness matrix\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\nBYE Happy New Year!\r\n Y You too.\r\n * (censored)\r\n @ (other)\r\n . (hang up)\r\n\r\n       BYE:Y BYE:* BYE:@ BYE:. TOTAL\r\n Q02:H     0     0     3     0     3\r\n          0%    0%  100%    0%  100%\r\n          0%    0%  100%    0%   30%\r\n Q02:Y     1     0     0     0     1\r\n        100%    0%    0%    0%  100%\r\n         33%    0%    0%    0%   10%\r\n Q02:F     2     0     0     0     2\r\n        100%    0%    0%    0%  100%\r\n         67%    0%    0%    0%   20%\r\n Q02:Q     0     1     0     0     1\r\n          0%  100%    0%    0%  100%\r\n          0%  100%    0%    0%   10%\r\n Q02:@     0     0     0     3     3\r\n          0%    0%    0%  100%  100%\r\n          0%    0%    0%  100%   30%\r\n TOTAL     3     1     3     3    10\r\n         30%   10%   30%   30%  100%\r\n        100%  100%  100%  100%  100%\r\n</pre>', '', 'Northeastern Europe 2001', '36.63%', '56.07%', '2016-06-16 16:31:04', 19, '二叉树', -0.993428645695053, -0.110651801602715),
(172, 'http://poj.org/problem?id=1116', '1116', 'Poj', ' 1000MS', ' 10000K', 'Library', '<div class="ptx" lang="en-US">Castaway Robinson Crusoe is living alone on a remote island. One day a ship carrying a royal library has wrecked nearby. Usually Robinson brings any useful stuff from the shipwreck to his island, and this time he has brought a big chest with books.\r<br> <br>Robinson has decided to build a bookcase for these books to create his own library. He cut a rectangular niche in the rock for that purpose, hammered in wooden pegs, and placed wooden planks on every pair of pegs that have the same height, so that all planks are situated horizontally and suit to act as shelves.\r<br> <br>Unfortunately, Robinson has discovered that one especially old and big tome does not fit in his bookcase. He measured the height and width of this tome and has decided to redesign his bookcase in such a way, as to completely fit the tome on one of the shelves, taking into account locations of other shelves and the dimensions of the niche. With each shelf in the bookcase, one of the following operations should be made:\r<br><center><img src="http://poj.org/images/1116/1116_1.gif"/></center> <br>1. Leave the shelf on its original place.\r<br> <br>2. Move the shelf to the left or to the right.\r<br> <br>3. Shorten the shelf by cutting off a part of the plank and optionally move it to the left or to the right.\r<br> <br>4. Move one of the pegs to a different place at the same height and move the shelf to the left or to the right.\r<br> <br>5. Shorten the shelf by cutting off a part of the plank, move one of the pegs to a different place at the same height, and optionally move the shortened shelf to the left or to the right.\r<br> <br>6. Remove the shelf from the bookcase along with both supporting pegs.\r<br> <br>We say that the shelf is properly supported by its pegs, if exactly two distinct pegs support the shelf and the center of the shelf is between its pegs or coincides with one of the pegs. The original design of Robinson''s library has all the shelves properly supported by their pegs and lengths of all shelves are integer number of inches. The Robinson may only cut an integer number of inches from the planks, because he has no tools for more precise measurements. All remaining shelves after the redesign must be properly supported by their pegs.\r<br> <br>You are to find the way to redesign Robinson''s library to fit the special old tome without changing original design too much. You have to minimize the number of pegs that are to be removed from their original places during the redesign (operations 4 and 5 remove one peg, and operation 6 removes two pegs). If there are different ways to solve the problem, then you are to find the one that minimizes the total length of planks that are to be cut off (operations 3 and 5 involve cutting something from the planks, and operation 6 counts as if cutting off the whole plank). Width of planks and diameter of pegs shall be considered zero.\r<br> <br>The tome may not be rotated. The tome should completely (to all its width) stand on one of the shelves and may only touch other shelves, their pegs or niche''s edge.\r<br/></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of the input file contains four integer numbers XN, YN, XT, and YT, separated by spaces. They are, correspondingly, width and height of the niche, and width and height of the old tome in inches (1 &lt;= XN, YN, XT, YT &lt;= 1000).\r<br> <br>The second line of the input file contains a single integer number N (1 &lt;= N &lt;= 100) that represents the number of the shelves. Then N lines follow. Each line represents a single shelf along with its two supporting pegs, and contains five integer numbers yi, xi, li, x1i, x2i, separated by spaces, where:\r<br> <br>?yi (0 &lt; yi &lt; YN) - the height of the ith shelf above the bottom of the niche in inches.\r<br>?xi (0 &lt;= xi &lt; XN) - the distance between the left end of the ith shelf and the left edge of the niche in inches.\r<br>?li (0 &lt; li &lt;= XN - xi) - the length of the ith shelf in inches.\r<br>?x1i (0 &lt;= x1i &lt;= li/2) - the distance between the left end of the ith shelf and its leftmost supporting peg in inches.\r<br>?x2i (li/2 &lt;= x2i &lt;= li; x1i &lt; x2i) - the distance between the left end of the ith shelf and its rightmost supporting peg in inches.\r<br> <br>All shelves are situated on different heights and are properly supported by their pegs. The problem is guaranteed to have a solution for the input data.\r<br/></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The output file shall contain two integer numbers separated by a space. The first one is the minimal number of pegs that are to be removed by Robinson from their original locations to place the tome. The second one is the minimal total length of planks in inches that are to be cut off during the redesign that removes the least number of pegs.</div>', '<pre class="sio">11 8 4 6\r\n4\r\n1 1 7 1 4\r\n4 3 7 1 6\r\n7 2 6 3 4\r\n2 0 3 0 3</pre>', '<pre class="sio">1 3</pre>', '', 'Northeastern Europe 2001', '34.40%', '72.48%', '2016-06-16 16:31:04', 19, '二叉树', -0.977284207340925, -0.295857696263199);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(173, 'http://poj.org/problem?id=1117', '1117', 'Poj', ' 1000MS', ' 10000K', 'Pairs of Integers', '<div class="ptx" lang="en-US">You are to find all pairs of integers such that their sum is equal to the given integer number N and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit.</div>', '<div class="ptx" lang="en-US">The input file consists of a single integer N (10 &lt;= N &lt;= 10^9).</div>', '<div class="ptx" lang="en-US">On the first line of the output file write the total number of different pairs of integers that satisfy the problem statement. On the following lines write all those pairs. Write one pair on a line in ascending order of the first integer in the pair. Each pair must be written in the following format:\r<br> <br>X + Y = N\r<br> <br>Here X, Y, and N, must be replaced with the corresponding integer numbers. There should be exactly one space on both sides of ''+'' and ''='' characters.</br></br></br></br></div>', '<pre class="sio">302</pre>', '<pre class="sio">5\r\n251 + 51 = 302\r\n275 + 27 = 302\r\n276 + 26 = 302\r\n281 + 21 = 302\r\n301 + 01 = 302</pre>', '', 'Northeastern Europe 2001', '25.30%', '73.75%', '2016-06-16 16:31:04', 17, '树的DFS', -0.895128757223935, -1.05163062963109),
(174, 'http://poj.org/problem?id=1118', '1118', 'Poj', ' 2000MS', ' 32768K', 'Lining Up', '<div class="ptx" lang="en-US">"How am I ever going to solve this problem?" said the pilot. \r<br> <br>Indeed, the pilot was not facing an easy task. She had to drop packages at specific points scattered in a dangerous area. Furthermore, the pilot could only fly over the area once in a straight line, and she had to fly over as many points as possible. All points were given by means of integer coordinates in a two-dimensional space. The pilot wanted to know the largest number of points from the given set that all lie on one line. Can you write a program that calculates this number? \r<br> <br> <br>Your program has to be efficient! \r<br/></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Input consist several case,First line of the each case is an integer N ( 1 &lt; N &lt; 700 ),then follow N pairs of integers. Each pair of integers is separated by one blank and ended by a new-line character. The input ended by N=0.</div>', '<div class="ptx" lang="en-US">output one integer for each input case ,representing the largest number of points that all lie on one line. </div>', '<pre class="sio">5\r\n1 1\r\n2 2\r\n3 3\r\n9 10\r\n10 11\r\n0</pre>', '<pre class="sio">3</pre>', '', 'East Central North America 1994', '31.34%', '86.82%', '2016-06-16 16:31:04', 21, '排序', -0.333534868948914, -0.549996726604491),
(175, 'http://poj.org/problem?id=1155', '1155', 'Poj', ' 1000MS', ' 65536K', 'TELE', '<div class="ptx" lang="en-US">A TV-network plans to broadcast an important football match. Their network of transmitters and users can be represented as a tree. The root of the tree is a transmitter that emits the football match, the leaves of the tree are the potential users and other vertices in the tree are relays (transmitters).\r<br>The price of transmission of a signal from one transmitter to another or to the user is given. A price of the entire broadcast is the sum of prices of all individual signal transmissions.\r<br>Every user is ready to pay a certain amount of money to watch the match and the TV-network then decides whether or not to provide the user with the signal.\r<br>Write a program that will find the maximal number of users able to watch the match so that the TV-network''s doesn''t lose money from broadcasting the match.</br></br></br></div>', '<div class="ptx" lang="en-US">The first line of the input file contains two integers N and M, 2 &lt;= N &lt;= 3000, 1 &lt;= M &lt;= N-1, the number of vertices in the tree and the number of potential users.\r<br>The root of the tree is marked with the number 1, while other transmitters are numbered 2 to N-M and potential users are numbered N-M+1 to N.\r<br>The following N-M lines contain data about the transmitters in the following form:\r<br>K A1 C1 A2 C2 ... AK CK\r<br>Means that a transmitter transmits the signal to K transmitters or users, every one of them described by the pair of numbers A and C, the transmitter or user''s number and the cost of transmitting the signal to them.\r<br>The last line contains the data about users, containing M integers representing respectively the price every one of them is willing to pay to watch the match.</br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first and the only line of the output file should contain the maximal number of users described in the above text.</div>', '<pre class="sio">9 6\r\n3 2 2 3 2 9 3\r\n2 4 2 5 2\r\n3 6 2 7 2 8 2\r\n4 3 3 3 1 1</pre>', '<pre class="sio">5</pre>', '', 'Croatia OI 2002 Final Exam - Second Day', '54.50%', '93.55%', '2016-06-16 16:31:04', 19, '二叉树', -0.874116649014291, 1.37348691480215),
(176, 'http://poj.org/problem?id=1156', '1156', 'Poj', ' 20000MS', ' 65536K', 'A STRIP OF LAND', '<div class="ptx" lang="en-US">The residents of Dingilville are trying to locate a region to build an airport. The map of the land is at hand. The map is a rectangular grid of unit squares, each identified by a pair of coordinates (x,y), where x is the horizontal (west-east) and y is the vertical (south-north) coordinate. The height of every square is shown on the map. \r<br> <br>Your task is to find a rectangular region of squares with the largest area (i.e. a rectangular region consisting of the largest number of squares) such that \r<br>1.the height difference between the highest and the lowest squares of the region is less than or equal to a given limit C, and \r<br>2.the width (i.e. the number of squares along the west-east direction) of the region is at most 100.\r<br> <br>In case there is more than one such region you are required to report only one of them.</br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line contains three integers: U, V and C. \r<br>Each of the following V lines contains the integers Hxy for x = 1,...,U. More specifically, Hxy occurs as the x''th number on the (V-y+2)''th input line. \r<br>a.1 &lt;= U &lt;= 700, 1 &lt;= V &lt;= 700 where U and V designate the dimensions of the map. More specifically, U is the number of squares in the west-east direction, and V, in the south-north direction. \r<br>b.0 &lt;= C &lt;= 10\r<br>c.-30,000 &lt;= Hxy  &lt;= 30,000 where the integer Hxy is the height of the square at coordinates (x, y), 1 &lt;= x &lt;= U, 1 &lt;= y &lt;= V.\r<br>d.The southwest corner square of the map has the coordinates (1,1) and the northeast corner has the coordinates (U,V).</br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Output the largest area.</div>', '<pre class="sio">10 15 4\r\n41 40 41 38 39 39 40 42 40 40\r\n39 40 43 40 36 37 35 39 42 42\r\n44 41 39 40 38 40 41 38 35 37\r\n38 38 33 39 36 37 32 36 38 40\r\n39 40 39 39 39 40 40 41 43 41\r\n39 40 41 38 39 38 39 39 39 42\r\n36 39 39 39 39 40 39 41 40 41\r\n31 37 36 41 41 40 39 41 40 40\r\n40 40 40 42 41 40 39 39 39 39\r\n42 40 44 40 38 40 39 39 37 41\r\n41 41 40 39 39 40 41 40 39 40\r\n47 45 49 43 43 41 41 40 39 42\r\n42 41 41 39 40 39 42 40 42 42\r\n41 44 49 43 46 41 42 41 42 42\r\n45 40 42 42 46 42 44 40 42 41</pre>', '<pre class="sio">35</pre>', '', 'IOI 1999', '29.62%', '77.80%', '2016-06-16 16:31:04', 4, '动规', -0.817408295197528, -0.692846116208092),
(177, 'http://poj.org/problem?id=1157', '1157', 'Poj', ' 1000MS', ' 10000K', 'LITTLE SHOP OF FLOWERS', '<div class="ptx" lang="en-US">You want to arrange the window of your flower shop in a most pleasant way. You have F bunches of flowers, each being of a different kind, and at least as many vases ordered in a row. The vases are glued onto the shelf and are numbered consecutively 1 through V, where V is the number of vases, from left to right so that the vase 1 is the leftmost, and the vase V is the rightmost vase. The bunches are moveable and are uniquely identified by integers between 1 and F. These id-numbers have a significance: They determine the required order of appearance of the flower bunches in the row of vases so that the bunch i must be in a vase to the left of the vase containing bunch j whenever i &lt; j. Suppose, for example, you have bunch of azaleas (id-number=1), a bunch of begonias (id-number=2) and a bunch of carnations (id-number=3). Now, all the bunches must be put into the vases keeping their id-numbers in order. The bunch of azaleas must be in a vase to the left of begonias, and the bunch of begonias must be in a vase to the left of carnations. If there are more vases than bunches of flowers then the excess will be left empty. A vase can hold only one bunch of flowers.\r<br> <br>Each vase has a distinct characteristic (just like flowers do). Hence, putting a bunch of flowers in a vase results in a certain aesthetic value, expressed by an integer. The aesthetic values are presented in a table as shown below. Leaving a vase empty has an aesthetic value of 0.\r<br><table border="1" cellpadding="7" cellspacing="0"> <tbody> <tr> <td colspan="2" rowspan="2" valign="top"> </td> <td colspan="5"><b> <p align="center">V A S E S</p></b></td></tr></tbody></table></br></br></br></div>', '<div class="ptx" lang="en-US"><ul> <li>The first line contains two numbers: <i>F</i>, <i>V</i>.         <li>The following <i>F</i> lines: Each of these lines contains <i>V</i>         integers, so that <i>A<sub>ij</sub></i> is given as the         <i>j<sup>th</sup></i> number on the (<i>i</i>+1)<sup><i>st</i></sup>         line of the input file. </li></li></ul> <br><ul> <br><li>1 &lt;= F &lt;= 100 where F is the number of the bunches of flowers. The bunches are numbered 1 through F. \r<br><li>F &lt;= V &lt;= 100 where V is the number of vases. \r<br><li>-50 &lt;= Aij &lt;= 50 where Aij is the aesthetic value obtained by putting the flower bunch i into the vase j. </li></br></li></br></li></br></ul></br></div>', '<div class="ptx" lang="en-US">The first line will contain the sum of aesthetic values for your arrangement. </div>', '<pre class="sio">3 5\r\n7 23 -5 -24 16\r\n5 21 -4 10 23\r\n-21 5 -4 -20 20</pre>', '<pre class="sio">53</pre>', '', 'IOI 1999', '46.15%', '95.58%', '2016-06-16 16:31:04', 4, '动规', -0.448222579266936, 0.68000295945908),
(178, 'http://poj.org/problem?id=1158', '1158', 'Poj', ' 1000MS', ' 10000K', 'TRAFFIC LIGHTS', '<div class="ptx" lang="en-US">In the city of Dingilville the traffic is arranged in an unusual way. There are junctions and roads connecting the junctions. There is at most one road between any two different junctions. There is no road connecting a junction to itself. Travel time for a road is the same for both directions. At every junction there is a single traffic light that is either blue or purple at any moment. The color of each light alternates periodically: blue for certain duration and then purple for another duration. Traffic is permitted to travel down the road between any two junctions, if and only if the lights at both junctions are the same color at the moment of departing from one junction for the other. If a vehicle arrives at a junction just at the moment the lights switch it must consider the new colors of lights. Vehicles are allowed to wait at the junctions. You are given the city map which shows \r<br> <br>the travel times for all roads (integers), \r<br>the durations of the two colors at each junction (integers) \r<br>and the initial color of the light and the remaining time (integer) for this color to change at each junction. \r<br>Your task is to find a path which takes the minimum time from a given source junction to a given destination junction for a vehicle when the traffic starts. In case more than one such path exists you are required to report only one of them.\r<br/></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line contains two numbers: The id-number of the source junction and the id-number of the destination junction. \r<br>The second line contains two numbers: N, M. \r<br>The following N lines contain information on N junctions. The (i+2)’th line of the input file holds information about the junction i : Ci, ric, tiB, tiP where Ci is either ‘B’ or ‘P’, indicating the initial color of the light at the junction i. \r<br>Finally, the next M lines contain information on M roads. Each line is of the form: i, j, lij where i and j are the id-numbers of the junctions which are connected by this road . \r<br> <br>2 &lt;= N &lt;=300 where N is the number of junctions. The junctions are identified by integers 1 through N. These numbers are called id-numbers. \r<br>1 &lt;=M &lt;=14,000 where M is the number of roads. \r<br>1 &lt;= lij &lt;= 100 where lij is the time required to move from junction i to j using the road that connects i and j. \r<br>1 &lt;= tic &lt;= 100 where tic is the duration of the color c for the light at the junction i. The index c is either B for blue or P for purple. \r<br>1 &lt;= ric &lt;= tic where ric is the remaining time for the initial color c at junction i. \r<br>The first line contains two numbers: The id-number of the source junction and the id-number of the destination junction. \r<br>The second line contains two numbers: N, M. \r<br>The following N lines contain information on N junctions. The (i+2)’th line of the input file holds information about the junction i : Ci, ric, tiB, tiP where Ci is either ‘B’ or ‘P’, indicating the initial color of the light at the junction i. \r<br>Finally, the next M lines contain information on M roads. Each line is of the form: i, j, lij where i and j are the id-numbers of the junctions which are connected by this road . </br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">If a path exists: \r<br> <br>The first line will contain the time taken by a minimum-time path from the source junction to the destination junction. \r<br> <br>If a path does not exist:\r<br> <br>A single line containing only the integer 0. </br></br></br></br></br></br></div>', '<pre class="sio">1 4\r\n4 5\r\nB 2 16 99\r\nP 6 32 13\r\nP 2 87 4\r\nP 38 96 49\r\n1 2 4\r\n1 3 40\r\n2 3 75\r\n2 4 76\r\n3 4 77</pre>', '<pre class="sio">127</pre>', '', 'IOI 1999', '41.70%', '87.81%', '2016-06-16 16:31:04', 4, '动规', -0.801507240336175, 0.310421689845111),
(179, 'http://poj.org/problem?id=1159', '1159', 'Poj', ' 3000MS', ' 65536K', 'Palindrome', '<div class="ptx" lang="en-US">A palindrome is a symmetrical string, that is, a string read identically from left to right as well as from right to left.  You are to write a program which, given a string, determines the minimal number of characters to be inserted into the string in order to obtain a palindrome.\r<br> <br>As an example, by inserting 2 characters, the string "Ab3bd" can be transformed into a palindrome ("dAb3bAd" or "Adb3bdA"). However, inserting fewer than 2 characters does not produce a palindrome.\r<br/></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains one integer: the length of the input string N, 3 &lt;= N &lt;= 5000. The second line contains one string with length N. The string is formed from uppercase letters from ''A'' to ''Z'', lowercase letters from ''a'' to ''z'' and digits from ''0'' to ''9''. Uppercase and lowercase letters are to be considered distinct. </div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The first line contains one integer, which is the desired minimal number.</div>', '<pre class="sio">5\r\nAb3bd</pre>', '<pre class="sio">2</pre>', '', 'IOI 2000', '34.78%', '90.90%', '2016-06-16 16:31:04', 4, '动规', 0.607575012394516, -0.264297947397287),
(180, 'http://poj.org/problem?id=1160', '1160', 'Poj', ' 1000MS', ' 10000K', 'Post Office', '<div class="ptx" lang="en-US">There is a straight highway with villages alongside the highway. The highway is represented as an integer axis, and the position of each village is identified with a single integer coordinate. There are no two villages in the same position. The distance between two positions is the absolute value of the difference of their integer coordinates.\r<br> <br>Post offices will be built in some, but not necessarily all of the villages. A village and the post office in it have the same position. For building the post offices, their positions should be chosen so that the total sum of all distances between each village and its nearest post office is minimum.\r<br> <br>You are to write a program which, given the positions of the villages and the number of post offices, computes the least possible sum of all distances between each village and its nearest post office. \r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains two integers: the first is the number of villages V, 1 &lt;= V &lt;= 300, and the second is the number of post offices P, 1 &lt;= P &lt;= 30, P &lt;= V. The second line contains V integers in increasing order. These V integers are the positions of the villages. For each position X it holds that 1 &lt;= X &lt;= 10000.</div>', '<div class="ptx" lang="en-US">The first line contains one integer S, which is the sum of all distances between each village and its nearest post office. </div>', '<pre class="sio">10 5\r\n1 2 3 6 7 9 11 22 44 50</pre>', '<pre class="sio">9</pre>', '', 'IOI 2000', '53.75%', '93.92%', '2016-06-16 16:31:04', 4, '动规', -0.503497674737353, 1.31119793677732),
(181, 'http://poj.org/problem?id=1161', '1161', 'Poj', ' 1000MS', ' 10000K', 'Walls', '<div class="ptx" lang="en-US">In a country, great walls have been built in such a way that every great wall connects exactly two towns. The great walls do not cross each other. Thus, the country is divided into such regions that to move from one region to another, it is necessary to go through a town or cross a great wall. For any two towns A and B, there is at most one great wall with one end in A and the other in B, and further, it is possible to go from A to B by always walking in a town or along a great wall. The input format implies additional restrictions. \r<br> <br>There is a club whose members live in the towns. In each town, there is only one member or there are no members at all. The members want to meet in one of the regions (outside of any town). The members travel riding their bicycles. They do not want to enter any towns, because of the traffic, and they want to cross as few great walls as possible, as it is a lot of trouble. To go to the meeting region, each member needs to cross a number (possibly 0) of great walls. They want to find such an optimal region that the sum of these numbers (crossing-sum, for short) is minimized.\r<br><center><img src="http://poj.org/images/1161_1.jpg"/></center> <br>The towns are labeled with integers from 1 to N, where N is the number of towns. In Figure 1, the labeled nodes represent the towns and the lines connecting the nodes represent the great walls. Suppose that there are three members, who live in towns 3, 6, and 9. Then, an optimal meeting region and respective routes for members are shown in Figure 2. The crossing-sum is 2: the member from town 9 has to cross the great wall between towns 2 and 4, and the member from town 6 has to cross the great wall between towns 4 and 7.\r<br> <br>You are to write a program which, given the towns, the regions, and the club member home towns, computes the optimal region(s) and the minimal crossing-sum.\r<br/></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains one integer: the number of regions M, 2 &lt;= M &lt;= 200. The second line contains one integer: the number of towns N, 3 &lt;= N &lt;= 250. The third line contains one integer: the number of club members L, 1 &lt;= L &lt;= 30, L &lt;= N. The fourth line contains L distinct integers in increasing order: the labels of the towns where the members live.\r<br> <br>After that the input contains 2M lines so that there is a pair of lines for each region: the first two of the 2M lines describe the first region, the following two the second and so on. Of the pair, the first line shows the number of towns I on the border of that region. The second line of the pair contains I integers: the labels of these I towns in some order in which they can be passed when making a trip clockwise along the border of the region, with the following exception. The last region is the "outside region" surrounding all towns and other regions, and for it the order of the labels corresponds to a trip in counterclockwise direction. The order of the regions gives an integer labeling to the regions: the first region has label 1, the second has label 2, and so on. Note that the input includes all regions formed by the towns and great walls, including the "outside region".\r<br/></br></br></div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The first line contains one integer: the minimal crossing-sum. </div>', '<pre class="sio">10\r\n10\r\n3\r\n3 6 9 \r\n3\r\n1 2 3 \r\n3\r\n1 3 7 \r\n4\r\n2 4 7 3 \r\n3\r\n4 6 7 \r\n3\r\n4 8 6 \r\n3\r\n6 8 7 \r\n3\r\n4 5 8 \r\n4\r\n7 8 10 9 \r\n3\r\n5 10 8 \r\n7\r\n7 9 10 5 4 2 1</pre>', '<pre class="sio">2</pre>', '', 'IOI 2000', '48.37%', '88.69%', '2016-06-16 16:31:04', 12, 'Floyd', -0.790122301396329, 0.864378334412566),
(182, 'http://poj.org/problem?id=1162', '1162', 'Poj', ' 1000MS', ' 10000K', 'Building with Blocks', '<div class="ptx" lang="en-US">A unit cube is a 1x1x1 cube, whose corners have integer x, y, and z coordinates. Two unit cubes are connected when they share a face. A 3-dimensional solid object (solid, for short) is a non-empty connected set of unit cubes (see Figure 1). The volume of a solid is the number of unit cubes it contains. A block is a solid with volume at most 4. Two blocks have the same type when one can be obtained from the other by translations and rotations (not reflections). There are exactly 12 block types (see Figure 2). The colors in the figures only help to clarify the structure of the solids; they have no other meaning.\r<br><center><img src="http://poj.org/images/1162_1.jpg"/></center> <br>A set D of blocks is a decomposition of a solid S when the union of all blocks in D equals S, and no two distinct blocks in D have a unit cube in common.\r<br> <br>Your task is to write a program that, given a description of a solid S, determines a smallest set of blocks into which S can be decomposed. It only needs to report the types of these blocks as often as they occur in the decomposition.\r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains the volume V of the solid (1  &lt;=  V  &lt;=  50). The remaining V lines contain three integers x, y, z, being the coordinate triple of its corner that minimizes x + y + z, each identifying one unit cube of the solid (1  &lt;=  x, y, z  &lt;=  7).</div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The first line must contain one integer M, being the smallest number of blocks into which the input solid can be decomposed. </div>', '<pre class="sio">18\r\n2 1 1\r\n4 1 1 \r\n2 3 1 \r\n4 3 1\r\n2 1 2\r\n3 1 2\r\n4 1 2 \r\n1 2 2 \r\n2 2 2\r\n3 2 2\r\n4 2 2\r\n2 3 2\r\n3 3 2 \r\n4 3 2\r\n4 2 3\r\n4 2 4\r\n4 2 5\r\n5 2 5</pre>', '<pre class="sio">5</pre>', '', 'IOI 2000', '38.68%', '66.24%', '2016-06-16 16:31:04', 4, '动规', -0.98937225414879, 0.0596047383318099),
(183, 'http://poj.org/problem?id=1163', '1163', 'Poj', ' 1000MS', ' 10000K', 'The Triangle', '<div class="ptx" lang="en-US"><center><pre>7<br>3   8<br>8   1   0<br>2   7   4   4<br>4   5   2   6   5<br><br>(Figure 1)</br></br></br></br></br></br></pre></center>Figure 1 shows a number triangle. Write a program that calculates the highest sum of numbers passed on a route that starts at the top and ends somewhere on the base. Each step can go either diagonally down to the left or diagonally down to the right. \r<br/></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains one integer N: the number of rows in the triangle. The following N lines describe the data of the triangle. The number of rows in the triangle is &gt; 1 but &lt;= 100. The numbers in the triangle, all integers, are between 0 and 99. </div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The highest sum is written as an integer.</div>', '<pre class="sio">5\r\n7\r\n3 8\r\n8 1 0 \r\n2 7 4 4\r\n4 5 2 6 5</pre>', '<pre class="sio">30</pre>', '', 'IOI 1994', '60.34%', '96.53%', '2016-06-16 16:31:04', 4, '动规', 0.191524452799428, 1.8585104236888),
(184, 'http://poj.org/problem?id=1164', '1164', 'Poj', ' 1000MS', ' 10000K', 'The Castle', '<div class="ptx" lang="en-US"><center><pre>     1   2   3   4   5   6   7  \r<br>   #############################\r<br> 1 #   |   #   |   #   |   |   #\r<br>   #####---#####---#---#####---#\r<br> 2 #   #   |   #   #   #   #   #\r<br>   #---#####---#####---#####---#\r<br> 3 #   |   |   #   #   #   #   #\r<br>   #---#########---#####---#---#\r<br> 4 #   #   |   |   |   |   #   #\r<br>   #############################\r<br>(Figure 1)\r<br>\r<br>#  = Wall   \r<br>|  = No wall\r<br>-  = No wall</br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></center> <br>Figure 1 shows the map of a castle.Write a program that calculates\r<br>1. how many rooms the castle has\r<br>2. how big the largest room is\r<br>The castle is divided into m * n (m&lt;=50, n&lt;=50) square modules. Each such module can have between zero and four walls. \r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains the number of modules in the north-south direction and the number of modules in the east-west direction. In the following lines each module is described by a number (0 &lt;= p &lt;= 15). This number is the sum of: 1 (= wall to the west), 2 (= wall to the north), 4 (= wall to the east), 8 (= wall to the south). Inner walls are defined twice; a wall to the south in module 1,1 is also indicated as a wall to the north in module 2,1. The castle always has at least two rooms.</div>', '<div class="ptx" lang="en-US">Your program is to write to standard output: First the number of rooms, then the area of the largest room (counted in modules).</div>', '<pre class="sio">4\r\n7\r\n11 6 11 6 3 10 6\r\n7 9 6 13 5 15 5\r\n1 10 12 7 13 7 5\r\n13 11 10 8 10 12 13</pre>', '<pre class="sio">5\r\n9</pre>', '', 'IOI 1994', '55.84%', '93.96%', '2016-06-16 16:31:04', 17, '树的DFS', -0.803968117874241, 1.48477655553984),
(185, 'http://poj.org/problem?id=1165', '1165', 'Poj', ' 1000MS', ' 10000K', 'The Primes', '<div class="ptx" lang="en-US"><center><pre>\r<br>|---|---|---|---|---|\r<br>| 1 | 1 | 3 | 5 | 1 |\r<br>|---|---|---|---|---|\r<br>| 3 | 3 | 2 | 0 | 3 |\r<br>|---|---|---|---|---|\r<br>| 3 | 0 | 3 | 2 | 3 |\r<br>|---|---|---|---|---|\r<br>| 1 | 4 | 0 | 3 | 3 |\r<br>|---|---|---|---|---|\r<br>| 3 | 3 | 3 | 1 | 1 |\r<br>|---|---|---|---|---|\r<br>(Figure 1)</br></br></br></br></br></br></br></br></br></br></br></br></pre></center> <br>Figure 1 shows a square. Each row, each column and the two diagonals can be read as a five digit prime number. The rows are read from left to right. The columns are read from top to bottom. Both diagonals are read from left to right. Write a program that constructs such squares:\r<br><ul> <br><li>	The prime numbers must have the same digit sum (11 in the example). \r<br><li>	The digit in the top left-hand corner of the square is pre-determined (1 in the example). \r<br><li>	A prime number may be used more than once in the same square. \r<br><li>	If there are several solutions, all must be presented. \r<br><li>	A five digit prime number cannot begin with zeros, ie 00003 is NOT a five digit prime number. </li></br></li></br></li></br></li></br></li></br></ul> <br> <br/></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. First the digit sum of prime numbers and then the digit in the top left-hand corner of the square. The file contains two lines. There will always be a solution to the given test data.</div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. Output five lines for each solution found, where each line in turn consists of a five digit prime number. The solutions are sorted by the prime in the first row, then by the prime in the second row,etc. Output a blank line after each solution.</div>', '<pre class="sio">11\r\n1</pre>', '<pre class="sio">11351\r\n14033\r\n30323\r\n53201\r\n13313\r\n\r\n11351\r\n33203\r\n30323\r\n14033\r\n33311\r\n\r\n13313\r\n13043\r\n32303\r\n50231\r\n13331\r\n</pre>', '', 'IOI 1994', '42.09%', '80.79%', '2016-06-16 16:31:04', 17, '树的DFS', -0.946347461148089, 0.342811958418021),
(186, 'http://poj.org/problem?id=1166', '1166', 'Poj', ' 1000MS', ' 65536K', 'The Clocks', '<div class="ptx" lang="en-US"><center><pre>|-------|    |-------|    |-------|\r<br>|       |    |       |    |   |   |\r<br>|---O   |    |---O   |    |   O   |\r<br>|       |    |       |    |       |\r<br>|-------|    |-------|    |-------|\r<br>    A            B            C    \r<br>\r<br>|-------|    |-------|    |-------|\r<br>|       |    |       |    |       |\r<br>|   O   |    |   O   |    |   O   |\r<br>|   |   |    |   |   |    |   |   |\r<br>|-------|    |-------|    |-------|\r<br>    D            E            F    \r<br>\r<br>|-------|    |-------|    |-------|\r<br>|       |    |       |    |       |\r<br>|   O   |    |   O---|    |   O   |\r<br>|   |   |    |       |    |   |   |\r<br>|-------|    |-------|    |-------|\r<br>    G            H            I    \r<br>(Figure 1)</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></center> <br>There are nine clocks in a 3*3 array (figure 1). The goal is to return all the dials to 12 o''clock with as few moves as possible. There are nine different allowed ways to turn the dials on the clocks. Each such way is called a move. Select for each move a number 1 to 9. That number will turn the dials 90'' (degrees) clockwise on those clocks which are affected according to figure 2 below. \r<br><pre>Move   Affected clocks\r<br> \r<br> 1         ABDE\r<br> 2         ABC\r<br> 3         BCEF\r<br> 4         ADG\r<br> 5         BDEFH\r<br> 6         CFI\r<br> 7         DEGH\r<br> 8         GHI\r<br> 9         EFHI    \r<br>   (Figure 2)</br></br></br></br></br></br></br></br></br></br></br></pre></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. Nine numbers give the start positions of the dials. 0=12 o''clock, 1=3 o''clock, 2=6 o''clock, 3=9 o''clock.</div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. Output a shortest sorted sequence of moves (numbers), which returns all the dials to 12 o''clock. You are convinced that the answer is unique.</div>', '<pre class="sio">3 3 0\r\n2 2 2\r\n2 1 2</pre>', '<pre class="sio">4 5 8 9</pre>', '', 'IOI 1994', '40.74%', '88.24%', '2016-06-16 16:31:04', 18, '树的BFS', -0.56802134293325, 0.230691797973333),
(187, 'http://poj.org/problem?id=1167', '1167', 'Poj', ' 1000MS', ' 10000K', 'The Buses', '<div class="ptx" lang="en-US">A man arrives at a bus stop at 12:00. He remains there during 12:00-12:59. The bus stop is used by a number of bus routes. The man notes the times of arriving buses. The times when buses arrive are given. \r<br><ul><li>	Buses on the same route arrive at regular intervals from 12:00 to 12:59 throughout the entire hour. \r<br><li>	Times are given in whole minutes from 0 to 59. \r<br><li>	Each bus route stops at least 2 times. \r<br><li>	The number of bus routes in the test examples will be &lt;=17. \r<br><li>	Buses from different routes may arrive at the same time. \r<br><li>	Several bus routes can have the same time of first arrival and/or time interval. If two bus routes have the same starting time and interval, they are distinct and are both to be presented. </li></br></li></br></li></br></li></br></li></br></li></ul> <br>Find the schedule with the fewest number of bus routes that must stop at the bus stop to satisfy the input data. For each bus route, output the starting time and the interval. \r<br/></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The input contains a number n (n &lt;= 300) telling how many arriving buses have been noted, followed by the arrival times in ascending order. </div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The output contains one integer, which is the fewest number of bus routes.</div>', '<pre class="sio">17\r\n0 3 5 13 13 15 21 26 27 29 37 39 39 45 51 52 53</pre>', '<pre class="sio">3</pre>', '', 'IOI 1994', '27.38%', '77.13%', '2016-06-16 16:31:04', 17, '树的DFS', -0.834877821456769, -0.878882530575574),
(188, 'http://poj.org/problem?id=1168', '1168', 'Poj', ' 1000MS', ' 10000K', 'The Circle', '<div class="ptx" lang="en-US">You have a circle, divided into sectors. You are given three positive numbers: n (n &lt;= 6), m (m &lt;= 20) and k (k &lt;= 20). n is the number of sectors. Choose integers to place in each sector. All integers have to be greater or equal to k. When the circle is filled you can use the integer in a single sector or add the integers in two or more adjacent sectors to make a new number. Using these new numbers you can create an unbroken sequence of all integers between m and i (m,m+1,m+2 ... i). \r<br>Your task is to choose integers for the sectors such that the largest number (i) in the sequence is as high as possible. Figure 1 below shows how to generate all numbers from 2 to 21 (for n=5, m=2, k=1). The ^-sign below the sectors shows which sectors to add together to make numbers in the sequence. \r<br/></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The input contains three integers (n, m and k). </div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The output must contain: \r<br><ul><li>The highest number (i) that can be generated with the list of numbers. \r<br><li>All arrangements of numbers in a circle that produce a sequence from m to i. (One per line.) Each arrangement is a list of numbers starting with the smallest number (which is not necessarily unique). The arrangements are sorted in ascending order.</li></br></li></ul> <br>(2 10 3 1 5) is NOT a valid solution, since it does not start with the smallest number. (1 3 10 2 5) and (1 5 2 10 3) must both be included in the output. Note that (1 1 2 3), (1 3 2 1), (1 2 3 1) and (1 1 3 2) should all be output.\r<br/></br></br></div>', '<pre class="sio">5\r\n2\r\n1</pre>', '<pre class="sio">21\r\n1 3 10 2 5\r\n1 5 2 10 3\r\n2 4 9 3 5\r\n2 5 3 9 4</pre>', '<div class="ptx" lang="en-US"><pre>FIGURE 1 (all circles have been cut open as indicated by arrow):\r<br>\r<br>   |----------|      |----------|     |----------|     |----------|  \r<br>.-&gt;|1|3|10|2|5|-.    |1|3|10|2|5|     |1|3|10|2|5|     |1|3|10|2|5|  \r<br>|  |----------| |    |----------|     |----------|     |----------|  \r<br>|          ^    |       ^              ^ ^                       ^\r<br>"---------------"       \r<br>        \r<br>   |----------|      |----------|     |----------|     |----------|  \r<br>.-&gt;|1|3|10|2|5|-.    |1|3|10|2|5|     |1|3|10|2|5|     |1|3|10|2|5|  \r<br>|  |----------| |    |----------|     |----------|     |----------|  \r<br>|   ^        ^  |            ^ ^       ^      ^ ^       ^ ^      ^ \r<br>"---------------"       \r<br>\r<br>   |----------|      |----------|     |----------|     |----------|  \r<br>.-&gt;|1|3|10|2|5|-.    |1|3|10|2|5|     |1|3|10|2|5|     |1|3|10|2|5|  \r<br>|  |----------| |    |----------|     |----------|     |----------|  \r<br>|        ^      |     ^ ^    ^ ^            ^           ^ ^    ^ ^\r<br>"---------------"       \r<br>\r<br>   |----------|      |----------|     |----------|     |----------|  \r<br>.-&gt;|1|3|10|2|5|-.    |1|3|10|2|5|     |1|3|10|2|5|     |1|3|10|2|5|  \r<br>|  |----------| |    |----------|     |----------|     |----------|  \r<br>|        ^ ^    |       ^  ^           ^ ^  ^             ^  ^ ^\r<br>"---------------"       \r<br>\r<br>   |----------|      |----------|     |----------|     |----------|  \r<br>.-&gt;|1|3|10|2|5|-.    |1|3|10|2|5|     |1|3|10|2|5|     |1|3|10|2|5|  \r<br>|  |----------| |    |----------|     |----------|     |----------|  \r<br>|   ^ ^ ^  ^    |          ^ ^ ^       ^    ^ ^ ^       ^ ^  ^   ^\r<br>"---------------"       \r<br>\r<br>   |----------|      |----------|   \r<br>.-&gt;|1|3|10|2|5|-.    |1|3|10|2|5|   \r<br>|  |----------| |    |----------|   \r<br>|     ^ ^  ^ ^  |     ^ ^ ^  ^ ^    \r<br>"---------------"       </br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre>', 'IOI 1994', '35.01%', '75.47%', '2016-06-16 16:31:04', 4, '动规', -0.978447039584187, -0.24519599413634),
(189, 'http://poj.org/problem?id=1169', '1169', 'Poj', ' 1000MS', ' 10000K', 'Packing Rectangles', '<div class="ptx" lang="en-US"><center><img src="http://poj.org/images/1169_1.gif"> <br>Figure 1: The six basic layouts of four rectangles</br></img></center> <br> <br>Four rectangles are given. Find the smallest enclosing (new) rectangle into which these four may be fitted without overlapping. By smallest rectangle we mean the one with the smallest area.\r<br>All four rectangles should have their sides parallel to the corresponding sides of the enclosing rectangle. Figure 1 shows six ways to fit four rectangles together. These six are the only possible basic layouts, since any other layout can be obtained from a basic layout by rotation or reflection. There may exist several different enclosing rectangles fulfilling the requirements, all with the same area. You have to produce all such enclosing rectangles.\r<br/></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The input consists of four lines. Each line describes one given rectangle by two positive integers: the lengths of the sides of the rectangle. Each side of a rectangle is at least 1 and at most 50.</div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The output should contain one line more than the number of solutions. The first line contains a single integer: the minimum area of the enclosing rectangles. Each of the following lines contains one solution described by two numbers p and q with p &lt;= q. These lines must be sorted in ascending order of p, and must all be different.</div>', '<pre class="sio">1 2\r\n2 3\r\n3 4\r\n4 5</pre>', '<pre class="sio">40\r\n4 10\r\n5 8</pre>', '', 'IOI 1995', '53.66%', '89.43%', '2016-06-16 16:31:04', 17, '树的DFS', -0.96930663729994, 1.30372325941434),
(190, 'http://poj.org/problem?id=1170', '1170', 'Poj', ' 1000MS', ' 10000K', 'Shopping Offers', '<div class="ptx" lang="en-US"><center><img src="http://poj.org/images/1170_1.jpg"/></center> <br>In a shop each kind of product has a price. For example, the price of a flower is 2 ICU (Informatics Currency Units) and the price of a vase is 5 ICU. In order to attract more customers, the shop introduces some special offers. \r<br>A special offer consists of one or more product items for a reduced price. Examples: three flowers for 5 ICU instead of 6, or two vases together with one flower for 10 ICU instead of 12. \r<br>Write a program that calculates the price a customer has to pay for certain items, making optimal use of the special offers. That is, the price should be as low as possible. You are not allowed to add items, even if that would lower the price. \r<br>For the prices and offers given above, the (lowest) price for three flowers and two vases is 14 ICU: two vases and one flower for the reduced price of 10 ICU and two flowers for the regular price of 4 ICU. \r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains the number b of different kinds of products in the basket (0 &lt;= b &lt;= 5). Each of the next b lines contains three values c, k, and p. The value c is the (unique) product code (1 &lt;= c &lt;= 999). The value k indicates how many items of this product are in the basket (1 &lt;= k &lt;= 5). The value p is the regular price per item (1 &lt;= p &lt;= 999). Notice that all together at most 5*5=25 items can be in the basket. The b+2nd line contains the number s of special offers (0 &lt;= s &lt;= 99). Each of the next s lines describes one offer by giving its structure and its reduced price. The first number n on such a line is the number of different kinds of products that are part of the offer (1 &lt;= n &lt;= 5). The next n pairs of numbers (c,k) indicate that k items (1 &lt;= k &lt;= 5) with product code c (1 &lt;= c &lt;= 999) are involved in the offer. The last number p on the line stands for the reduced price (1 &lt;= p &lt;= 9999). The reduced price of an offer is less than the sum of the regular prices. </div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. Output one line with the lowest possible price to be paid.</div>', '<pre class="sio">2\r\n7 3 2\r\n8 2 5\r\n2\r\n1 7 3 5\r\n2 7 1 8 2 10</pre>', '<pre class="sio">14</pre>', '', 'IOI 1995', '41.76%', '90.20%', '2016-06-16 16:31:04', 4, '动规', -0.869005595665999, 0.315404808087097),
(191, 'http://poj.org/problem?id=1171', '1171', 'Poj', ' 1000MS', ' 10000K', 'Letter Game', '<div class="ptx" lang="en-US"><center><img src="http://poj.org/images/1171_1.jpg"> <br>Figure 1:Each of the 26 lowercase letters and its value</br></img></center> <br> <br>Letter games are popular at home and on television. In one version of the game, every letter has a value, and you collect letters to form one or more words giving the highest possible score. Unless you have ''a way with words'', you will try all the words you know, sometimes looking up the spelling, and then compute the scores. Obviously, this can be done more accurately by computer. \r<br>Given the values in Figure 1, a list of English words, and the letters collected: find the highest scoring words or pairs of words that can be formed,in which a letter must not occur more often than in the collected letters.\r<br/></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains a string of lowercase letters (from ''a'' to ''z''): the letters collected. The string consists of at least 3 and at most 7 letters in arbitrary order. \r<br>From the second line, there is a dictionary consisting of at most 40,000 lines. At the end of the dictionary is a line with a single period (''.''). Each of the other lines contains a string of at least 3 and at most 7 lowercase letters. The dictionary is sorted alphabetically and contains no duplicates. \r<br/></br></div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. You should output one line with the highest score.</div>', '<pre class="sio">prmgroa\r\nprofile\r\nprogram\r\nprom\r\nrag\r\nram\r\nrom\r\n.</pre>', '<pre class="sio">24</pre>', '<div class="ptx" lang="en-US">Huge input,scanf is recommended.</div>', 'IOI 1995', '27.42%', '73.58%', '2016-06-16 16:31:04', 19, '二叉树', -0.668728023721818, -0.875560451747583),
(192, 'http://poj.org/problem?id=1172', '1172', 'Poj', ' 1000MS', ' 10000K', 'Street Race', '<div class="ptx" lang="en-US">Figure 1 gives an example of a course for a street race. You see some points, labeled from 0 to N (here N=9), and some arrows connecting them. Point 0 is the start of the race; point N is the finish. The arrows represent one-way streets. The participants of the race move from point to point via the streets, in the direction of the arrows only. At each point, a participant may choose any outgoing arrow. \r<br><center><img src="http://poj.org/images/1172_1.jpg"> <br>Figure 1: A street course with 10 points</br></img></center> <br> <br>A well-formed course has the following properties: \r<br>1.Every point in the course can be reached from the start. \r<br>2.The finish can be reached from each point in the course. \r<br>3.The finish has no outgoing arrows. \r<br>A participant does not have to visit every point of the course to reach the finish. Some points, however, are unavoidable. In the example, these are points 0, 3, 6, and 9. Given a well-formed course, your program has to determine the set of unavoidable points that all participants have to visit, excluding start and finish (Subtask A). \r<br>Suppose the race has to be held on two consecutive days. For that purpose the course has to be split into two courses, one for each day. On the first day, the start is at point 0, and the finish at some `splitting point''. On the second day, the start is at this splitting point and the finish is at point N. Given a well-formed course, your program has to determine the set of splitting points (Subtask B). A point S is a splitting point for the well-formed course C if S differs from the start and the finish of C, and the course can be split into two well-formed courses that have no common arrows and that have S as only common point. In the example, only point 3 is a splitting point. \r<br/></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The input describes a well-formed course with at most 50 points and at most 100 arrows. The first N lines contain the endpoints of the arrows that leave from the points 0 through N-1 respectively. Each of these lines ends with the number -2. The last line contains the number -1.</div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The first line should contain the number of unavoidable points in the input course, followed by the labels of these points, in ascending order. The second line should contain the number of splitting points of the input course, followed by the labels of all these points, in ascending order.</div>', '<pre class="sio">1 2 -2\r\n3 -2\r\n3 -2\r\n5 4 -2\r\n6 4 -2\r\n6 -2\r\n7 8 -2\r\n9 -2\r\n5 9 -2\r\n-1</pre>', '<pre class="sio">2 3 6\r\n1 3</pre>', '', 'IOI 1995', '21.96%', '66.36%', '2016-06-16 16:31:04', 17, '树的DFS', -0.967494782409276, -1.32902421176832),
(193, 'http://poj.org/problem?id=1173', '1173', 'Poj', ' 1000MS', ' 10000K', 'Bar Codes', '<div class="ptx" lang="en-US">A bar-code symbol consists of alternating dark and light bars, starting with a dark bar on the left. Each bar is a number of units wide. Figure 1 shows a bar-code symbol consisting of 4 bars that extend over 1+2+3+1=7 units. \r<br><center><img src="http://poj.org/images/1173_1.jpg"> <br>Figure 1: Bar-code symbol over 7 units (see top) with 4 bars (see bottom)</br></img></center> <br> <br>In general, the bar code BC(n,k,m) is the set of all symbols with k bars that together extend over exactly n units, each bar being at most m units wide. For instance, the symbol in Figure 1 belongs to BC(7,4,3) but not to BC(7,4,2). \r<br><center><pre>\r<br>0: 1000100  |  8: 1100100\r<br>1: 1000110  |  9: 1100110\r<br>2: 1001000  | 10: 1101000\r<br>3: 1001100  | 11: 1101100\r<br>4: 1001110  | 12: 1101110\r<br>5: 1011000  | 13: 1110010\r<br>6: 1011100  | 14: 1110100\r<br>7: 1100010  | 15: 1110110\r<br>Figure 2: All symbols of BC(7,4,3)</br></br></br></br></br></br></br></br></br></pre></center> <br> <br>Figure 2 shows all 16 symbols in BC(7,4,3). Each `1'' represents a dark unit, each `0'' a light unit. The symbols appear in lexicographic (dictionary) order. The number on the left of the colon (`:'') is the rank of the symbol. The symbol in Figure 1 has rank 4 in BC(7,4,3). \r<br/></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first line contains the numbers n, k, and m (1 &lt;= n,k,m &lt;= 33). On the second line is a number s (0 &lt;= s &lt;= 100). The following s lines each contain some symbol in BC(n,k,m), represented by ''0''s and ''1''s as in Figure 2. </div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. On the first line your program should write the total number of symbols in BC(n,k,m). On each of the s following lines, it should write the rank of the corresponding symbol in the input.</div>', '<pre class="sio">7 4 3\r\n5\r\n1001110\r\n1110110\r\n1001100\r\n1001110\r\n1000100</pre>', '<pre class="sio">16\r\n4\r\n15\r\n3\r\n4\r\n0</pre>', '', 'IOI 1995', '35.67%', '82.80%', '2016-06-16 16:31:04', 4, '动规', -0.974147264545148, -0.190381693474493);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(194, 'http://poj.org/problem?id=1174', '1174', 'Poj', ' 5000MS', ' 32768K', 'Contact', '<div class="ptx" lang="en-US">Dr. Astro Insky works at a radiotelescope centre. Recently, she noticed a very curious microwave pulsing emission sent right from the centre of the galaxy. Is the emission transmitted by some extraterrestrial form of intelligent life? Or is it nothing but the usual heartbeat of the stars?\r<br> <br>You must help Dr. Insky to find out the truth by providing a tool to analyse bit patterns in the files she records. Dr. Insky wants to find the patterns of length between (and including) A and B that repeat themselves most often in the data file of each day. In each case, the greatest N distinct frequencies (that is, number of occurrences) are sought. Pattern occurrences may overlap, and only patterns that occur at least once are taken into account.\r<br/></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input.\r<br>First line - The integer A indicating the minimum pattern length.\r<br>Second line - The integer B indicating the maximum pattern length.\r<br>Third line - The integer N indicating the number of distinct frequencies.\r<br>Fourth line - A sequence of 0 and 1 characters, terminated by a 2 character.\r<br> <br>The input may have up to 2 megabytes. The parameters A, B and N are constrained by:\r<br>0 &lt; N &lt;= 20\r<br>0 &lt; A &lt;= B &lt;= 12\r<br/></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The output contains at most N lines, listing the at most N greatest frequencies and corresponding patterns. The listing must be produced in decreasing order of pattern frequency, and consists of lines formatted like\r<br> <br>frequency pattern pattern ... pattern\r<br> <br>where frequency is the number of occurrences of the patterns that follow. The patterns in each line must appear in decreasing order of length. Patterns of equal length must be listed in reverse numerical order. In case there are less than N distinct frequencies, the output listing will have less than N lines.\r<br/></br></br></br></br></div>', '<pre class="sio">2\r\n4\r\n10\r\n010100100100010001111011000010100110011110000100100111100100000002</pre>', '<pre class="sio">23 00\r\n15 10 01\r\n12 100\r\n11 001 000 11\r\n10 010\r\n8 0100\r\n7 1001 0010\r\n6 0000 111\r\n5 1000 110 011\r\n4 1100 0011 0001</pre>', '', 'IOI 1998', '30.14%', '73.11%', '2016-06-16 16:31:04', 19, '二叉树', -0.933150667317578, -0.649659091444213),
(195, 'http://poj.org/problem?id=1175', '1175', 'Poj', ' 1000MS', ' 10000K', 'Starry Night', '<div class="ptx" lang="en-US">High up in the night sky, the shining stars appear in clusters of various shapes. A cluster is a non-empty group of neighbouring stars, adjacent in horizontal, vertical or diagonal direction. A cluster cannot be a part of a larger cluster.\r<br> <br>Clusters may be similar. Two clusters are similar if they have the same shape and number of stars, irrespective of their orientation. In general, the number of possible orientations for a cluster is eight, as Figure 1 exemplifies.\r<br><center><img src="http://poj.org/images/1175_1.jpg"/></center> <br>The night sky is represented by a sky map, which is a two-dimensional matrix of 0''s and 1''s. A cell contains the digit 1 if it has a star, and the digit 0 otherwise.\r<br> <br>Given a sky map, mark all the clusters with lower case letters. Similar clusters must be marked with the same letter; non-similar clusters must be marked with different letters. You mark a cluster with a lower case letter by replacing every 1 in the cluster by that lower case letter. The order of allocation of letters depends on the first appearance of different clusters, from top to bottom and from left to right.\r<br/></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to read from standard input. The first two lines contain, respectively, the width W and the height H of a sky map. The sky map is given in the following H lines, of W characters each.\r<br> <br>0 &lt;= W (width of the sky map) &lt;= 100\r<br>0 &lt;= H (height of the sky map) &lt;= 100\r<br>0 &lt;= Number of clusters &lt;= 500\r<br>0 &lt;= Number of non-similar clusters &lt;= 26 (a..z)\r<br>1 &lt;= Number of stars per cluster &lt;= 160</br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program is to write to standard output. The output contains the same map as the input, except that the clusters are marked as described above.</div>', '<pre class="sio">23\r\n15\r\n10001000000000010000000\r\n01111100011111000101101\r\n01000000010001000111111\r\n00000000010101000101111\r\n00000111010001000000000\r\n00001001011111000000000\r\n10000001000000000000000\r\n00101000000111110010000\r\n00001000000100010011111\r\n00000001110101010100010\r\n00000100110100010000000\r\n00010001110111110000000\r\n00100001110000000100000\r\n00001000100001000100101\r\n00000001110001000111000</pre>', '<pre class="sio">a000a0000000000b0000000\r\n0aaaaa000ccccc000d0dd0d\r\n0a0000000c000c000dddddd\r\n000000000c0b0c000d0dddd\r\n00000eee0c000c000000000\r\n0000e00e0ccccc000000000\r\nb000000e000000000000000\r\n00b0f000000ccccc00a0000\r\n0000f000000c000c00aaaaa\r\n0000000ddd0c0b0c0a000a0\r\n00000b00dd0c000c0000000\r\n000g000ddd0ccccc0000000\r\n00g0000ddd0000000e00000\r\n0000b000d0000f000e00e0b\r\n0000000ddd000f000eee000</pre>', '<div class="ptx" lang="en-US">Just to make it clearer, notice that this sample input  corresponds to the following picture of the sky.\r<br><center><img src="http://poj.org/images/1175_2.jpg"/></center> <br>Notice that this sample output corresponds to the following picture.\r<br><center><img src="http://poj.org/images/1175_3.jpg"/></center></br></br></br></div>', 'IOI 1998', '38.06%', '83.67%', '2016-06-16 16:31:04', 17, '树的DFS', -0.953108113725194, 0.00811251649795371),
(196, 'http://poj.org/problem?id=1000', '1000', 'Poj', ' 1000MS', ' 10000K', 'A+B Problem', '<div class="ptx" lang="en-US">Calculate a+b </div>', '<div class="ptx" lang="en-US">Two integer a,b (0&lt;=a,b&lt;=10)</div>', '<div class="ptx" lang="en-US">Output a+b</div>', '<pre class="sio">1 2</pre>', '<pre class="sio">3</pre>', '<div class="ptx" lang="en-US">Q: Where are the input and the output?\r<br> <br>A: Your program shall always <font color="red">read input from stdin (Standard Input) and write output to stdout (Standard Output)</font>. For example, you can use ''scanf'' in C or ''cin'' in C++ to read from stdin, and use ''printf'' in C or ''cout'' in C++ to write to stdout.\r<br> <br>You <font color="red">shall not output any extra data</font> to standard output other than that required by the problem, otherwise you will get a "Wrong Answer".\r<br> <br>User programs are not allowed to open and read from/write to files. You will get a "Runtime Error" or a "Wrong Answer"if you try to do so. \r<br> <br>Here is a sample solution to problem 1000 using C++/G++:\r<br><pre>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>int main()<br>{<br>    int a,b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; a+b &lt;&lt; endl;<br>    return 0;<br>}</br></br></br></br></br></br></br></br></br></br></pre>It''s important that the return type of main() must be int when you use G++/GCC,or you may get compile error.\r<br> <br>Here is a sample solution to problem 1000 using C/GCC:\r<br><pre>#include &lt;stdio.h&gt;<br><br>int main()<br>{<br>    int a,b;<br>    scanf("%d %d",&amp;a;, &amp;b;);<br>    printf("%d\\n",a+b);<br>    return 0;<br>}</br></br></br></br></br></br></br></br></pre>Here is a sample solution to problem 1000 using Pascal:\r<br><pre>program p1000(Input,Output);<br><br>var<br>  a,b:Integer;<br>begin<br>   Readln(a,b);<br>   Writeln(a+b);<br>end.</br></br></br></br></br></br></br></pre>Here is a sample solution to problem 1000 using Java:\r<br> <br>Now java compiler is jdk 1.5, next is program for 1000\r<br><pre>import java.io.*;<br>import java.util.*;<br>public class Main<br>{<br>            public static void main(String args[]) throws Exception<br>            {<br>                    Scanner cin=new Scanner(System.in);<br>                    int a=cin.nextInt(),b=cin.nextInt();<br>                    System.out.println(a+b);<br>            }<br>}</br></br></br></br></br></br></br></br></br></br></pre>Old program for jdk 1.4\r<br><pre>import java.io.*;<br>import java.util.*;<br><br>public class Main<br>{<br>    public static void main (String args[]) throws Exception<br>    {<br>        BufferedReader stdin = <br>            new BufferedReader(<br>                new InputStreamReader(System.in));<br><br>        String line = stdin.readLine();<br>        StringTokenizer st = new StringTokenizer(line);<br>        int a = Integer.parseInt(st.nextToken());<br>        int b = Integer.parseInt(st.nextToken());<br>        System.out.println(a+b);<br>    }<br>}</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre>Here is a sample solution to problem 1000 using Fortran:\r<br><pre>	PROGRAM P1000<br>		IMPLICIT NONE<br>		INTEGER :: A, B<br>		READ(*,*) A, B<br>		WRITE(*, "(I0)") A + B<br>	END PROGRAM P1000</br></br></br></br></br></pre></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', 'POJ', '55.95%', '93.97%', '2016-06-16 16:31:04', -1, '未分类', 9.49704891558965, 1.49391227231681),
(197, 'http://poj.org/problem?id=1007', '1007', 'Poj', ' 1000MS', ' 10000K', 'DNA Sorting', '<div class="ptx" lang="en-US">One measure of ``unsortedness'''' in a sequence is the number of pairs of entries that are out of order with respect to each other. For instance, in the letter sequence ``DAABEC'''', this measure is 5, since D is greater than four letters to its right and E is greater than one letter to its right. This measure is called the number of inversions in the sequence. The sequence ``AACEDGG'''' has only one inversion (E and D)---it is nearly sorted---while the sequence ``ZWQM'''' has 6 inversions (it is as unsorted as can be---exactly the reverse of sorted).\r<br> <br>You are responsible for cataloguing a sequence of DNA strings (sequences containing only the four letters A, C, G, and T). However, you want to catalog them, not in alphabetical order, but rather in order of ``sortedness'''', from ``most sorted'''' to ``least sorted''''. All the strings are of the same length.\r<br/></br></br></div>', '<div class="ptx" lang="en-US">The first line contains two integers: a positive integer n (0 &lt; n &lt;= 50) giving the length of the strings; and a positive integer m (0 &lt; m &lt;= 100) giving the number of strings. These are followed by m lines, each containing a string of length n.</div>', '<div class="ptx" lang="en-US">Output the list of input strings, arranged from ``most sorted'''' to ``least sorted''''. Since two strings can be equally sorted, then output them according to the orginal order.</div>', '<pre class="sio">10 6\r\nAACATGAAGG\r\nTTTTGGCCAA\r\nTTTGGCCAAA\r\nGATCAGATTT\r\nCCCGGGGGGA\r\nATCGATGCAT</pre>', '<pre class="sio">CCCGGGGGGA\r\nAACATGAAGG\r\nGATCAGATTT\r\nATCGATGCAT\r\nTTTTGGCCAA\r\nTTTGGCCAAA</pre>', '', 'East Central North America 1998', '40.23%', '91.93%', '2016-06-16 16:31:04', 21, '排序', 1.5732666265083, 0.188335292916451),
(198, 'http://poj.org/problem?id=1008', '1008', 'Poj', ' 1000MS', ' 10000K', 'Maya Calendar', '<div class="ptx" lang="en-US">During his last sabbatical, professor M. A. Ya made a surprising discovery about the old Maya calendar. From an old knotted message, professor discovered that the Maya civilization used a 365 day long year, called Haab, which had 19 months. Each of the first 18 months was 20 days long, and the names of the months were pop, no, zip, zotz, tzec, xul, yoxkin, mol, chen, yax, zac, ceh, mac, kankin, muan, pax, koyab, cumhu. Instead of having names, the days of the months were denoted by numbers starting from 0 to 19. The last month of Haab was called uayet and had 5 days denoted by numbers 0, 1, 2, 3, 4. The Maya believed that this month was unlucky, the court of justice was not in session, the trade stopped, people did not even sweep the floor. \r<br> <br>For religious purposes, the Maya used another calendar in which the year was called Tzolkin (holly year). The year was divided into thirteen periods, each 20 days long. Each day was denoted by a pair consisting of a number and the name of the day. They used 20 names: imix, ik, akbal, kan, chicchan, cimi, manik, lamat, muluk, ok, chuen, eb, ben, ix, mem, cib, caban, eznab, canac, ahau and 13 numbers; both in cycles. \r<br> <br>Notice that each day has an unambiguous description. For example, at the beginning of the year the days were described as follows: \r<br> <br>1 imix, 2 ik, 3 akbal, 4 kan, 5 chicchan, 6 cimi, 7 manik, 8 lamat, 9 muluk, 10 ok, 11 chuen, 12 eb, 13 ben, 1 ix, 2 mem, 3 cib, 4 caban, 5 eznab, 6 canac, 7 ahau, and again in the next period 8 imix, 9 ik, 10 akbal . . .\r<br> <br>Years (both Haab and Tzolkin) were denoted by numbers 0, 1, : : : , where the number 0 was the beginning of the world. Thus, the first day was: \r<br> <br>Haab: 0. pop 0 \r<br> <br>Tzolkin: 1 imix 0 \r<br>Help professor M. A. Ya and write a program for him to convert the dates from the Haab calendar to the Tzolkin calendar. \r<br/></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The date in Haab is given in the following format:\r<br>NumberOfTheDay. Month Year\r<br> <br>The first line of the input file contains the number of the input dates in the file. The next n lines contain n dates in the Haab calendar format, each in separate line. The year is smaller then 5000. \r<br/></br></br></br></div>', '<div class="ptx" lang="en-US">The date in Tzolkin should be in the following format:\r<br>Number NameOfTheDay Year\r<br> <br>The first line of the output file contains the number of the output dates. In the next n lines, there are dates in the Tzolkin calendar format, in the order corresponding to the input dates. \r<br/></br></br></br></div>', '<pre class="sio">3\r\n10. zac 0\r\n0. pop 0\r\n10. zac 1995</pre>', '<pre class="sio">3\r\n3 chuen 0\r\n1 imix 0\r\n9 cimi 2801</pre>', '', 'Central Europe 1995', '30.80%', '90.55%', '2016-06-16 16:31:04', 3, '模拟', 1.00507434131803, -0.594844790782365),
(199, 'http://poj.org/problem?id=1009', '1009', 'Poj', ' 1000MS', ' 10000K', 'Edge Detection', '<div class="ptx" lang="en-US">IONU Satellite Imaging, Inc. records and stores very large images using run  length encoding. You are to write a program that reads a compressed image, finds the edges in the image, as described below, and outputs another compressed image of the detected edges.\r<br>A simple edge detection algorithm sets an output pixel''s value to be the maximum absolute value of the differences between it and all its surrounding pixels in the input image. Consider the input image below:\r<br><center><img src="http://poj.org/images/1009_1.jpg"/></center> <br>The upper left pixel in the output image is the maximum of the values |15-15|,|15-100|, and |15-100|, which is 85. The pixel in the 4th row, 2nd column is computed as the maximum of |175-100|, |175-100|, |175-100|, |175-175|, |175-25|, |175-175|,|175-175|, and |175-25|, which is 150.\r<br>Images contain 2 to 1,000,000,000 (10<sup>9</sup>) pixels. All images are encoded using run length encoding (RLE). This is a sequence of pairs, containing pixel value (0-255) and run length (1-10<sup>9</sup>). Input images have at most 1,000 of these pairs. Successive pairs have different pixel values. All lines in an image contain the same number of pixels.\r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">Input consists of information for one or more images. Each image starts with the width, in pixels, of each image line. This is followed by the RLE pairs, one pair per line. A line with 0 0 indicates the end of the data for that image. An image width of 0 indicates there are no more images to process. The first image in the example input encodes the 5x7 input image above.', '<div class="ptx" lang="en-US">Output is a series of edge-detected images, in the same format as the input images, except that there may be more than 1,000 RLE pairs.', '<pre class="sio">7\r\n15 4\r\n100 15\r\n25 2\r\n175 2\r\n25 5\r\n175 2\r\n25 5\r\n0 0\r\n10\r\n35 500000000\r\n200 500000000\r\n0 0\r\n3\r\n255 1\r\n10 1\r\n255 2\r\n10 1\r\n255 2\r\n10 1\r\n255 1\r\n0 0\r\n0\r\n</pre>', '<pre class="sio">7\r\n85 5\r\n0 2\r\n85 5\r\n75 10\r\n150 2\r\n75 3\r\n0 2\r\n150 2\r\n0 4\r\n0 0\r\n10\r\n0 499999990\r\n165 20\r\n0 499999990\r\n0 0\r\n3\r\n245 9\r\n0 0\r\n0\r\n</pre>', '<div class="ptx" lang="en-US">A brute force solution that attempts to compute an output value for every individual pixel will likely fail due to space or time constraints.', 'Mid-Central USA 2000', '23.50%', '71.70%', '2016-06-16 16:31:04', 5, '图', -0.449006814965881, -1.20112417689068),
(200, 'http://poj.org/problem?id=1010', '1010', 'Poj', ' 1000MS', ' 10000K', 'STAMPS', '<div class="ptx" lang="en-US">Have you done any Philately lately? \r<br> <br>You have been hired by the Ruritanian Postal Service (RPS) to design their new postage software.  The software allocates stamps to customers based on customer needs and the denominations that are currently in stock.\r<br> <br>Ruritania is filled with people who correspond with stamp collectors. As a service to these people, the RPS asks that all stamp allocations have the maximum number of different types of stamps in it.  In fact, the RPS has been known to issue several stamps of the same denomination in order to please customers (these count as different types, even though they are the same denomination).  The maximum number of different types of stamps issued at any time is twenty-five.\r<br> <br>To save money, the RPS would like to issue as few duplicate stamps as possible (given the constraint that they want to issue as many different types).  Further, the RPS won''t sell more than four stamps at a time.\r<br/></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input for your program will be pairs of positive integer sequences, consisting of two lines, alternating until end-of-file.  The first sequence are the available values of stamps, while the second sequence is a series of customer requests.  For example:\r<br> <br>1 2 3 0	; three different stamp types\r<br>7 4 0		; two customers\r<br>1 1 0		; a new set of stamps (two of the same type)\r<br>6 2 3 0	; three customers\r<br> <br>Note: the comments in this example are *not* part of the data file; data files contain only integers. </br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">For each customer, you should print the "best" combination that is exactly equal to the customer''s needs, with a maximum of four stamps. If no such combination exists, print "none". \r<br>The "best" combination is defined as the maximum number of different stamp types.  In case of a tie, the combination with the fewest total stamps is best.  If still tied, the set with the highest single-value stamp is best.  If there is still a tie, print "tie". \r<br> <br>For the sample input file, the output should be:\r<br> <br>7 (3): 1 1 2 3 \r<br>4 (2): 1 3 \r<br>6 ---- none\r<br>2 (2): 1 1\r<br>3 (2): tie\r<br> <br>That is, you should print the customer request, the number of types sold and the actual stamps.  In case of no legal allocation, the line should look like it does in the example, with four hyphens after a space.  In the case of a tie, still print the number of types but do not print the allocation (again, as in the example).Don''t print extra blank at the end of each line.\r<br/></br></br></br></br></br></br></br></br></br></br></br></div>', '<pre class="sio">1 2 3 0	; three different stamp types\r\n7 4 0		; two customers\r\n1 1 0		; a new set of stamps (two of the same type)\r\n6 2 3 0	; three customers</pre>', '<pre class="sio">7 (3): 1 1 2 3 \r\n4 (2): 1 3 \r\n6 ---- none\r\n2 (2): 1 1\r\n3 (2): tie</pre>', '', 'Pacific Northwest 1998', '28.73%', '81.76%', '2016-06-16 16:31:04', 17, '树的DFS', -0.517046022501873, -0.766762370130886),
(201, 'http://poj.org/problem?id=1011', '1011', 'Poj', ' 1000MS', ' 10000K', 'Sticks', '<div class="ptx" lang="en-US">George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero. </div>', '<div class="ptx" lang="en-US">The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero.</div>', '<div class="ptx" lang="en-US">The output should contains the smallest possible length of original sticks, one per line. </div>', '<pre class="sio">9\r\n5 2 1 5 2 1 5 2 1\r\n4\r\n1 2 3 4\r\n0\r\n</pre>', '<pre class="sio">6\r\n5</pre>', '', 'Central Europe 1995', '23.52%', '69.83%', '2016-06-16 16:31:04', 17, '树的DFS', 2.67817359848985, -1.19946313747668),
(202, 'http://poj.org/problem?id=1012', '1012', 'Poj', ' 1000MS', ' 10000K', 'Joseph', '<div class="ptx" lang="en-US">The Joseph''s problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every mth is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when n = 6 and m = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved.\r<br> <br>Suppose that there are k good guys and k bad guys. In the circle the first k are good guys and the last k bad guys. You have to determine such minimal m that all the bad guys will be executed before the first good guy. \r<br> <br/></br></br></br></div>', '<div class="ptx" lang="en-US">The input file consists of separate lines containing k. The last line in the input file contains 0. You can suppose that 0 &lt; k &lt; 14. </div>', '<div class="ptx" lang="en-US">The output file will consist of separate lines containing m corresponding to k in the input file. </div>', '<pre class="sio">3\r\n4\r\n0\r\n</pre>', '<pre class="sio">5\r\n30\r\n\r\n</pre>', '', 'Central Europe 1995', '38.08%', '88.65%', '2016-06-16 16:31:04', 19, '二叉树', 0.412002854644001, 0.00977355591194875),
(203, 'http://poj.org/problem?id=1013', '1013', 'Poj', ' 1000MS', ' 10000K', 'Counterfeit Dollar', '<div class="ptx" lang="en-US">Sally Jones has a dozen Voyageur silver dollars. However, only eleven of the coins are true silver dollars; one coin is counterfeit even though its color and size make it indistinguishable from the real silver dollars. The counterfeit coin has a different weight from the other coins but Sally does not know if it is heavier or lighter than the real coins. \r<br>Happily, Sally has a friend who loans her a very accurate balance scale. The friend will permit Sally three weighings to find the counterfeit coin. For instance, if Sally weighs two coins against each other and the scales balance then she knows these two coins are true. Now if Sally weighs \r<br>one of the true coins against a third coin and the scales do not balance then Sally knows the third coin is counterfeit and she can tell whether it is light or heavy depending on whether the balance on which it is placed goes up or down, respectively. \r<br>By choosing her weighings carefully, Sally is able to ensure that she will find the counterfeit coin with exactly three weighings. </br></br></br></div>', '<div class="ptx" lang="en-US">The first line of input is an integer n (n &gt; 0) specifying the number of cases to follow. Each case consists of three lines of input, one for each weighing. Sally has identified each of the coins with the letters A--L. Information on a weighing will be given by two strings of letters and then one of the words ``up'''', ``down'''', or ``even''''. The first string of letters will represent the coins on the left balance; the second string, the coins on the right balance. (Sally will always place the same number of coins on the right balance as on the left balance.) The word in the third position will tell whether the right side of the balance goes up, down, or remains even. </div>', '<div class="ptx" lang="en-US">For each case, the output will identify the counterfeit coin by its letter and tell whether it is heavy or light. The solution will always be uniquely determined. </div>', '<pre class="sio">1 \r\nABCD EFGH even \r\nABCI EFJK up \r\nABIJ EFGH even </pre>', '<pre class="sio">K is the counterfeit coin and it is light. </pre>', '', 'East Central North America 1998', '31.69%', '86.38%', '2016-06-16 16:31:04', 3, '模拟', 0.194850693867364, -0.520928536859571),
(204, 'http://poj.org/problem?id=1014', '1014', 'Poj', ' 1000MS', ' 10000K', 'Dividing', '<div class="ptx" lang="en-US">Marsha and Bill own a collection of marbles. They want to split the collection among themselves so that both receive an equal share of the marbles. This would be easy if all the marbles had the same value, because then they could just split the collection in half. But unfortunately, some of the marbles are larger, or more beautiful than others. So, Marsha and Bill start by assigning a value, a natural number between one and six, to each marble. Now they want to divide the marbles so that each of them gets the same total value. Unfortunately, they realize that it might be impossible to divide the marbles in this way (even if the total value of all marbles is even). For example, if there are one marble of value 1, one of value 3 and two of value 4, then they cannot be split into sets of equal value. So, they ask you to write a program that checks whether there is a fair partition of the marbles. </div>', '<div class="ptx" lang="en-US">Each line in the input file describes one collection of marbles to be divided. The lines contain six non-negative integers n1 , . . . , n6 , where ni is the number of marbles of value i. So, the example from above would be described by the input-line "1 0 1 2 0 0". The maximum total number of marbles will be 20000. \r<br>The last line of the input file will be "0 0 0 0 0 0"; do not process this line. </br></div>', '<div class="ptx" lang="en-US">For each collection, output "Collection #k:", where k is the number of the test case, and then either "Can be divided." or "Can''t be divided.". \r<br>Output a blank line after each test case. </br></div>', '<pre class="sio">1 0 1 2 0 0 \r\n1 0 0 0 1 1 \r\n0 0 0 0 0 0 </pre>', '<pre class="sio">Collection #1:\r\nCan''t be divided.\r\n\r\nCollection #2:\r\nCan be divided.</pre>', '', 'Mid-Central European Regional Contest 1999', '26.00%', '81.88%', '2016-06-16 16:31:04', 17, '树的DFS', 0.818047648424973, -0.993494250141254),
(205, 'http://poj.org/problem?id=1015', '1015', 'Poj', ' 1000MS', ' 65536K', 'Jury Compromise', '<div class="ptx" lang="en-US">In Frobnia, a far-away country, the verdicts in court trials are determined by a jury consisting of members of the general public. Every time a trial is set to begin, a jury has to be selected, which is done as follows. First, several people are drawn randomly from the public. For each person in this pool, defence and prosecution assign a grade from 0 to 20 indicating their preference for this person. 0 means total dislike, 20 on the other hand means that this person is considered ideally suited for the jury. \r<br>Based on the grades of the two parties, the judge selects the jury. In order to ensure a fair trial, the tendencies of the jury to favour either defence or prosecution should be as balanced as possible. The jury therefore has to be chosen in a way that is satisfactory to both parties. \r<br>We will now make this more precise: given a pool of n potential jurors and two values di (the defence''s value) and pi (the prosecution''s value) for each potential juror i, you are to select a jury of m persons. If J is a subset of {1,..., n} with m elements, then D(J ) = sum(dk)  k belong to J\r<br>and P(J) = sum(pk) k belong to J are the total values of this jury for defence and prosecution. \r<br>For an optimal jury J , the value |D(J) - P(J)| must be minimal. If there are several jurys with minimal |D(J) - P(J)|, one which maximizes D(J) + P(J) should be selected since the jury should be as ideal as possible for both parties. \r<br>You are to write a program that implements this jury selection process and chooses an optimal jury given a set of candidates. </br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input file contains several jury selection rounds. Each round starts with a line containing two integers n and m. n is the number of candidates and m the number of jury members. \r<br>These values will satisfy 1&lt;=n&lt;=200, 1&lt;=m&lt;=20 and of course m&lt;=n. The following n lines contain the two integers pi and di for i = 1,...,n. A blank line separates each round from the next. \r<br>The file ends with a round that has n = m = 0. </br></br></div>', '<div class="ptx" lang="en-US">For each round output a line containing the number of the jury selection round (''Jury #1'', ''Jury #2'', etc.). \r<br>On the next line print the values D(J ) and P (J ) of your jury as shown below and on another line print the numbers of the m chosen candidates in ascending order. Output a blank before each individual candidate number. \r<br>Output an empty line after each test case. </br></br></div>', '<pre class="sio">4 2 \r\n1 2 \r\n2 3 \r\n4 1 \r\n6 2 \r\n0 0 </pre>', '<pre class="sio">Jury #1 \r\nBest jury has value 6 for prosecution and value 4 for defence: \r\n 2 3 </pre>', '<div class="ptx" lang="en-US">If your solution is based on an inefficient algorithm, it may not execute in the allotted time. </div>', 'Southwestern European Regional Contest 1996', '26.43%', '78.76%', '2016-06-16 16:31:04', 4, '动规', -0.256760898283301, -0.957781902740354),
(206, 'http://poj.org/problem?id=1016', '1016', 'Poj', ' 1000MS', ' 10000K', 'Numbers That Count', '<div class="ptx" lang="en-US">"Kronecker''s Knumbers" is a little company that manufactures plastic digits for use in signs (theater marquees, gas station price displays, and so on). The owner and sole employee, Klyde Kronecker, keeps track of how many digits of each type he has used by maintaining an inventory book. For instance, if he has just made a sign containing the telephone number "5553141", he''ll write down the number "5553141" in one column of his book, and in the next column he''ll list how many of each digit he used: two 1s, one 3, one 4, and three 5s. (Digits that don''t get used don''t appear in the inventory.) He writes the inventory in condensed form, like this: "21131435". \r<br> <br>The other day, Klyde filled an order for the number 31123314 and was amazed to discover that the inventory of this number is the same as the number---it has three 1s, one 2, three 3s, and one 4! He calls this an example of a "self-inventorying number", and now he wants to find out which numbers are self-inventorying, or lead to a self-inventorying number through iterated application of the inventorying operation described below. You have been hired to help him in his investigations. \r<br> <br>Given any non-negative integer n, its inventory is another integer consisting of a concatenation of integers c1 d1 c2 d2 ... ck dk , where each ci and di is an unsigned integer, every ci is positive, the di satisfy 0&lt;=d1&lt;d2&lt;...&lt;dk&lt;=9, and, for each digit d that appears anywhere in n, d equals di for some i and d occurs exactly ci times in the decimal representation of n. For instance, to compute the inventory of 5553141 we set c1 = 2, d1 = 1, c2 = 1, d2 = 3, etc., giving 21131435. The number 1000000000000 has inventory 12011 ("twelve 0s, one 1"). \r<br> <br>An integer n is called self-inventorying if n equals its inventory. It is called self-inventorying after j steps (j&gt;=1) if j is the smallest number such that the value of the j-th iterative application of the inventory function is self-inventorying. For instance, 21221314 is self-inventorying after 2 steps, since the inventory of 21221314 is 31321314, the inventory of 31321314 is 31123314, and 31123314 is self-inventorying. \r<br> <br>Finally, n enters an inventory loop of length k (k&gt;=2) if k is the smallest number such that for some integer j (j&gt;=0), the value of the j-th iterative application of the inventory function is the same as the value of the (j + k)-th iterative application. For instance, 314213241519 enters an inventory loop of length 2, since the inventory of 314213241519 is 412223241519 and the inventory of 412223241519 is 314213241519, the original number (we have j = 0 in this case). \r<br> <br>Write a program that will read a sequence of non-negative integers and, for each input value, state whether it is self-inventorying, self-inventorying after j steps, enters an inventory loop of length k, or has none of these properties after 15 iterative applications of the inventory function. </br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">A sequence of non-negative integers, each having at most 80 digits, followed by the terminating value -1. There are no extra leading zeros. </div>', '<div class="ptx" lang="en-US">For each non-negative input value n, output the appropriate choice from among the following messages (where n is the input value, j is a positive integer, and k is a positive integer greater than 1): \r<br>n is self-inventorying \r<br>n is self-inventorying after j steps \r<br>n enters an inventory loop of length k \r<br>n can not be classified after 15 iterations </br></br></br></br></div>', '<pre class="sio">22 \r\n31123314 \r\n314213241519 \r\n21221314 \r\n111222234459 \r\n-1</pre>', '<pre class="sio">22 is self-inventorying \r\n31123314 is self-inventorying \r\n314213241519 enters an inventory loop of length 2 \r\n21221314 is self-inventorying after 2 steps \r\n111222234459 enters an inventory loop of length 2 </pre>', '', 'East Central North America 1998', '33.51%', '90.28%', '2016-06-16 16:31:04', 3, '模拟', -0.458823282507838, -0.369773950185993),
(207, 'http://poj.org/problem?id=1017', '1017', 'Poj', ' 1000MS', ' 10000K', 'Packets', '<div class="ptx" lang="en-US">A factory produces products packed in square packets of the same height h and of the sizes 1*1, 2*2, 3*3, 4*4, 5*5, 6*6. These products are always delivered to customers in the square parcels of the same height h as the products have and of the size 6*6. Because of the expenses it is the interest of the factory as well as of the customer to minimize the number of parcels necessary to deliver the ordered products from the factory to the customer. A good program solving the problem of finding the minimal number of parcels necessary to deliver the given products according to an order would save a lot of money. You are asked to make such a program. </div>', '<div class="ptx" lang="en-US">The input file consists of several lines specifying orders. Each line specifies one order. Orders are described by six integers separated by one space representing successively the number of packets of individual size from the smallest size 1*1 to the biggest size 6*6. The end of the input file is indicated by the line containing six zeros. </div>', '<div class="ptx" lang="en-US">The output file contains one line for each line in the input file. This line contains the minimal number of parcels into which the order from the corresponding line of the input file can be packed. There is no line in the output file corresponding to the last ``null'''' line of the input file. </div>', '<pre class="sio">0 0 4 0 0 1 \r\n7 5 1 0 0 0 \r\n0 0 0 0 0 0 </pre>', '<pre class="sio">2 \r\n1 </pre>', '', 'Central Europe 1996', '33.82%', '89.44%', '2016-06-16 16:31:04', 25, '贪心', 0.3741161576019, -0.344027839269065),
(208, 'http://poj.org/problem?id=1018', '1018', 'Poj', ' 1000MS', ' 10000K', 'Communication System', '<div class="ptx" lang="en-US">We have received an order from Pizoor Communications Inc. for a special communication system. The system consists of several devices. For each device, we are free to choose from several manufacturers. Same devices from two manufacturers differ in their maximum bandwidths and prices. \r<br>By overall bandwidth (B) we mean the minimum of the bandwidths of the chosen devices in the communication system and the total price (P) is the sum of the prices of all chosen devices. Our goal is to choose a manufacturer for each device to maximize B/P.\r<br/></br></div>', '<div class="ptx" lang="en-US">The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. Each test case starts with a line containing a single integer n (1 ≤ n ≤ 100), the number of devices in the communication system, followed by n lines in the following format: the i-th line (1 ≤ i ≤ n) starts with mi (1 ≤ mi ≤ 100), the number of manufacturers for the i-th device, followed by mi pairs of positive integers in the same line, each indicating the bandwidth and the price of the device respectively, corresponding to a manufacturer.</div>', '<div class="ptx" lang="en-US">Your program should produce a single line for each test case containing a single number which is the maximum possible B/P for the test case. Round the numbers in the output to 3 digits after decimal point.', '<pre class="sio">1 3\r\n3 100 25 150 35 80 25\r\n2 120 80 155 40\r\n2 100 100 120 110</pre>', '<pre class="sio">0.649</pre>', '', 'Tehran 2002', '35.67%', '86.15%', '2016-06-16 16:31:04', 4, '动规', -0.281504886715508, -0.190381693474493),
(209, 'http://poj.org/problem?id=1019', '1019', 'Poj', ' 1000MS', ' 10000K', 'Number Sequence', '<div class="ptx" lang="en-US">A single positive integer i is given. Write a program to find the digit located in the position i in the sequence of number groups S1S2...Sk. Each group Sk consists of a sequence of positive integer numbers ranging from 1 to k, written one after another.\r<br>For example, the first 80 digits of the sequence are as follows:\r<br>11212312341234512345612345671234567812345678912345678910123456789101112345678910</br></br></div>', '<div class="ptx" lang="en-US">The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by one line for each test case. The line for a test case contains the single integer i (1 ≤ i ≤ 2147483647)</div>', '<div class="ptx" lang="en-US">There should be one output line per test case containing the digit located in the position i.</div>', '<pre class="sio">2\r\n8\r\n3</pre>', '<pre class="sio">2\r\n2</pre>', '', 'Tehran 2002', '28.88%', '76.47%', '2016-06-16 16:31:04', 3, '模拟', 0.0195604938481654, -0.754304574525921),
(210, 'http://poj.org/problem?id=1020', '1020', 'Poj', ' 1000MS', ' 10000K', 'Anniversary Cake', '<div class="ptx" lang="en-US">Nahid Khaleh decides to invite the kids of the "Shahr-e Ghashang" to her wedding anniversary. She wants to prepare a square-shaped chocolate cake with known size. She asks each invited person to determine the size of the piece of cake that he/she wants (which should also be square-shaped). She knows that Mr. Kavoosi would not bear any wasting of the cake. She wants to know whether she can make a square cake with that size that serves everybody exactly with the requested size, and without any waste.</div>', '<div class="ptx" lang="en-US">The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by input data for each test case. Each test case consist of a single line containing an integer s, the side of the cake, followed by an integer n (1 ≤ n ≤ 16), the number of cake pieces, followed by n integers (in the range 1..10) specifying the side of each piece.</div>', '<div class="ptx" lang="en-US">There should be one output line per test case containing one of the words KHOOOOB! or HUTUTU! depending on whether the cake can be cut into pieces of specified size without any waste or not.</div>', '<pre class="sio">2\r\n4 8 1 1 1 1 1 3 1 1\r\n5 6 3 3 2 1 1 1</pre>', '<pre class="sio">KHOOOOB!\r\nHUTUTU!</pre>', '', 'Tehran 2002', '32.59%', '80.44%', '2016-06-16 16:31:04', 17, '树的DFS', -0.555203145647058, -0.44618176322978),
(211, 'http://poj.org/problem?id=1021', '1021', 'Poj', ' 1000MS', ' 10000K', '2D-Nim', '<div class="ptx" lang="en-US">The 2D-Nim board game is played on a grid, with pieces on the grid points. On each move, a player may remove any positive number of contiguous pieces in any row or column. The player who removes the last piece wins. For example, consider the left grid in the following figure.\r<br><img src="http://poj.org/images/1021/2d.gif"> <br>The player on move may remove (A), (B), (A, B), (A, B, C), or (B,F), etc., but may not remove (A, C), (D, E), (H, I) or (B, G).\r<br>For purposes of writing 2D-Nim-playing software, a certain programmer wants to be able to tell whether or not a certain position has ever been analyzed previously. Because of the rules of 2D-Nim, it should be clear that the two boards above are essentially equivalent. That is, if there is a winning strategy for the left board, the same one must apply to the right board. The fact that the contiguous groups of pieces appear in different places and orientations is clearly irrelevant. All that matters is that the same clusters of pieces (a cluster being a set of contiguous pieces that can be reached from each other by a sequence of one-square vertical or horizontal moves) appear in each. For example, the cluster of pieces (A, B, C, F, G) appears on both boards, but it has been reflected (swapping left and right), rotated, and moved. Your task is to determine whether two given board states are equivalent in this sense or not.</br></br></img></br></div>', '<div class="ptx" lang="en-US">The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. The first line of each test case consists of three integers W, H, and n (1 ≤ W, H ≤ 100). W is the width, and H is the height of the grid in terms of the number of grid points. n is the number of pieces on each board. The second line of each test case contains a sequence of n pairs of integers xi , yi, giving the coordinates of the pieces on the first board (0 ≤ xi &lt; W and 0 ≤ yi &lt; H). The third line of the test case describes the coordinates of the pieces on the second board in the same format.</div>', '<div class="ptx" lang="en-US">Your program should produce a single line for each test case containing a word YES or NO indicating whether the two boards are equivalent or not.</div>', '<pre class="sio">2\r\n8 5 11\r\n0 0 1 0 2 0 5 0 7 0 1 1 2 1 5 1 3 3 5 2 4 4\r\n0 4 0 3 0 2 1 1 1 4 1 3 3 3 5 2 6 2 7 2 7 4\r\n8 5 11\r\n0 0 1 0 2 0 5 0 7 0 1 1 2 1 5 1 3 3 6 1 4 4\r\n0 4 0 3 0 2 1 1 1 4 1 3 3 3 5 2 6 2 7 2 7 4</pre>', '<pre class="sio">YES\r\nNO</pre>', '', 'Tehran 2002', '44.85%', '85.21%', '2016-06-16 16:31:04', 5, '图', -0.902376176786593, 0.572035397549381),
(212, 'http://poj.org/problem?id=1022', '1022', 'Poj', ' 1000MS', ' 10000K', 'Packing Unit 4D Cubes', '<div class="ptx" lang="en-US"><img align="left" src="http://poj.org/images/1022/1.gif"> <br> <br> <br>We usually think that there are three geometric dimensions; the fourth dimension is usually time. However, the Association for Customizing Machines (ACM) has to deal with four geometrical dimensions for their strange customer EE3 who needs to pack four dimensional products into perpendicular parallelepipeds before shipping them to the newly emerged market niche just on the outskirts of the Milky Way.\r<br>Each of EE3 products consists of a number of unit 4D cubes that are glued together at their faces. A face of a 4D cube is a 3D cube and each 4D cube has 8 such faces. The picture on the left shows a 4D cube projected into a plane with the four principal, orthogonal axes shown. It takes a bit of effort to stretch our imagination and see the faces of a 4D cube in such a projection. The pictures below try to illustrate how the two faces along each of the four axes are situated in 4D. Again, using just the planar projection it is not so easy to illustrate and takes some effort to see. But we have done a good job, didn''t we?\r<br> <br> <br><img src="http://poj.org/images/1022/2.gif"> <br>Each EE3 product to be packed consists of a number of unit 4D cubes that are glued together along their faces which are 3D cubes. Your job is simple: find the minimal volume measured in the number of unit 4D cubes of a perpendicular parallelepiped (a 4D box) into which the product can be packed before shipping.</br></img></br></br></br></br></br></br></br></img></div>', '<div class="ptx" lang="en-US">The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by input data for each test case describing one EE3 product. The first line of each test case is an integer n (1 ≤ n ≤ 100) which is the number of unit 4D cubes used in the product. Next, there are n lines, each describing one unit cube and contains 9 nonnegative integer numbers.\r<br>The first number, a positive integer, is the unique identifier of a cube and the remaining 8 numbers give the identities of neighbors of the cube listed in the following order:\r<br>?the first two numbers are identifiers of the cubes glued to the opposing sides of the given cube along the x1 axis as seen looking in the direction of the x1 axis;\r<br>?the next two numbers as above but for the x2 axis;\r<br>?the next two numbers as above but for the x3 axis;\r<br>?the next two numbers as above but for the x4 axis;\r<br>If a cube does not have a neighbor glued to one of its faces we use 0 instead of a cube identifier.\r<br>The problem is that the employees of ACM may produce inconsistent descriptions of EE3 products. There are two sources of such inconsistencies:\r<br>?A consistent description must be symmetric, i.e. if cube x is glued to cube y at some face then cube y must be glued to cube x at the corresponding face along the same axis. The following description is inconsistent:\r<br>3 0 0 1 0 0 0 0 0\r<br>1 0 0 3 0 0 0 0 0\r<br>?Any description must describe a single solid, i.e. there must be only one component in the product. Thus the following is inconsistent:\r<br>1 2 0 0 0 0 0 0 0\r<br>2 0 1 0 0 0 0 0 0\r<br>3 0 0 4 0 0 0 0 0\r<br>4 0 0 0 3 0 0 0 0</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">There should be one output line per test case containing either the number of unit 4D cubes in the smallest 4D perpendicular parallelepiped oriented along the axes into which the product can be packed if the description is consistent, or the word Inconsistent, otherwise.</div>', '<pre class="sio">1\r\n9\r\n1 2 3 4 5 6 7 8 9\r\n2 0 1 0 0 0 0 0 0\r\n3 1 0 0 0 0 0 0 0\r\n4 0 0 0 1 0 0 0 0\r\n5 0 0 1 0 0 0 0 0\r\n6 0 0 0 0 0 1 0 0\r\n7 0 0 0 0 1 0 0 0\r\n8 0 0 0 0 0 0 0 1\r\n9 0 0 0 0 0 0 1 0</pre>', '<pre class="sio">81</pre>', '', 'Tehran 2002', '33.45%', '78.83%', '2016-06-16 16:31:04', 17, '树的DFS', -0.937423399746309, -0.374757068427979);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(213, 'http://poj.org/problem?id=1023', '1023', 'Poj', ' 1000MS', ' 10000K', 'The Fun Number System', '<div class="ptx" lang="en-US">In a k bit 2''s complement number, where the bits are indexed from 0 to k-1, the weight of the most significant bit (i.e., in position k-1), is -2^(k-1), and the weight of a bit in any position i (0 ≤ i &lt; k-1) is 2^i. For example, a 3 bit number 101 is -2^2 + 0 + 2^0 = -3. A negatively weighted bit is called a negabit (such as the most significant bit in a 2''s complement number), and a positively weighted bit is called a posibit.\r<br>A Fun number system is a positional binary number system, where each bit can be either a negabit, or a posibit. For example consider a 3-bit fun number system Fun3, where bits in positions 0, and 2 are posibits, and the bit in position 1 is a negabit. (110)Fun3 is evaluated as 2^2-2^1 + 0 = 3. Now you are going to have fun with the Fun number systems! You are given the description of a k-bit Fun number system Funk, and an integer N (possibly negative. You should determine the k bits of a representation of N in Funk, or report that it is not possible to represent the given N in the given Funk. For example, a representation of -1 in the Fun3 number system (defined above), is 011 (evaluated as 0 - 2^1 + 2^0), and\r<br>representing 6 in Fun3 is impossible.</br></br></div>', '<div class="ptx" lang="en-US">The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. Each test case is given in three consecutive lines. In the first line there is a positive integer k (1 ≤ k ≤ 64). In the second line of a test data there is a string of length k, composed only of letters n, and p, describing the Fun number system for that test data, where each n (p) indicates that the bit in that position is a negabit (posibit).\r<br>The third line of each test data contains an integer N (-2^63 ≤ N &lt; 2^63), the number to be represented in the Funk number\r<br>system by your program.</br></br></div>', '<div class="ptx" lang="en-US">For each test data, you should print one line containing either a k-bit string representing the given number N in the Funk number system, or the word Impossible, when it is impossible to represent the given number.</div>', '<pre class="sio">2\r\n3\r\npnp\r\n6\r\n4\r\nppnn\r\n10</pre>', '<pre class="sio">Impossible\r\n1110</pre>', '', 'Tehran 2002', '33.99%', '88.33%', '2016-06-16 16:31:04', 3, '模拟', -0.715592867386315, -0.329909004250104),
(214, 'http://poj.org/problem?id=1024', '1024', 'Poj', ' 1000MS', ' 10000K', 'Tester Program', '<div class="ptx" lang="en-US">Tester Program\r<br> <br>For this contest, we first designed the following problem (note that you do not have to solve it!):\r<br> <br><h1>Another Wall in the Maze</h1> <br>In ACM/ICPC contests, you''ll often see questions such as "find the shortest path out of this maze." Let''s turn this on its head and ask "given a path, find a maze for which the given path is the shortest path." Our paths will run vertically and horizontally between the regularly spaced points of a rectangular grid. The problem is to compute a set of unit-length baffles (walls) separating grid points that forces the given path to be the unique shortest path from its starting point to the end point. To make things more interesting, we will require that there should be no redundant walls constructed in the sense that it should not be possible to remove any wall and still have the given path as the unique shortest path. In the following figure for example, consider the path through the 8 ? 5 grid on the left maze of the top row. The wall placements in the two mazes to its right (top row) make that path unique. The two mazes on the lower row are faulty.\r<br>The path is not unique in the one on the left, and there are some redundant walls on the right.\r<br><img src="http://poj.org/images/1024/maze.gif"> <br><h2>Input (of the original problem)</h2> <br>The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. The first line of each test case consists of two integers W and H (1 ≤ W, H ≤ 100) giving the width and height of the grid respectively. The second line of the test case contains a path. The path always starts in the lowerleft corner, (0, 0). It is specified as a string of U (up), D (down), L (left), and R (right) characters (with no embedded white space). You may assume that the path remains within the bounds of the maze and does not intersect itself. It may end anywhere in the maze (i.e., not necessarily in a corner or against a wall).\r<br><h2>Output (of the original problem)</h2> <br>First line of the output for the i-th test case (starting from one) should contain an integer M, the number of walls used in the solution. Following the first line, there are M lines each containing a wall specification in the form of four consecutive integers corresponding to two pairs of (x, y) coordinates specifying adjacent grid points separated by the wall (0 ≤ x &lt; W and 0 ≤ y &lt; H). Note that the possible output is not unique. There should no blank line in the output.\r<br><h2>Sample Input (of the original problem)</h2> <br>2\r<br>8 5\r<br>RRRUULLURRRRDDRRUUU\r<br>4 3\r<br>RRRUU\r<br><h2>Sample Output (of the original problem)</h2> <br>19\r<br>0 0 0 1\r<br>1 0 1 1\r<br>2 0 2 1\r<br>2 1 3 1\r<br>3 0 4 0\r<br>3 1 4 1\r<br>3 2 4 2\r<br>3 2 3 3\r<br>2 2 2 3\r<br>4 2 4 3\r<br>0 3 0 4\r<br>1 3 1 4\r<br>2 3 2 4\r<br>3 3 3 4\r<br>4 3 4 4\r<br>5 3 5 4\r<br>5 3 6 3\r<br>5 2 6 2\r<br>6 1 6 2\r<br>2\r<br>2 2 3 2\r<br>2 2 2 1\r<br>This is the end of the original problem statement! Being lazy, we did not want to spend time to write a tester program for this problem, and decided to have you write this for us!\r<br>Write a program that receives both input and output as one input test case, and write as output CORRECT or INCORRECT to indicate whether or not the output is correct.</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></img></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">You read both input and output of the original problem from the standard input;it has each output just after each case''s input of the original problem.\r<br>Note that the output of original does not have formatting problems, i.e.,\r<br>  The number of lines in the output file is correct and is as supposed to be.\r<br>  There are no leading or trailing white space characters in output lines.\r<br>  Wall specifications are correct, meaning that the four numbers correctly specify a possible wall within the boundary of the maze.</br></br></br></br></div>', '<div class="ptx" lang="en-US">Your program should write a single line for each test case of the input containing a single word CORRECT or INCORRECT, indicating the original problem has correctly produced the output for that test case or not.</div>', '<pre class="sio">2\r\n8 5\r\nRRRUULLURRRRDDRRUUU\r\n19\r\n0 0 0 1\r\n1 0 1 1\r\n2 0 2 1\r\n2 1 3 1\r\n3 0 4 0\r\n3 1 4 1\r\n3 2 4 2\r\n3 2 3 3\r\n2 2 2 3\r\n4 2 4 3\r\n0 3 0 4\r\n1 3 1 4\r\n2 3 2 4\r\n3 3 3 4\r\n4 3 4 4\r\n5 3 5 4\r\n5 3 6 3\r\n5 2 6 2\r\n6 1 6 2\r\n4 3\r\nRRRUU\r\n2\r\n2 2 3 2\r\n2 2 2 1</pre>', '<pre class="sio">CORRECT\r\nINCORRECT</pre>', '', 'Tehran 2002', '35.20%', '78.28%', '2016-06-16 16:31:04', 6, '最短路', -0.929635127977483, -0.229416119703384),
(215, 'http://poj.org/problem?id=1025', '1025', 'Poj', ' 1000MS', ' 10000K', 'Department', '<div class="ptx" lang="en-US">The Department of Security has a new headquarters building. The building has several floors, and on each floor there are rooms numbered xxyy where yy stands for the room number and xx for the floor number, 0 &lt; xx; yy &lt;= 10. The building has `pater-noster'' elevator, i.e. elevator build up from several cabins running all around. From time to time the agents must visit the headquarters. During their visit they want to visit several rooms and in each room they want to stay for some time. Due to the security reasons, there can be only one agent in the same room at the same time, The same rule applies to the elevators. The visits are planned in the way ensuring they can be accomplished within one day. Each agent visits the headquarters at most once a day.\r<br> <br>Each agent enters the building at the 1st floor, passes the reception and then starts to visit the rooms according to his/her list. Agents always visit the rooms by the increasing room numbers. The agents form a linear hierarchy according to which they have assigned their one letter personal codes. The agents with higher seniority have lexicographically smaller codes. No two agents have the same code.\r<br> <br>If more then one agent want to enter a room, or an elevator, the agents have to form a queue. In each queue, they always stand according to their codes. The higher the seniority of the agent, the closer to the top of the queue he stands. Every 5 s (seconds) the first agent in the queue in front of the elevator enters the elevator. After visiting the last room in the headquarters each agent uses if necessary elevator to the first floor and exits the building.\r<br> <br>The times necessary to move from a certain point in the headquarters to another are set as follows: Entering the building, i.e. passing the reception and reaching the elevator, or a room on the first floor takes 30 s. Exiting the building, i.e. stepping out of the elevator or a room on the first floor and passing the reception takes also 30 s. On the same floor, the transfer from the elevator to the room (or to the queue in front of the room), or from the room to the elevator (or to the queue in front of the elevator), or from one room to another (or to the queue in front of the room) takes 10 s. The transfer from one floor to the next floor above or below in an elevator takes 30 s. Write a program that determines time course of agent''s visits in the headquarters. \r<br> <br/></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input file contains the descriptions of n &gt;= 0 visits of different agents. The first line of the description of each visit consists of agent''s one character code C, C = A, . . ., Z, and the time when the agent enters the headquarters. The time is in the format HH:MM:SS (hours, minutes, seconds). The next lines (there will be at least one) contain the room number, and the length of time intended to stay in the room, time is in seconds. Each room is in a separate line. The list of rooms is sorted according to the increasing room number. The list of rooms ends by the line containing 0. The list of the descriptions of visits ends by the line containing the character dot. </div>', '<div class="ptx" lang="en-US">The output contains detailed records of each agent''s visit in the headquarters. For each agent, there will be a block. Blocks are ordered in the order of increasing agent''s codes. Blocks are separated by an empty line. After the last block there is an empty line too. The first line of a block contains the code of agent. Next lines contain the starting and ending time (in format HH:MM:SS) and the descriptions of his/her activity. Time data will be separated by one blank character. Description will be separated from time by one blank character. Description will have a form Entry, Exit or Message. The Message can be one of the following: Waiting in elevator queue, Waiting in front of room RoomNumber, Transfer from room RoomNumber to room RoomNumber, Transfer from elevator to room RoomNumber, Transfer from RoomNumber to elevator, Stay in room RoomNumber, Stay in elevator. </div>', '<pre class="sio">A 10:00:00\r\n0101 100\r\n0110 50\r\n0202 90\r\n0205 50\r\n0\r\nB 10:01:00\r\n0105 100\r\n0201 5\r\n0205 200\r\n0\r\n.\r\n</pre>', '<pre class="sio">A\r\n10:00:00 10:00:30 Entry\r\n10:00:30 10:02:10 Stay in room 0101\r\n10:02:10 10:02:20 Transfer from room 0101 to room 0110\r\n10:02:20 10:03:10 Stay in room 0110\r\n10:03:10 10:03:20 Transfer from room 0110 to elevator\r\n10:03:20 10:03:50 Stay in elevator\r\n10:03:50 10:04:00 Transfer from elevator to room 0202\r\n10:04:00 10:05:30 Stay in room 0202\r\n10:05:30 10:05:40 Transfer from room 0202 to room 0205\r\n10:05:40 10:07:40 Waiting in front of room 0205\r\n10:07:40 10:08:30 Stay in room 0205\r\n10:08:30 10:08:40 Transfer from room 0205 to elevator\r\n10:08:40 10:09:10 Stay in elevator\r\n10:09:10 10:09:40 Exit\r\n\r\nB\r\n10:01:00 10:01:30 Entry\r\n10:01:30 10:03:10 Stay in room 0105\r\n10:03:10 10:03:20 Transfer from room 0105 to elevator\r\n10:03:20 10:03:25 Waiting in elevator queue\r\n10:03:25 10:03:55 Stay in elevator\r\n10:03:55 10:04:05 Transfer from elevator to room 0201\r\n10:04:05 10:04:10 Stay in room 0201\r\n10:04:10 10:04:20 Transfer from room 0201 to room 0205\r\n10:04:20 10:07:40 Stay in room 0205\r\n10:07:40 10:07:50 Transfer from room 0205 to elevator\r\n10:07:50 10:08:20 Stay in elevator\r\n10:08:20 10:08:50 Exit\r\n</pre>', '', 'Central Europe 1995', '23.99%', '66.54%', '2016-06-16 16:31:04', 21, '排序', -0.949159892620165, -1.16042871124779),
(216, 'http://poj.org/problem?id=1026', '1026', 'Poj', ' 1000MS', ' 10000K', 'Cipher', '<div class="ptx" lang="en-US">Bob and Alice started to use a brand-new encoding scheme. Surprisingly it is not a Public Key Cryptosystem, but their encoding and decoding is based on secret keys. They chose the secret key at their last meeting in Philadelphia on February 16th, 1996. They chose as a secret key a sequence of n distinct integers, a1 ; . . .; an, greater than zero and less or equal to n. The encoding is based on the following principle. The message is written down below the key, so that characters in the message and numbers in the key are correspondingly aligned. Character in the message at the position i is written in the encoded message at the position ai, where ai is the corresponding number in the key. And then the encoded message is encoded in the same way. This process is repeated k times. After kth encoding they exchange their message.\r<br> <br>The length of the message is always less or equal than n. If the message is shorter than n, then spaces are added to the end of the message to get the message with the length n.\r<br> <br>Help Alice and Bob and write program which reads the key and then a sequence of pairs consisting of k and message to be encoded k times and produces a list of encoded messages. \r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input file consists of several blocks. Each block has a number 0 &lt; n &lt;= 200 in the first line. The next line contains a sequence of n numbers pairwise distinct and each greater than zero and less or equal than n. Next lines contain integer number k and one message of ascii characters separated by one space. The lines are ended with eol, this eol does not belong to the message. The block ends with the separate line with the number 0. After the last block there is in separate line the number 0. </div>', '<div class="ptx" lang="en-US">Output is divided into blocks corresponding to the input blocks. Each block contains the encoded input messages in the same order as in input file. Each encoded message in the output file has the lenght n. After each block there is one empty line. </div>', '<pre class="sio">10\r\n4 5 3 7 2 8 1 6 10 9\r\n1 Hello Bob\r\n1995 CERC\r\n0\r\n0\r\n</pre>', '<pre class="sio">BolHeol  b\r\nC RCE\r\n\r\n</pre>', '', 'Central Europe 1995', '27.40%', '82.65%', '2016-06-16 16:31:04', 5, '图', -0.429482050323199, -0.877221491161578),
(217, 'http://poj.org/problem?id=1027', '1027', 'Poj', ' 1000MS', ' 10000K', 'The Same Game', '<div class="ptx" lang="en-US">The game named "Same" is a single person game played on a 10 \\Theta 15 board. Each square contains a ball colored red (R), green (G), or blue (B). Two balls belong to the same cluster if they have the same color, and one can be reached from another by following balls of the same color in the four directions up, down, left, and right. At each step of the game, the player chooses a ball whose cluster has at least two balls and removes all balls in the cluster from the board. Then, the board is "compressed" in two steps: \r<br>1. Shift the remaining balls in each column down to fill the empty spaces. The order of the balls in each column is preserved. \r<br>2. If a column becomes empty, shift the remaining columns to the left as far as possible. The order of the columns is preserved. \r<br>For example, choosing the ball at the bottom left corner in the sub-board below causes: \r<br><img src="http://poj.org/images/1027/game.jpg"> <br>The objective of the game is to remove every ball from the board, and the game is over when every ball is removed or when every cluster has only one ball. The scoring of each game is as follows. The player starts with a score of 0. When a cluster of m balls is removed, the player''s score increases by (m-2)^2 . A bonus of 1000 is given if every ball is removed at the end of the game. \r<br>You suspect that a good strategy might be to choose the ball that gives the largest possible cluster at each step, and you want to test this strategy by writing a program to simulate games played using this strategy. If there are two or more balls to choose from, the program should choose the leftmost ball giving the largest cluster. If there is still a tie, it should choose the bottommost ball of these leftmost balls. </br></br></img></br></br></br></br></div>', '<div class="ptx" lang="en-US">You will be given a number of games in the input. The first line of input contains a positive integer giving the number of games to follow. The initial arrangement of the balls of each game is given one row at a time, from top to bottom. Each row contains 15 characters, each of which is one of "R", "G", or "B", specifying the colors of the balls in the row from left to right. A blank line precedes each game. </div>', '<div class="ptx" lang="en-US">For each game, print the game number, followed by a new line, followed by information about each move, followed by the final score. Each move should be printed in the format: \r<br>Move x at (r,c): removed b balls of color C, got s points. \r<br>where x is the move number, r and c are the row number and column number of the chosen ball, respectively. The rows are numbered from 1 to 10 from the bottom, and columns are numbered from 1 to 15 from the left. b is the number of balls in the cluster removed. C is one of "R", "G", or "B", indicating the color of the balls removed. s is the score for this move. The score does not include the 1000 point bonus if all the balls are removed after the move. \r<br>The final score should be reported as follows: \r<br>Final score: s, with b balls remaining. \r<br>Insert a blank line between the output of each game. Use the plural forms "balls" and "points" even if the corresponding value is 1. </br></br></br></br></br></div>', '<pre class="sio">3 \r\nRGGBBGGRBRRGGBG \r\nRBGRBGRBGRBGRBG\r\nRRRRGBBBRGGRBBB\r\nGGRGBGGBRRGGGBG\r\nGBGGRRRRRBGGRRR\r\nBBBBBBBBBBBBBBB\r\nBBBBBBBBBBBBBBB\r\nRRRRRRRRRRRRRRR\r\nRRRRRRGGGGRRRRR\r\nGGGGGGGGGGGGGGG\r\n\r\nRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRR\r\nGGGGGGGGGGGGGGG\r\nGGGGGGGGGGGGGGG\r\nBBBBBBBBBBBBBBB\r\nBBBBBBBBBBBBBBB\r\nRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRR \r\nGGGGGGGGGGGGGGG\r\nGGGGGGGGGGGGGGG\r\n\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG</pre>', '<pre class="sio">Game 1: \r\n\r\nMove 1 at (4,1): removed 32 balls of color B, got 900 points. \r\nMove 2 at (2,1): removed 39 balls of color R, got 1369 points. \r\nMove 3 at (1,1): removed 37 balls of color G, got 1225 points. \r\nMove 4 at (3,4): removed 11 balls of color B, got 81 points. \r\nMove 5 at (1,1): removed 8 balls of color R, got 36 points. \r\nMove 6 at (2,1): removed 6 balls of color G, got 16 points. \r\nMove 7 at (1,6): removed 6 balls of color B, got 16 points. \r\nMove 8 at (1,2): removed 5 balls of color R, got 9 points. \r\nMove 9 at (1,2): removed 5 balls of color G, got 9 points. \r\nFinal score: 3661, with 1 balls remaining. \r\n\r\nGame 2: \r\n\r\nMove 1 at (1,1): removed 30 balls of color G, got 784 points. \r\nMove 2 at (1,1): removed 30 balls of color R, got 784 points. \r\nMove 3 at (1,1): removed 30 balls of color B, got 784 points. \r\nMove 4 at (1,1): removed 30 balls of color G, got 784 points. \r\nMove 5 at (1,1): removed 30 balls of color R, got 784 points. \r\nFinal score: 4920, with 0 balls remaining. \r\n\r\nGame 3: \r\n\r\nFinal score: 0, with 150 balls remaining. </pre>', '', 'East Central North America 1999', '37.73%', '84.95%', '2016-06-16 16:31:04', 3, '模拟', -0.855646546173638, -0.0192946338329703),
(218, 'http://poj.org/problem?id=1028', '1028', 'Poj', ' 1000MS', ' 10000K', 'Web Navigation', '<div class="ptx" lang="en-US">Standard web browsers contain features to move backward and forward among the pages recently visited. One way to implement these features is to use two stacks to keep track of the pages that can be reached by moving backward and forward. In this problem, you are asked to implement this. \r<br>The following commands need to be supported: \r<br>BACK: Push the current page on the top of the forward stack. Pop the page from the top of the backward stack, making it the new current page. If the backward stack is empty, the command is ignored. \r<br>FORWARD: Push the current page on the top of the backward stack. Pop the page from the top of the forward stack, making it the new current page. If the forward stack is empty, the command is ignored. \r<br>VISIT <url>: Push the current page on the top of the backward stack, and make the URL specified the new current page. The forward stack is emptied. \r<br>QUIT: Quit the browser. \r<br>Assume that the browser initially loads the web page at the URL http://www.acm.org/ </br></br></url></br></br></br></br></div>', '<div class="ptx" lang="en-US">Input is a sequence of commands. The command keywords BACK, FORWARD, VISIT, and QUIT are all in uppercase. URLs have no whitespace and have at most 70 characters. You may assume that no problem instance requires more than 100 elements in each stack at any time. The end of input is indicated by the QUIT command. </div>', '<div class="ptx" lang="en-US">For each command other than QUIT, print the URL of the current page after the command is executed if the command is not ignored. Otherwise, print "Ignored". The output for each command should be printed on its own line. No output is produced for the QUIT command. </div>', '<pre class="sio">VISIT http://acm.ashland.edu/\r\nVISIT http://acm.baylor.edu/acmicpc/\r\nBACK\r\nBACK\r\nBACK\r\nFORWARD\r\nVISIT http://www.ibm.com/\r\nBACK\r\nBACK\r\nFORWARD\r\nFORWARD\r\nFORWARD\r\nQUIT</pre>', '<pre class="sio">http://acm.ashland.edu/\r\nhttp://acm.baylor.edu/acmicpc/\r\nhttp://acm.ashland.edu/\r\nhttp://www.acm.org/\r\nIgnored\r\nhttp://acm.ashland.edu/\r\nhttp://www.ibm.com/\r\nhttp://acm.ashland.edu/\r\nhttp://www.acm.org/\r\nhttp://acm.ashland.edu/\r\nhttp://www.ibm.com/\r\nIgnored</pre>', '', 'East Central North America 2001', '44.62%', '91.91%', '2016-06-16 16:31:04', 3, '模拟', -0.1132457653765, 0.552933444288434),
(219, 'http://poj.org/problem?id=1029', '1029', 'Poj', ' 1000MS', ' 65536K', 'False coin', '<div class="ptx" lang="en-US">The "Gold Bar"bank received information from reliable sources that in their last group of N coins exactly one coin is false and differs in weight from other coins (while all other coins are equal in weight). After the economic crisis they have only a simple balance available (like one in the picture). Using this balance, one is able to determine if the weight of objects in the left pan is less than, greater than, or equal to the weight of objects in the right pan.\r<br>In order to detect the false coin the bank employees numbered all coins by the integers from 1 to N, thus assigning each coin a unique integer identifier. After that they began to weight various groups of coins by placing equal numbers of coins in the left pan and in the right pan. The identifiers of coins and the results of the weightings were carefully recorded.\r<br>You are to write a program that will help the bank employees to determine the identifier of the false coin using the results of these weightings.\r<br/></br></br></div>', '<div class="ptx" lang="en-US">The first line of the input file contains two integers N and K, separated by spaces, where N is the number of coins (2&lt;=N&lt;=1000 ) and K is the number of weightings fulfilled (1&lt;=K&lt;=100). The following 2K lines describe all weightings. Two consecutive lines describe each weighting. The first of them starts with a number Pi (1&lt;=Pi&lt;=N/2), representing the number of coins placed in the left and in the right pans, followed by Pi identifiers of coins placed in the left pan and Pi identifiers of coins placed in the right pan. All numbers are separated by spaces. The second line contains one of the following characters: ''&lt;'', ''&gt;'', or ''=''. It represents the result of the weighting:\r<br>''&lt;'' means that the weight of coins in the left pan is less than the weight of coins in the right pan,\r<br>''&gt;'' means that the weight of coins in the left pan is greater than the weight of coins in the right pan,\r<br>''='' means that the weight of coins in the left pan is equal to the weight of coins in the right pan.\r<br/></br></br></br></div>', '<div class="ptx" lang="en-US">Write to the output file the identifier of the false coin or 0, if it cannot be found by the results of the given weightings.</div>', '<pre class="sio">5 3\r\n2 1 2 3 4\r\n&lt;\r\n1 1 4\r\n=\r\n1 2 5\r\n=</pre>', '<pre class="sio">3</pre>', '', 'Northeastern Europe 1998', '28.08%', '78.03%', '2016-06-16 16:31:04', 3, '模拟', -0.506093765326962, -0.820746151085736),
(220, 'http://poj.org/problem?id=1119', '1119', 'Poj', ' 1000MS', ' 10000K', 'Start Up the Startup', '<div class="ptx" lang="en-US">Clearly the economy is bound to pick up again soon. As a forward-thinking Internet entrepreneur, you think that the ''Net will need a new search engine to serve all the people buying new computers. Because you''re frustrated with the poor results most search engines produce, your search engine will be better. \r<br> <br>You''ve come up with what you believe is an innovative approach to document matching. By giving weight to the number of times a term appears in both the search string and in the document being checked, you believe you can produce a more accurate search result. \r<br> <br>Your program will be given a search string, followed by a set of documents. You will calculate the score for each document and print it to output in the order the document appears in the input. To calculate the score for a document you must first calculate the term score for each term appearing in the search string. A term score is the number of times a term occurs in the search string multiplied by the number of times it occurs in the document. The document score is the sum of the square roots of each term score. \r<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">The input consists of a set of documents separated by single lines containing only ten dashes, "---------" No line will be longer than 250 characters. No document will be longer than 100 lines. The first document is the search string. The input terminates with two lines of ten dashes in a row. \r<br> <br>The input documents will use the full ASCII character set. You must parse each document into a set of terms. \r<br> <br>Terms are separated by whitespace in the input document. Comparisons between terms are case-insensitive. Punctuation is removed from terms prior to comparisons, e.g. "don''t" becomes "dont" The resulting terms should contain only the characters {[a-z],[0-9]}. A term in the input consisting only of punctuation should be ignored. You may assume the search string and each document will have at least one valid term. </br></br></br></br></div>', '<div class="ptx" lang="en-US">The output is a series of scores, one per line, printed to two decimal places. The scores are printed in the order the documents occur in the input. No other characters may appear in the output. </div>', '<pre class="sio">fee fi fo fum \r\n---------- \r\nfee, fi, fo! fum!! \r\n---------- \r\nfee fee fi, me me me \r\n---------- \r\n---------- </pre>', '<pre class="sio">4.00\r\n2.41</pre>', '', 'Mid-Atlantic 2001', '24.94%', '72.19%', '2016-06-16 16:31:04', 13, '图的DFS', -0.93928933985759, -1.08152933908301),
(221, 'http://poj.org/problem?id=1120', '1120', 'Poj', ' 1000MS', ' 10000K', 'A New Growth Industry', '<div class="ptx" lang="en-US">A biologist experimenting with DNA modification of bacteria has found a way to make bacterial colonies sensitive to the surrounding population density. By changing the DNA, he is able to "program"the bacteria to respond to the varying densities in their immediate neighborhood. \r<br> <br>The culture dish is a square, divided into 400 smaller squares (20x20). Population in each small square is measured on a four point scale (from 0 to 3). The DNA information is represented as an array D, indexed from 0 to 15, of integer values and is interpreted as follows: \r<br> <br>In any given culture dish square, let K be the sum of that square''s density and the densities of the four squares immediately to the left, right, above and below that square (squares outside the dish are considered to have density 0). Then, by the next day, that dish square''s density will change by D[K] (which may be a positive, negative, or zero value). The total density cannot, however, exceed 3 nor drop below 0. \r<br> <br>Now, clearly, some DNA programs cause all the bacteria to die off (e.g., [-3, -3, ..., -3]). Others result in immediate population explosions (e.g., [3,3,3, ..., 3]), and others are just plain boring (e.g., [0, 0,...,0]). The biologist is interested in how some of the less obvious DNA programs might behave. \r<br> <br>Write a program to simulate the culture growth, reading in the number of days to be simulated, the DNA rules, and the initial population densities of the dish. </br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Input to this program consists of three parts: \r<br> <br>1. The first line will contain a single integer denoting the number of days to be simulated. \r<br> <br>2. The second line will contain the DNA rule D as 16 integer values, ordered from D[0] to D[15], separated from one another by one or more blanks. Each integer will be in the range -3...3, inclusive. \r<br> <br>3. The remaining twenty lines of input will describe the initial population density in the culture dish. Each line describes one row of squares in the culture dish, and will contain 20 integers in the range 0?, separated from one another by 1 or more blanks</br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The program will produce exactly 20 lines of output, describing the population densities in the culture dish at the end of the simulation. Each line represents a row of squares in the culture dish, and will consist of 20 characters, plus the usual end-of-line terminator. \r<br> <br>Each character will represent the population density at a single dish square, as follows: \r<br><center><img src="http://poj.org/images/1120/1120_1.gif"/></center> <br>No other characters may appear in the output. </br></br></br></br></div>', '<pre class="sio">2 \r\n0 1 1 1 2 1 0 -1 -1 -1 -2 -2 -3 -3 -3 -3 \r\n3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 </pre>', '<pre class="sio">##!................. \r\n#!.................. \r\n!................... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n.........!.......... \r\n........!#!......... \r\n.......!#X#!........ \r\n........!#!......... \r\n.........!.......... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n....................</pre>', '', 'Mid-Atlantic 2001', '47.32%', '89.31%', '2016-06-16 16:31:04', 3, '模拟', -0.929770341029025, 0.777173765177809),
(222, 'http://poj.org/problem?id=1121', '1121', 'Poj', ' 1000MS', ' 10000K', 'Algernon''s Noxious Emissions', '<div class="ptx" lang="en-US">One of the greatest alchemists of the lower Middle Renaissance, Algernon da Vinci (one of Leonardo''s lesserknown cousins), had the foresight to construct his chemical works directly over a fast-running stream. Through a series of clever pipes and sluices, he routed portions of the stream past each of the tables where his alchemists prepared their secret brews, allowing them to dispose of their chemical byproducts into the waters flowing by the table. \r<br> <br>As Algernon''s business grew, he even added additional floors to his factory, with water lifted to the higher floors by treadmill-powered pumps (much to the dismay of the apprentices who found themselves assigned to pump duty). The pipework for the entire disposal system became quite complex. It was even rumored by some that the pipes actually circled back in some places, so that a particularly odorous compound flushed away from one table might return to that very same spot a few minutes later. \r<br> <br>All was not well, however. Algernon''s factory suffered from a series of mishaps, minor explosions, gas clouds, etc. It became obvious that chemicals dumped at one table might react violently with other chemicals dumped from another table downstream. Algernon realized that he needed to trace the possible chemical flows through his factory. \r<br> <br>Write a program to aid Algernon in this task. To preserve the secrecy of the chemical processes that are Algernon''s stock in trade, all chemicals will be identified by a single upper-case letter. All tables are identified by positive numbers in the range 1...N, where N is the number of tables. \r<br/></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Line 1: \r<br># of work tables, integer (henceforth referred to as N). N &lt; 50 \r<br> <br>Lines 2...N+1 \r<br>For each table: \r<br>?a list of chemicals dumped into the stream at that table, followed by \r<br>?a list of chemicals that, if they appeared at that table, would be harmlessly neutralized by the reactions at that table, allowing no further trace of that chemical to flow downstream (we will assume that the rate of work at each table can be adjusted as necessary to guarantee total neutralization of whatever amount of these chemicals arrive from upstream). \r<br> <br>Each of these lists is given as a series of upper-case alphabetic characters. The only exception is that a special list, consisting of a single ''.'' character, will be used to denote an empty list. The two lists are separated from one other by one or more blanks. The same chemical will never appear in both lists. \r<br> <br>Lines N+2...? \r<br>These lines provide a description of the pipeworks. Each line contains a pair of integers in the range 1...N, separated by one or more blanks: \r<br>I J \r<br>meaning that the table number I is upstream of table number J--anything dumped into the stream at table I or that arrives in the stream at table I and is not neutralized can then be counted on to arrive at table J. \r<br> <br>No (I,J) pair will be listed more than once, but the pairs may occur in any order. I and J will never be the same number. \r<br> <br>The end of input is signaled by a pair of zeros: \r<br>0 0 \r<br> <br>Note that if a table only receives water directly from the stream entering the building, that table will never occur in the second position of a pair. Similarly, any table that discharges only into the stream leaving the building will never occur in the first position of a pair. \r<br/></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">There will be N lines of output, one for each table, in the same order as they appeared in the program input. Each line will contain the list of chemicals that can be expected at that table''s output. This list will be printed as a (possibly empty) list of upper-case alphabetic characters between two colons (:). No empty spaces should be printed on the line. The characters in the list should be sorted in alphabetic order. \r<br> <br>This is the picture for the sample input date:\r<br><center><img src="http://poj.org/images/1121/1121_1.gif"/></center></br></br></br></div>', '<pre class="sio">4 \r\nAB C \r\nC BDA \r\nBCD . \r\n. A \r\n1 2 \r\n2 4 \r\n3 1 \r\n1 3 \r\n3 4 \r\n0 0 </pre>', '<pre class="sio">:ABD: \r\n:C: \r\n:ABCD: \r\n:BCD:</pre>', '', 'Mid-Atlantic 2001', '44.51%', '72.16%', '2016-06-16 16:31:04', 4, '动规', -0.99039987334051, 0.54379772751146),
(223, 'http://poj.org/problem?id=1122', '1122', 'Poj', ' 1000MS', ' 10000K', 'FDNY to the Rescue!', '<div class="ptx" lang="en-US">The Fire Department of New York (FDNY) has always been proud of their response time to fires in New York City, but they want to make their response time even better. To help them with their response time, they want to make sure that the dispatchers know the closest firehouse to any address in the city. You have been hired to write this software and are entrusted with maintaining the proud tradition of FDNY. Conceptually, the software will be given the address of the fire, the locations of the firehouses, street intersections, and the time it takes to cover the distance between each intersection. It will then use this information to calculate how long it takes to reach an address from each firehouse. \r<br> <br>Given a specific fire location in the city, the software will calculate the time taken from all the fire stations located in the city to reach the fire location. The list of fire stations will be sorted from shortest time to longest time. The dispatcher can then pick the closest firestation with available firefighters and equipment to dispatch to the fire. </br></br></div>', '<div class="ptx" lang="en-US">Line 1: \r<br># of intersections in the city, a single integer (henceforth referred to as N) N&lt;20 \r<br> <br>Lines 2 to N+1: \r<br>A table (square matrix of integer values separated by one or more spaces) representing the time taken in minutes between every pair of intersections in the city. In the sample input shown below the value "3" on the 1st row and the 2nd column represents the time taken from intersection #1 to reach intersection #2. \r<br> <br>Similarly the value "9" on the 4th row and the 2nd column represents the time taken from intersection #4 to reach intersection #2. \r<br> <br>A value of -1 for time means that it is not possible to go directly from the origin intersection (row #) to the destination intersection (column #). All other values in the table are non-negative. \r<br> <br>Line N+2: \r<br>An integer value n (&lt;= N) indicating the intersection closest to the fire location followed by one or more integer values for the intersections closest to the fire stations (all on one line, separated by one or more spaces) will follow the input matrix. \r<br> <br>Notes on input format: \r<br> <br>1. The rows and columns are numbered from 1 to N. \r<br>2. All input values are integers \r<br>3. All fire locations are guaranteed reachable from all firehouses. \r<br>4. All distance calculations are made from the intersection closest to each firehouse to the intersection closest to the fire. \r<br/></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Line 1: \r<br>A label line with the headings for each column, exactly as shown in the example. \r<br> <br>Line 2 onwards (one line for each fire station): \r<br>A sorted list (based on time) showing the fire station (origin), the destination site, time taken and a complete shortest path of nodes from the originating fire station to the fire location. \r<br> <br>Notes on output format: \r<br>1. Columns are tab separated. \r<br>2. If two or more firehouses are tied in time they can be printed in any order. \r<br>3. If more than one path exists that has the same minimal time for a given location &amp; firehouse, either one can be printed on the output. \r<br>4. If the fire location and the fire station locations happen to be the same intersection, the output will indicate that the origin and destination have the same intersection number, the time will be "0" and the nodes in the shortest path will show just one number, the fire location. \r<br>Next is the picture for the sample input data.\r<br><center><img src="http://poj.org/images/1122/1122_1.gif"/></center></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<pre class="sio">6 \r\n0  3  4 -1 -1 -1 \r\n-1 0  4  5 -1 -1 \r\n2  3  0 -1 -1  2 \r\n8  9  5  0  1 -1 \r\n7  2  1 -1  0 -1 \r\n5 -1  4  5  4  0 \r\n2  4  5  6 \r\nIn the above input the last line indicates that "2" is the location of the fire and "4", "5" and "6" are the intersections where fire stations are located. </pre>', '<pre class="sio">Org	Dest	Time	Path\r\n5	2	2	5	2\r\n4	2	3	4	5	2\r\n6	2	6	6	5	2</pre>', '', 'Mid-Atlantic 2001', '30.67%', '81.81%', '2016-06-16 16:31:04', 6, '最短路', -0.923469412827163, -0.605641546973335),
(224, 'http://poj.org/problem?id=1123', '1123', 'Poj', ' 5000MS', ' 10000K', 'For the Porsche', '<div class="ptx" lang="en-US">The Cash Cow Consulting Company is challenging the Vice Presidents to increase the profitability of their departments. In an effort to provide proper incentive, the Vice President whose department has the highest Profitability Index (PI) will win a brand new Porsche. The contest rules are as follows: \r<br><ul> <br><li>The winning department will have the maximum Profitability Index (sales / development cost) \r<br> <br><li>Each department must stay within the minimum and maximum cost range. \r<br> <br><li>In the case of equal profitability indexes, the higher profit margin will win (sales ?development cost). \r<br> <br><li>If two departments are still tied, the winning department will develop the smaller number of features. \r<br> <br><li>If two departments are still tied, the winning department will satisfy the most customers. \r<br/></li></br></br></li></br></br></li></br></br></li></br></br></li></br></ul> <br> <br>Mike Miser is still driving his high school moped and has determined this is his chance to upgrade. He has instructed the engineering department to determine what it will cost for each feature to be developed. He then instructed the sales force to determine what features each customer requires, and what sales that will generate. (To make a sale to a customer all features required must be provided). \r<br> <br>Mike will then determine which feature combination his division should complete to maximize his chances of winning the contest. \r<br> <br>Notes: \r<br> <br>1. Because of the type of product the Cash Cow Consulting Company creates, the production costs are negligible, and do not need to be considered. Only the development costs should be considered. \r<br>2. The tie breakers listed will result in the selection of exactly one feature set. \r<br>3. At least one feature set will satisfy the requirements. \r<br>4. The Profitability Index should be rounded to three decimal places. The values 3.4566 and 3.4574 will be considered equal.\r<br/></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">All input will be positive integers. \r<br> <br>The first line of input will indicate the number of data sets. \r<br> <br>The first line of each data set will contain 4 integers separated by white-space. In order they are the minimum cost, maximum cost, number of potential features (N) and number of potential customers (M). N and M will be no larger than 20. \r<br> <br>The next N lines (one for each feature) indicate the cost of each feature. \r<br> <br>The next M lines will contain the following (one line for each customer): \r<br>Number of required features Feature number (for each required feature) Total Sales for that customer. \r<br>For instance, if a given customer wanted 3 features, number 1,2 and 5 and would provide sales of 50, the line would read: "3 1 2 5 50"\r<br> <br>The next data set, if more remain, will begin on the next line. </br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The first line of output for each data set should indicate which Feature Set is being considered. These should print "Feature Set N" where N is the feature set number, counting from 1. \r<br> <br>The next line of output for each data set should indicate the profitability index to 3 decimal places. \r<br> <br>The next line of output for each data set should indicate the sales dollars \r<br> <br>The next line of output for each data set should indicate the cost \r<br> <br>The next line of output for each data set should indicate which features are implemented. \r<br>The first feature is feature number 1. They must be listed in order, white-space separated. \r<br> <br>The final line of output for each data set should indicate the customers who were satisfied. The first customer is customer #1. They must be listed in order, white-space separated. \r<br> <br>No extra output should appear. </br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<pre class="sio">1 \r\n100 2000 7 6 \r\n250 \r\n350 \r\n400 \r\n250 \r\n250 \r\n250 \r\n500 \r\n4 1 4 5 6 4000 \r\n4 1 4 5 6 500 \r\n4 1 4 5 6 60 \r\n3 1 4 5 7 \r\n4 1 2 3 5 5 \r\n4 1 2 3 7 6 </pre>', '<pre class="sio">Feature Set 1 \r\n4.567 \r\n4567 \r\n1000 \r\n1 4 5 6 \r\n1 2 3 4</pre>', '', 'Mid-Atlantic 2001', '35.00%', '67.33%', '2016-06-16 16:31:04', 19, '二叉树', -0.989182955876631, -0.246026513843338);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(225, 'http://poj.org/problem?id=1124', '1124', 'Poj', ' 1000MS', ' 10000K', 'Oh, Those Achin'' Feet', '<div class="ptx" lang="en-US">In recent days, a number of people have been injured after being pushed off the sidewalks due to overcrowding. City Hall is interested in figuring out how much pedestrian traffic its sidewalks receive every day. The results of this study will be used to determine whether the city needs to fund more sidewalks. The city has surveyed various buildings in several blocks to determine the traffic patterns they generate. Your job is to take this survey data and convert it into sidewalk utilization information. \r<br> <br>Your program will read in the size of the map and a map of several city blocks. Buildings, streets, and building entrance/exits will be marked on the map. You will also be given a list of pedestrian load between several pairs of exits and entrances. Your program will determine the paths used by pedestrians between each source and destination, add up the total pedestrian load from all paths using each street, and output a table of the total pedestrian load on each square. \r<br> <br>Notes: \r<br><ul> <br><li>The map is divided into squares. Each square of the map can be a street square, a building square, or an entrance/exit square. An entrance/exit square serves as both entrance and exit for that building. There will be no more than 90 street squares in the map. \r<br> <br><li>People will always follow the shortest path between their origin and destination. No shortest path will exceed 75 squares. \r<br> <br><li>If there are multiple equal-length shortest paths, the load will be divided equally amongst the paths. For shortest paths, there will be fewer than 50000 equallength path combinations. \r<br> <br><li>If a building entrance/exit has multiple sides facing a street (for example, a corner of a building), the pedestrians may enter or exit through any street-facing side. \r<br> <br><li>All movement will be strictly N, E, S, or W. No diagonal movement is permitted. \r<br> <br><li>Pedestrians cannot move through buildings or off the edge of the map. \r<br> <br><li>For convenience, you may ignore the fact that each street section may have two sidewalks. \r<br> <br><li>Traffic load is not applied to the actual exit/entrance squares themselves. \r<br> <br><li>If an origin and destination are adjacent on the map, pedestrians may move directly between them. In this case, there is no resulting load placed on any portion of the map because no streets are used. \r<br/></li></br></br></li></br></br></li></br></br></li></br></br></li></br></br></li></br></br></li></br></br></li></br></br></li></br></ul></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">Line 1: X Y \r<br>X is the number of columns in the map, Y is the number of rows. Each is a positive integer less than 20. \r<br> <br>Line 2-(Y+1): \r<br>Each line contains exactly X symbols indicating the contents of that square on the map. The symbols are: \r<br>X: building, non-entrance/exit \r<br>.: (period) street \r<br>{A-O}: letter indicating exit/entrance. Each letter may occur at most once. \r<br> <br>Lines (Y+2)-?: \r<br>Each line indicates a pedestrian route and specifies a source, destination, and pedestrian load. Source and destination will each be a letter {A-O} with no spaces in between. The load factor will be a nonnegative integer, separated from the destination by whitespace. Source and destination will never be equal. At most 25 routes will be given. There will be a valid path in the map for each requested route. \r<br> <br>The file will terminate with the line: \r<br>XX 0 </br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="ptx" lang="en-US">The output consists of Y lines, each with X space-separated fields indicating the load factor. Each load factor is printed to two decimal places with 4 spaces for integer digits (C 7.2 format). </div>', '<pre class="sio">4 4 \r\n.... \r\nA.X. \r\nXXX. \r\nB... \r\nAB 2 \r\nBA 1 \r\nXX 0 </pre>', '<pre class="sio">   1.50   3.00   3.00   3.00 \r\n   0.00   1.50   0.00   3.00 \r\n   0.00   0.00   0.00   3.00 \r\n   0.00   3.00   3.00   3.00 </pre>', '', 'Mid-Atlantic 2001', '29.44%', '67.79%', '2016-06-16 16:31:04', 19, '二叉树', -0.988425762787995, -0.70779547093405),
(226, 'http://poj.org/problem?id=1125', '1125', 'Poj', ' 1000MS', ' 10000K', 'Stockbroker Grapevine', '<div class="ptx" lang="en-US">Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way.\r<br> <br>Unfortunately for you, stockbrokers only trust information coming from their "Trusted sources" This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information.</br></br></div>', '<div class="ptx" lang="en-US">Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts (n), followed by n pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a ''1'' means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules.\r<br> <br>Each person is numbered 1 through to the number of stockbrokers. The time taken to pass the message on will be between 1 and 10 minutes (inclusive), and the number of contacts will range between 0 and one less than the number of stockbrokers. The number of stockbrokers will range from 1 to 100. The input is terminated by a set of stockbrokers containing 0 (zero) people.\r<br> <br/></br></br></br></div>', '<div class="ptx" lang="en-US">For each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes.\r<br>It is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message "disjoint". Note that the time taken to pass the message from person A to person B is not necessarily the same as the time taken to pass it from B to A, if such transmission is possible at all. </br></div>', '<pre class="sio">3\r\n2 2 4 3 5\r\n2 1 2 3 6\r\n2 1 2 2 2\r\n5\r\n3 4 4 2 8 5 3\r\n1 5 8\r\n4 1 6 4 10 2 7 5 2\r\n0\r\n2 2 5 1 5\r\n0</pre>', '<pre class="sio">3 2\r\n3 10</pre>', '', 'Southern African 2001', '55.09%', '96.98%', '2016-06-16 16:31:04', 6, '最短路', -0.0954246851832493, 1.42248757751501),
(227, 'http://acm.hdu.edu.cn/showproblem.php?pid=1001', '1001', 'Hdu', '0.5s', '32.0MB', 'Sum Problem', '<div class="panel_content">Hey, welcome to HDOJ(Hangzhou Dianzi University Online Judge).<br><br>In this problem, your task is to calculate SUM(n) = 1 + 2 + 3 + ... + n.<br/></br></br></div>', '<div class="panel_content">The input will consist of a series of integers n, one integer per line.<br/></div>', '<div class="panel_content">For each case, output SUM(n) in one line, followed by a blank line. You may assume the result will be in the range of 32-bit signed integer.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n100</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n\r\n5050</div></pre></div>', '', '', '25.15%', NULL, '2016-06-16 16:31:07', 2, '数论', 7.49269747657117, -0.947505557621327),
(228, 'http://acm.hdu.edu.cn/showproblem.php?pid=1002', '1002', 'Hdu', '1.0s', '32.0MB', 'A + B Problem II', '<div class="panel_content">I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.<br/></div>', '<div class="panel_content">The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000.<br/></div>', '<div class="panel_content">For each test case, you should output two lines. The first line is "Case #:", # means the number of the test case. The second line is the an equation "A + B = Sum", Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n1 2\r\n112233445566778899 998877665544332211</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Case 1:\r\n1 + 2 = 3\r\n\r\nCase 2:\r\n112233445566778899 + 998877665544332211 = 1111111111111111110</div></pre></div>', '', '', '19.34%', NULL, '2016-06-16 16:31:07', 3, '模拟', 5.42833845045132, -1.36736565196595),
(229, 'http://acm.hdu.edu.cn/showproblem.php?pid=1003', '1003', 'Hdu', '1.0s', '32.0MB', 'Max Sum', '<div class="panel_content">Given a sequence a[1],a[2],a[3]......a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.<br/></div>', '<div class="panel_content">The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1&lt;=N&lt;=100000), then N integers followed(all the integers are between -1000 and 1000).<br/></div>', '<div class="panel_content">For each test case, you should output two lines. The first line is "Case #:", # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n5 6 -1 5 4 -7\r\n7 0 6 -1 1 -6 7 -5</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Case 1:\r\n14 1 4\r\n\r\nCase 2:\r\n7 1 6</div></pre></div>', '', '', '23.47%', NULL, '2016-06-16 16:31:07', 4, '动规', 3.37116250362015, -1.06891088610652),
(230, 'http://acm.hdu.edu.cn/showproblem.php?pid=1004', '1004', 'Hdu', '1.0s', '32.0MB', 'Let the Balloon Rise', '<div class="panel_content">Contest time again! How excited it is to see balloons floating around. But to tell you a secret, the judges'' favorite time is guessing the most popular problem. When the contest is over, they will count the balloons of each color and find the result.<br><br>This year, they decide to leave this lovely job to you. <br/></br></br></div>', '<div class="panel_content">Input contains multiple test cases. Each test case starts with a number N (0 &lt; N &lt;= 1000) -- the total number of balloons distributed. The next N lines contain one color each. The color of a balloon is a string of up to 15 lower-case letters.<br><br>A test case with N = 0 terminates the input and this test case is not to be processed.<br/></br></br></div>', '<div class="panel_content">For each case, print the color of balloon for the most popular problem on a single line. It is guaranteed that there is a unique solution for each test case.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">5\r\ngreen\r\nred\r\nblue\r\nred\r\nred\r\n3\r\npink\r\norange\r\npink\r\n0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">red\r\npink</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=ZJCPC2004&amp;source=1&amp;searchmode=source"> ZJCPC2004 </a> </div>', '38.49%', NULL, '2016-06-16 16:31:07', 19, '二叉树', 1.1600368142244, 0.0165105626122786),
(231, 'http://acm.hdu.edu.cn/showproblem.php?pid=1005', '1005', 'Hdu', '1.0s', '32.0MB', 'Number Sequence', '<div class="panel_content">A number sequence is defined as follows:<br><br>f(1) = 1, f(2) = 1, f(n) = (A * f(n - 1) + B * f(n - 2)) mod 7.<br><br>Given A, B, and n, you are to calculate the value of f(n).<br/></br></br></br></br></div>', '<div class="panel_content">The input consists of multiple test cases. Each test case contains 3 integers A, B and n on a single line (1 &lt;= A, B &lt;= 1000, 1 &lt;= n &lt;= 100,000,000). Three zeros signal the end of input and this test case is not to be processed.<br/></div>', '<div class="panel_content">For each test case, print the value of f(n) on a single line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 1 3\r\n1 2 10\r\n0 0 0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n5</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=ZJCPC2004&amp;source=1&amp;searchmode=source"> ZJCPC2004 </a> </div>', '24.36%', NULL, '2016-06-16 16:31:07', -1, '未分类', 2.09986097210725, -1.00459496803996),
(232, 'http://acm.hdu.edu.cn/showproblem.php?pid=1006', '1006', 'Hdu', '1.0s', '32.0MB', 'Tick and Tick', '<div class="panel_content">The three hands of the clock are rotating every second and meeting each other many times everyday. Finally, they get bored of this and each of them would like to stay away from the other two. A hand is happy if it is at least D degrees from any of the rest. You are to calculate how much time in a day that all the hands are happy.<br/></div>', '<div class="panel_content">The input contains many test cases. Each of them has a single line with a real number D between 0 and 120, inclusively. The input is terminated with a D of -1.<br/></div>', '<div class="panel_content">For each D, print in a single line the percentage of time in a day that all of the hands are happy, accurate up to 3 decimal places.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">0\r\n120\r\n90\r\n-1</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">100.000\r\n0.000\r\n6.251</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=ZJCPC2004&amp;source=1&amp;searchmode=source"> ZJCPC2004 </a> </div>', '24.63%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.649271145855617, -0.985083397390554),
(233, 'http://acm.hdu.edu.cn/showproblem.php?pid=1007', '1007', 'Hdu', '5.0s', '32.0MB', 'Quoit Design', '<div class="panel_content">Have you ever played quoit in a playground? Quoit is a game in which flat rings are pitched at some toys, with all the toys encircled awarded.<br>In the field of Cyberground, the position of each toy is fixed, and the ring is carefully designed so it can only encircle one toy at a time. On the other hand, to make the game look more attractive, the ring is designed to have the largest radius. Given a configuration of the field, you are supposed to find the radius of such a ring.<br><br>Assume that all the toys are points on a plane. A point is encircled by the ring if the distance between the point and the center of the ring is strictly less than the radius of the ring. If two toys are placed at the same point, the radius of the ring is considered to be 0.<br/></br></br></br></div>', '<div class="panel_content">The input consists of several test cases. For each case, the first line contains an integer N (2 &lt;= N &lt;= 100,000), the total number of toys in the field. Then N lines follow, each contains a pair of (x, y) which are the coordinates of a toy. The input is terminated by N = 0.<br/></div>', '<div class="panel_content">For each test case, print in one line the radius of the ring required by the Cyberground manager, accurate up to 2 decimal places. <br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n0 0\r\n1 1\r\n2\r\n1 1\r\n1 1\r\n3\r\n-1.5 0\r\n0 0\r\n0 1.5\r\n0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">0.71\r\n0.00\r\n0.75</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=ZJCPC2004&amp;source=1&amp;searchmode=source"> ZJCPC2004 </a> </div>', '26.02%', NULL, '2016-06-16 16:31:07', 24, '分治', -0.0596583292000976, -0.884634941084353),
(234, 'http://acm.hdu.edu.cn/showproblem.php?pid=1008', '1008', 'Hdu', '1.0s', '32.0MB', 'Elevator', '<div class="panel_content">The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.<br><br>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.<br/></br></br></div>', '<div class="panel_content">There are multiple test cases. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100. A test case with N = 0 denotes the end of input. This test case is not to be processed.<br/></div>', '<div class="panel_content">Print the total time on a single line for each test case. <br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 2\r\n3 2 3 1\r\n0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">17\r\n41</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=ZJCPC2004&amp;source=1&amp;searchmode=source"> ZJCPC2004 </a> </div>', '54.92%', NULL, '2016-06-16 16:31:07', 3, '模拟', 0.29131893114447, 1.20382576916686),
(235, 'http://acm.hdu.edu.cn/showproblem.php?pid=1009', '1009', 'Hdu', '1.0s', '32.0MB', 'FatMouse'' Trade', '<div class="panel_content">FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.<br>The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]* a% pounds of JavaBeans if he pays F[i]* a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.<br/></br></div>', '<div class="panel_content">The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1''s. All integers are not greater than 1000.<br/></div>', '<div class="panel_content">For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">5 3\r\n7 2\r\n4 3\r\n5 2\r\n20 3\r\n25 18\r\n24 15\r\n15 10\r\n-1 -1</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">13.333\r\n31.500</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=ZJCPC2004&amp;source=1&amp;searchmode=source"> ZJCPC2004 </a> </div>', '33.89%', NULL, '2016-06-16 16:31:07', 25, '贪心', 0.328911069439117, -0.315908789192413),
(236, 'http://acm.hdu.edu.cn/showproblem.php?pid=1010', '1010', 'Hdu', '1.0s', '32.0MB', 'Tempter of the Bone', '<div class="panel_content">The doggie found a bone in an ancient maze, which fascinated him a lot. However, when he picked it up, the maze began to shake, and the doggie could feel the ground sinking. He realized that the bone was a trap, and he tried desperately to get out of this maze.<br><br>The maze was a rectangle with sizes N by M. There was a door in the maze. At the beginning, the door was closed and it would open at the T-th second for a short period of time (less than 1 second). Therefore the doggie had to arrive at the door on exactly the T-th second. In every second, he could move one block to one of the upper, lower, left and right neighboring blocks. Once he entered a block, the ground of this block would start to sink and disappear in the next second. He could not stay at one block for more than one second, nor could he move into a visited block. Can the poor doggie survive? Please help him.<br/></br></br></div>', '<div class="panel_content">The input consists of multiple test cases. The first line of each test case contains three integers N, M, and T (1 &lt; N, M &lt; 7; 0 &lt; T &lt; 50), which denote the sizes of the maze and the time at which the door will open, respectively. The next N lines give the maze layout, with each line containing M characters. A character is one of the following:<br><br>''X'': a block of wall, which the doggie cannot enter; <br>''S'': the start point of the doggie; <br>''D'': the Door; or<br>''.'': an empty block.<br><br>The input is terminated with three 0''s. This test case is not to be processed.<br/></br></br></br></br></br></br></br></div>', '<div class="panel_content">For each test case, print in one line "YES" if the doggie can survive, or "NO" otherwise.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4 4 5\r\nS.X.\r\n..X.\r\n..XD\r\n....\r\n3 4 5\r\nS.X.\r\n..X.\r\n...D\r\n0 0 0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">NO\r\nYES</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=ZJCPC2004&amp;source=1&amp;searchmode=source"> ZJCPC2004 </a> </div>', '27.12%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', 1.14867223056594, -0.805143356957144),
(237, 'http://acm.hdu.edu.cn/showproblem.php?pid=1011', '1011', 'Hdu', '5.0s', '32.0MB', 'Starship Troopers', '<div class="panel_content">You, the leader of Starship Troopers, are sent to destroy a base of the bugs. The base is built underground. It is actually a huge cavern, which consists of many rooms connected with tunnels. Each room is occupied by some bugs, and their brains hide in some of the rooms. Scientists have just developed a new weapon and want to experiment it on some brains. Your task is to destroy the whole base, and capture as many brains as possible.<br><br>To kill all the bugs is always easier than to capture their brains. A map is drawn for you, with all the rooms marked by the amount of bugs inside, and the possibility of containing a brain. The cavern''s structure is like a tree in such a way that there is one unique path leading to each room from the entrance. To finish the battle as soon as possible, you do not want to wait for the troopers to clear a room before advancing to the next one, instead you have to leave some troopers at each room passed to fight all the bugs inside. The troopers never re-enter a room where they have visited before.<br><br>A starship trooper can fight against 20 bugs. Since you do not have enough troopers, you can only take some of the rooms and let the nerve gas do the rest of the job. At the mean time, you should maximize the possibility of capturing a brain. To simplify the problem, just maximize the sum of all the possibilities of containing brains for the taken rooms. Making such a plan is a difficult job. You need the help of a computer.<br/></br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. The first line of each test case contains two integers N (0 &lt; N &lt;= 100) and M (0 &lt;= M &lt;= 100), which are the number of rooms in the cavern and the number of starship troopers you have, respectively. The following N lines give the description of the rooms. Each line contains two non-negative integers -- the amount of bugs inside and the possibility of containing a brain, respectively. The next N - 1 lines give the description of tunnels. Each tunnel is described by two integers, which are the indices of the two rooms it connects. Rooms are numbered from 1 and room 1 is the entrance to the cavern.<br><br>The last test case is followed by two -1''s.<br/></br></br></div>', '<div class="panel_content">For each test case, print on a single line the maximum sum of all the possibilities of containing brains for the taken rooms.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">5 10\r\n50 10\r\n40 10\r\n40 20\r\n65 30\r\n70 30\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n1 1\r\n20 7\r\n-1 -1</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">50\r\n7</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=ZJCPC2004&amp;source=1&amp;searchmode=source"> ZJCPC2004 </a> </div>', '26.70%', NULL, '2016-06-16 16:31:07', 19, '二叉树', -0.656868235477938, -0.835494689078442),
(238, 'http://acm.hdu.edu.cn/showproblem.php?pid=1012', '1012', 'Hdu', '1.0s', '32.0MB', 'u Calculate e', '<div class="panel_content">A simple mathematical formula for e is<br><br><img src="http://acm.hdu.edu.cn/../../data/images/1012-1.gif" style="max-width:100%;"><br><br>where n is allowed to go to infinity. This can actually yield very accurate approximations of e using relatively small values of n.<br/></br></br></img></br></br></div>', '', '<div class="panel_content">Output the approximations of e generated by the above formula for the values of n from 0 to 9. The beginning of your output should appear similar to that shown below.<br/></div>', '', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">n e\r\n- -----------\r\n0 1\r\n1 2\r\n2 2.5\r\n3 2.666666667\r\n4 2.708333333</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Greater+New+York+2000&amp;source=1&amp;searchmode=source"> Greater New York 2000 </a> </div>', '45.50%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', -0.147532022515503, 0.523088748732037),
(239, 'http://acm.hdu.edu.cn/showproblem.php?pid=1013', '1013', 'Hdu', '1.0s', '32.0MB', 'Digital Roots', '<div class="panel_content">The digital root of a positive integer is found by summing the digits of the integer. If the resulting value is a single digit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed and the process is repeated. This is continued as long as necessary to obtain a single digit.<br><br>For example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6 is the digital root of 24. Now consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a single digit, the process must be repeated. Adding the 1 and the 2 yeilds 3, a single digit and also the digital root of 39.<br/></br></br></div>', '<div class="panel_content">The input file will contain a list of positive integers, one per line. The end of the input will be indicated by an integer value of zero.<br/></div>', '<div class="panel_content">For each integer in the input, output its digital root on a separate line of the output.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">24\r\n39\r\n0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6\r\n3</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Greater+New+York+2000&amp;source=1&amp;searchmode=source"> Greater New York 2000 </a> </div>', '31.27%', NULL, '2016-06-16 16:31:07', 3, '模拟', 0.421028368674347, -0.505243289568129),
(240, 'http://acm.hdu.edu.cn/showproblem.php?pid=1014', '1014', 'Hdu', '1.0s', '32.0MB', 'Uniform Generator', '<div class="panel_content">Computer simulations often require random numbers. One way to generate pseudo-random numbers is via a function of the form<br><br>seed(x+1) = [seed(x) + STEP] % MOD<br><br>where ''%'' is the modulus operator. <br><br>Such a function will generate pseudo-random numbers (seed) between 0 and MOD-1. One problem with functions of this form is that they will always generate the same pattern over and over. In order to minimize this effect, selecting the STEP and MOD values carefully can result in a uniform distribution of all values between (and including) 0 and MOD-1. <br><br>For example, if STEP = 3 and MOD = 5, the function will generate the series of pseudo-random numbers 0, 3, 1, 4, 2 in a repeating cycle. In this example, all of the numbers between and including 0 and MOD-1 will be generated every MOD iterations of the function. Note that by the nature of the function to generate the same seed(x+1) every time seed(x) occurs means that if a function will generate all the numbers between 0 and MOD-1, it will generate pseudo-random numbers uniformly with every MOD iterations. <br><br>If STEP = 15 and MOD = 20, the function generates the series 0, 15, 10, 5 (or any other repeating series if the initial seed is other than 0). This is a poor selection of STEP and MOD because no initial seed will generate all of the numbers from 0 and MOD-1. <br><br>Your program will determine if choices of STEP and MOD will generate a uniform distribution of pseudo-random numbers. <br/></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">Each line of input will contain a pair of integers for STEP and MOD in that order (1 &lt;= STEP, MOD &lt;= 100000).<br/></div>', '<div class="panel_content">For each line of input, your program should print the STEP value right- justified in columns 1 through 10, the MOD value right-justified in columns 11 through 20 and either "Good Choice" or "Bad Choice" left-justified starting in column 25. The "Good Choice" message should be printed when the selection of STEP and MOD will generate all the numbers between and including 0 and MOD-1 when MOD numbers are generated. Otherwise, your program should print the message "Bad Choice". After each output test set, your program should print exactly one blank line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3 5\r\n15 20\r\n63923 99999</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">         3         5    Good Choice\r\n\r\n        15        20    Bad Choice\r\n\r\n     63923     99999    Good Choice</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=South+Central+USA+1996&amp;source=1&amp;searchmode=source"> South Central USA 1996 </a> </div>', '39.46%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', -0.477167050160852, 0.0866076867971809),
(241, 'http://acm.hdu.edu.cn/showproblem.php?pid=1015', '1015', 'Hdu', '1.0s', '32.0MB', 'Safecracker', '<div class="panel_content">=== Op tech briefing, 2002/11/02 06:42 CST === <br>"The item is locked in a Klein safe behind a painting in the second-floor library. Klein safes are extremely rare; most of them, along with Klein and his factory, were destroyed in World War II. Fortunately old Brumbaugh from research knew Klein''s secrets and wrote them down before he died. A Klein safe has two distinguishing features: a combination lock that uses letters instead of numbers, and an engraved quotation on the door. A Klein quotation always contains between five and twelve distinct uppercase letters, usually at the beginning of sentences, and mentions one or more numbers. Five of the uppercase letters form the combination that opens the safe. By combining the digits from all the numbers in the appropriate way you get a numeric target. (The details of constructing the target number are classified.) To find the combination you must select five letters v, w, x, y, and z that satisfy the following equation, where each letter is replaced by its ordinal position in the alphabet (A=1, B=2, ..., Z=26). The combination is then vwxyz. If there is more than one solution then the combination is the one that is lexicographically greatest, i.e., the one that would appear last in a dictionary." <br><br>v - w^2 + x^3 - y^4 + z^5 = target <br><br>"For example, given target 1 and letter set ABCDEFGHIJKL, one possible solution is FIECB, since 6 - 9^2 + 5^3 - 3^4 + 2^5 = 1. There are actually several solutions in this case, and the combination turns out to be LKEBA. Klein thought it was safe to encode the combination within the engraving, because it could take months of effort to try all the possibilities even if you knew the secret. But of course computers didn''t exist then." <br><br>=== Op tech directive, computer division, 2002/11/02 12:30 CST === <br><br>"Develop a program to find Klein combinations in preparation for field deployment. Use standard test methodology as per departmental regulations. Input consists of one or more lines containing a positive integer target less than twelve million, a space, then at least five and at most twelve distinct uppercase letters. The last line will contain a target of zero and the letters END; this signals the end of the input. For each line output the Klein combination, break ties with lexicographic order, or ''no solution'' if there is no correct combination. Use the exact format shown below."<br/></br></br></br></br></br></br></br></br></br></div>', '', '', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 ABCDEFGHIJKL\r\n11700519 ZAYEXIWOVU\r\n3072997 SOUGHT\r\n1234567 THEQUICKFROG\r\n0 END</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">LKEBA\r\nYOXUZ\r\nGHOST\r\nno solution</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Mid-Central+USA+2002&amp;source=1&amp;searchmode=source"> Mid-Central USA 2002 </a> </div>', '51.68%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', -0.745776954627447, 0.969686921373992),
(242, 'http://acm.hdu.edu.cn/showproblem.php?pid=1016', '1016', 'Hdu', '2.0s', '32.0MB', 'Prime Ring Problem', '<div class="panel_content">A ring is compose of n circles as shown in diagram. Put natural number 1, 2, ..., n into each circle separately, and the sum of numbers in two adjacent circles should be a prime.<br><br>Note: the number of first circle should always be 1.<br><br><img src="http://acm.hdu.edu.cn/../../data/images/1016-1.gif" style="max-width:100%;"><br/></img></br></br></br></br></div>', '<div class="panel_content">n (0 &lt; n &lt; 20).<br/></div>', '<div class="panel_content">The output format is shown as sample below. Each row represents a series of circle numbers in the ring beginning from 1 clockwisely and anticlockwisely. The order of numbers must satisfy the above requirements. Print solutions in lexicographical order.<br><br>You are to write a program that completes above process.<br><br>Print a blank line after each case.<br/></br></br></br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6\r\n8</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Case 1:\r\n1 4 3 2 5 6\r\n1 6 5 2 3 4\r\n\r\nCase 2:\r\n1 2 3 8 5 6 7 4\r\n1 2 5 8 3 4 7 6\r\n1 4 7 6 5 8 3 2\r\n1 6 7 4 3 8 5 2</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Asia+1996%2C+Shanghai+%28Mainland+China%29&amp;source=1&amp;searchmode=source"> Asia 1996, Shanghai (Mainland China) </a> </div>', '44.28%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', -0.144944457930243, 0.434925355427314),
(243, 'http://acm.hdu.edu.cn/showproblem.php?pid=1017', '1017', 'Hdu', '1.0s', '32.0MB', 'A Mathematical Curiosity', '<div class="panel_content">Given two integers n and m, count the number of pairs of integers (a,b) such that 0 &lt; a &lt; b &lt; n and (a^2+b^2 +m)/(ab) is an integer.<br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br/></br></br></br></br></br></br></div>', '<div class="panel_content">You will be given a number of cases in the input. Each case is specified by a line containing the integers n and m. The end of input is indicated by a case in which n = m = 0. You may assume that 0 &lt; n &lt;= 100.<br/></div>', '<div class="panel_content">For each case, print the case number as well as the number of pairs (a,b) satisfying the given property. Print the output for each case on one line in the format as shown below.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n\r\n10 1\r\n20 3\r\n30 4\r\n0 0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Case 1: 2\r\nCase 2: 4\r\nCase 3: 5</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=East+Central+North+America+1999%2C+Practice&amp;source=1&amp;searchmode=source"> East Central North America 1999, Practice </a> </div>', '31.95%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', -0.245031456088072, -0.456103037562218),
(244, 'http://acm.hdu.edu.cn/showproblem.php?pid=1018', '1018', 'Hdu', '1.0s', '32.0MB', 'Big Number', '<div class="panel_content">In many applications very large integers numbers are required. Some of these applications are using keys for secure transmission of data, encryption, etc. In this problem you are given a number, you have to determine the number of digits in the factorial of the number.<br/></div>', '<div class="panel_content">Input consists of several lines of integer numbers. The first line contains an integer n, which is the number of cases to be tested, followed by n lines, one integer 1 ≤ n ≤ 10<sup>7</sup> on each line.<br/></div>', '<div class="panel_content">The output contains the number of digits in the factorial of the integers appearing in the input.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n10\r\n20</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">7\r\n19</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Asia+2002%2C+Dhaka+%28Bengal%29&amp;source=1&amp;searchmode=source"> Asia 2002, Dhaka (Bengal) </a> </div>', '47.30%', NULL, '2016-06-16 16:31:07', -1, '未分类', -0.2914213139726, 0.653165886394742),
(245, 'http://acm.hdu.edu.cn/showproblem.php?pid=1019', '1019', 'Hdu', '1.0s', '32.0MB', 'Least Common Multiple', '<div class="panel_content">The least common multiple (LCM) of a set of positive integers is the smallest positive integer which is divisible by all the numbers in the set. For example, the LCM of 5, 7 and 15 is 105.<br><br/></br></div>', '<div class="panel_content">Input will consist of multiple problem instances. The first line of the input will contain a single integer indicating the number of problem instances. Each instance will consist of a single line of the form m n1 n2 n3 ... nm where m is the number of integers in the set and n1 ... nm are the integers. All integers will be positive and lie within the range of a 32-bit integer.<br/></div>', '<div class="panel_content">For each problem instance, output a single line containing the corresponding LCM. All results will lie in the range of a 32-bit integer.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n3 5 7 15\r\n6 4 10296 936 1287 792 1</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">105\r\n10296</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=East+Central+North+America+2003%2C+Practice&amp;source=1&amp;searchmode=source"> East Central North America 2003, Practice </a> </div>', '37.58%', NULL, '2016-06-16 16:31:07', 2, '数论', -0.0678350332895169, -0.0492506569838672),
(246, 'http://acm.hdu.edu.cn/showproblem.php?pid=1020', '1020', 'Hdu', '1.0s', '32.0MB', 'Encoding', '<div class="panel_content">Given a string containing only ''A'' - ''Z'', we could encode it using the following method: <br><br>1. Each sub-string containing k same characters should be encoded to "kX" where "X" is the only character in this sub-string.<br><br>2. If the length of the sub-string is 1, ''1'' should be ignored.<br/></br></br></br></br></div>', '<div class="panel_content">The first line contains an integer N (1 &lt;= N &lt;= 100) which indicates the number of test cases. The next N lines contain N strings. Each string consists of only ''A'' - ''Z'' and the length is less than 10000.<br/></div>', '<div class="panel_content">For each test case, output the encoded string in a line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\nABC\r\nABBCCC</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">ABC\r\nA2B3C</div></pre></div>', '', '', '44.26%', NULL, '2016-06-16 16:31:07', -1, '未分类', -0.189471269313385, 0.433480053897729),
(247, 'http://acm.hdu.edu.cn/showproblem.php?pid=1021', '1021', 'Hdu', '1.0s', '32.0MB', 'Fibonacci Again', '<div class="panel_content">There are another kind of Fibonacci numbers: F(0) = 7, F(1) = 11, F(n) = F(n-1) + F(n-2) (n&gt;=2).<br/></div>', '<div class="panel_content">Input consists of a sequence of lines, each containing an integer n. (n &lt; 1,000,000).<br/></div>', '<div class="panel_content">Print the word "yes" if 3 divide evenly into F(n).<br><br>Print the word "no" if not.<br/></br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">0\r\n1\r\n2\r\n3\r\n4\r\n5</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">no\r\nno\r\nyes\r\nno\r\nno\r\nno</div></pre></div>', '', '', '47.31%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', 0.0670495334108785, 0.653888537159535),
(248, 'http://acm.hdu.edu.cn/showproblem.php?pid=1022', '1022', 'Hdu', '1.0s', '32.0MB', 'Train Problem I', '<div class="panel_content">As the new term comes, the Ignatius Train Station is very busy nowadays. A lot of student want to get back to school by train(because the trains in the Ignatius Train Station is the fastest all over the world ^v^). But here comes a problem, there is only one railway where all the trains stop. So all the trains come in from one side and get out from the other side. For this problem, if train A gets into the railway first, and then train B gets into the railway before train A leaves, train A can''t leave until train B leaves. The pictures below figure out the problem. Now the problem for you is, there are at most 9 trains in the station, all the trains has an ID(numbered from 1 to n), the trains get into the railway in an order O1, your task is to determine whether the trains can get out in an order O2.<br><img src="http://acm.hdu.edu.cn/data/images/1022-1.jpg" style="max-width:100%;"><img src="http://acm.hdu.edu.cn/data/images/1022-2.jpg" style="max-width:100%;"><img src="http://acm.hdu.edu.cn/data/images/1022-3.jpg" style="max-width:100%;"/></img></img></br></div>', '<div class="panel_content">The input contains several test cases. Each test case consists of an integer, the number of trains, and two strings, the order of the trains come in:O1, and the order of the trains leave:O2. The input is terminated by the end of file. More details in the Sample Input.<br/></div>', '<div class="panel_content">The output contains a string "No." if you can''t exchange O2 to O1, or you should output a line contains "Yes.", and then output your way in exchanging the order(you should output "in" for a train getting into the railway, and "out" for a train getting out of the railway). Print a line contains "FINISH" after each test case. More details in the Sample Output.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3 123 321\r\n3 123 312</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Yes.\r\nin\r\nin\r\nin\r\nout\r\nout\r\nout\r\nFINISH\r\nNo.\r\nFINISH\r\n\r\n<div style="font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px"><div style="font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed"><i>Hint</i></div>Hint</div><i style="font-size:1px"> </i>\r\nFor the first Sample Input, we let train 1 get in, then train 2 and train 3.\r\nSo now train 3 is at the top of the railway, so train 3 can leave first, then train 2 and train 1.\r\nIn the second Sample input, we should let train 3 leave first, so we have to let train 1 get in, then train 2 and train 3.\r\nNow we can let train 3 leave.\r\nBut after that we can''t let train 1 leave before train 2, because train 2 is at the top of the railway at the moment.\r\nSo we output "No.".</div></pre></div>', '', '', '37.76%', NULL, '2016-06-16 16:31:07', 3, '模拟', -0.364183630110091, -0.0362429432175966),
(249, 'http://acm.hdu.edu.cn/showproblem.php?pid=1023', '1023', 'Hdu', '1.0s', '32.0MB', 'Train Problem II', '<div class="panel_content">As we all know the Train Problem I, the boss of the Ignatius Train Station want to know if all the trains come in strict-increasing order, how many orders that all the trains can get out of the railway.<br/></div>', '<div class="panel_content">The input contains several test cases. Each test cases consists of a number N(1&lt;=N&lt;=100). The input is terminated by the end of file.<br/></div>', '<div class="panel_content">For each test case, you should output how many ways that all the trains can get out of the railway.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n2\r\n3\r\n10</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n2\r\n5\r\n16796\r\n\r\n<div style="font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px"><div style="font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed"><i>Hint</i></div>\r\nThe result will be very large, so you may not process it by 32-bit integers.\r\n</div><i style="font-size:1px"> </i></div></pre></div>', '', '', '53.67%', NULL, '2016-06-16 16:31:07', 3, '模拟', -0.835472293410874, 1.11349442356776);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(250, 'http://acm.hdu.edu.cn/showproblem.php?pid=1024', '1024', 'Hdu', '1.0s', '32.0MB', 'Max Sum Plus Plus', '<div class="panel_content">Now I think you have got an AC in Ignatius.L''s "Max Sum" problem. To be a brave ACMer, we always challenge ourselves to more difficult problems. Now you are faced with a more difficult problem.<br><br>Given a consecutive number sequence S<sub><i>1</i></sub>, S<sub><i>2</i></sub>, S<sub><i>3</i></sub>, S<sub><i>4</i></sub> ... S<sub><i>x</i></sub>, ... S<sub><i>n</i></sub> (1 ≤ x ≤ n ≤ 1,000,000, -32768 ≤ S<sub><i>x</i></sub> ≤ 32767). We define a function sum(i, j) = S<sub><i>i</i></sub> + ... + S<sub><i>j</i></sub> (1 ≤ i ≤ j ≤ n).<br><br>Now given an integer m (m &gt; 0), your task is to find m pairs of i and j which make sum(i<sub><i>1</i></sub>, j<sub><i>1</i></sub>) + sum(i<sub><i>2</i></sub>, j<sub><i>2</i></sub>) + sum(i<sub><i>3</i></sub>, j<sub><i>3</i></sub>) + ... + sum(i<sub><i>m</i></sub>, j<sub><i>m</i></sub>) maximal (i<sub><i>x</i></sub> ≤ i<sub><i>y</i></sub> ≤ j<sub><i>x</i></sub> or i<sub><i>x</i></sub> ≤ j<sub><i>y</i></sub> ≤ j<sub><i>x</i></sub> is not allowed).<br><br>But I`m lazy, I don''t want to write a special-judge module, so you don''t have to output m pairs of i and j, just output the maximal summation of sum(i<sub><i>x</i></sub>, j<sub><i>x</i></sub>)(1 ≤ x ≤ m) instead. ^_^<br/></br></br></br></br></br></br></div>', '<div class="panel_content">Each test case will begin with two integers m and n, followed by n integers S<sub><i>1</i></sub>, S<sub><i>2</i></sub>, S<sub><i>3</i></sub> ... S<sub><i>n</i></sub>.<br>Process to the end of file.<br/></br></div>', '<div class="panel_content">Output the maximal summation described above in one line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 3 1 2 3\r\n2 6 -1 4 -2 3 -2 3</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6\r\n8\r\n\r\n<div style="font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px"><div style="font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed"><i>Hint</i></div>\r\nHuge input, scanf and dynamic programming is recommended.\r\n</div><i style="font-size:1px"> </i></div></pre></div>', '', '', '34.42%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.490001370503738, -0.277608298658394),
(251, 'http://acm.hdu.edu.cn/showproblem.php?pid=1025', '1025', 'Hdu', '1.0s', '32.0MB', 'Constructing Roads In JGShining''s Kingdom', '<div class="panel_content">JGShining''s kingdom consists of 2n(n is no more than 500,000) small cities which are located in two parallel lines.<br> <br>Half of these cities are rich in resource (we call them rich cities) while the others are short of resource (we call them poor cities). Each poor city is short of exactly one kind of resource and also each rich city is rich in exactly one kind of resource. You may assume no two poor cities are short of one same kind of resource and no two rich cities are rich in one same kind of resource. <br><br>With the development of industry, poor cities wanna import resource from rich ones. The roads existed are so small that they''re unable to ensure the heavy trucks, so new roads should be built. The poor cities strongly BS each other, so are the rich ones. Poor cities don''t wanna build a road with other poor ones, and rich ones also can''t abide sharing an end of road with other rich ones. Because of economic benefit, any rich city will be willing to export resource to any poor one.<br><br>Rich citis marked from 1 to n are located in Line I and poor ones marked from 1 to n are located in Line II. <br><br>The location of Rich City 1 is on the left of all other cities, Rich City 2 is on the left of all other cities excluding Rich City 1,  Rich City 3 is on the right of Rich City 1 and Rich City 2 but on the left of all other cities ... And so as the poor ones. <br><br>But as you know, two crossed roads may cause a lot of traffic accident so JGShining has established a law to forbid constructing crossed roads.<br><br>For example, the roads in Figure I are forbidden.<br><br><center><img src="http://acm.hdu.edu.cn/data/images/1025-1.png" style="max-width:100%;"/></center><br><br>In order to build as many roads as possible, the young and handsome king of the kingdom - JGShining needs your help, please help him. ^_^<br/></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">Each test case will begin with a line containing an integer n(1 ≤ n ≤ 500,000). Then n lines follow. Each line contains two integers p and r which represents that Poor City p needs to import resources from Rich City r. Process to the end of file.<br/></div>', '<div class="panel_content">For each test case, output the result in the form of sample. <br>You should tell JGShining what''s the maximal number of road(s) can be built. <br/></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n1 2\r\n2 1\r\n3\r\n1 2\r\n2 3\r\n3 1</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Case 1:\r\nMy king, at most 1 road can be built.\r\n\r\nCase 2:\r\nMy king, at most 2 roads can be built.\r\n\r\n<div style="font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px"><div style="font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed"><i>Hint</i></div>\r\nHuge input, scanf is recommended.\r\n</div><i style="font-size:1px"> </i></div></pre></div>', '', '', '28.49%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.545478755211697, -0.70614020218053),
(252, 'http://acm.hdu.edu.cn/showproblem.php?pid=1026', '1026', 'Hdu', '1.0s', '32.0MB', 'Ignatius and the Princess I', '<div class="panel_content">The Princess has been abducted by the BEelzebub feng5166, our hero Ignatius has to rescue our pretty Princess. Now he gets into feng5166''s castle. The castle is a large labyrinth. To make the problem simply, we assume the labyrinth is a N*M two-dimensional array which left-top corner is (0,0) and right-bottom corner is (N-1,M-1). Ignatius enters at (0,0), and the door to feng5166''s room is at (N-1,M-1), that is our target. There are some monsters in the castle, if Ignatius meet them, he has to kill them. Here is some rules:<br><br>1.Ignatius can only move in four directions(up, down, left, right), one step per second. A step is defined as follow: if current position is (x,y), after a step, Ignatius can only stand on (x-1,y), (x+1,y), (x,y-1) or (x,y+1).<br>2.The array is marked with some characters and numbers. We define them like this:<br> . : The place where Ignatius can walk on.<br> X : The place is a trap, Ignatius should not walk on it.<br> n : Here is a monster with n HP(1&lt;=n&lt;=9), if Ignatius walk on it, it takes him n seconds to kill the monster.<br><br>Your task is to give out the path which costs minimum seconds for Ignatius to reach target position. You may assume that the start position and the target position will never be a trap, and there will never be a monster at the start position.<br/></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. Each test case starts with a line contains two numbers N and M(2&lt;=N&lt;=100,2&lt;=M&lt;=100) which indicate the size of the labyrinth. Then a N*M two-dimensional array follows, which describe the whole labyrinth. The input is terminated by the end of file. More details in the Sample Input.<br/></div>', '<div class="panel_content">For each test case, you should output "God please help our poor hero." if Ignatius can''t reach the target position, or you should output "It takes n seconds to reach the target position, let me show you the way."(n is the minimum seconds), and tell our hero the whole path. Output a line contains "FINISH" after each test case. If there are more than one path, any one is OK in this problem. More details in the Sample Output.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">5 6\r\n.XX.1.\r\n..X.2.\r\n2...X.\r\n...XX.\r\nXXXXX.\r\n5 6\r\n.XX.1.\r\n..X.2.\r\n2...X.\r\n...XX.\r\nXXXXX1\r\n5 6\r\n.XX...\r\n..XX1.\r\n2...X.\r\n...XX.\r\nXXXXX.</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">It takes 13 seconds to reach the target position, let me show you the way.\r\n1s:(0,0)-&gt;(1,0)\r\n2s:(1,0)-&gt;(1,1)\r\n3s:(1,1)-&gt;(2,1)\r\n4s:(2,1)-&gt;(2,2)\r\n5s:(2,2)-&gt;(2,3)\r\n6s:(2,3)-&gt;(1,3)\r\n7s:(1,3)-&gt;(1,4)\r\n8s:FIGHT AT (1,4)\r\n9s:FIGHT AT (1,4)\r\n10s:(1,4)-&gt;(1,5)\r\n11s:(1,5)-&gt;(2,5)\r\n12s:(2,5)-&gt;(3,5)\r\n13s:(3,5)-&gt;(4,5)\r\nFINISH\r\nIt takes 14 seconds to reach the target position, let me show you the way.\r\n1s:(0,0)-&gt;(1,0)\r\n2s:(1,0)-&gt;(1,1)\r\n3s:(1,1)-&gt;(2,1)\r\n4s:(2,1)-&gt;(2,2)\r\n5s:(2,2)-&gt;(2,3)\r\n6s:(2,3)-&gt;(1,3)\r\n7s:(1,3)-&gt;(1,4)\r\n8s:FIGHT AT (1,4)\r\n9s:FIGHT AT (1,4)\r\n10s:(1,4)-&gt;(1,5)\r\n11s:(1,5)-&gt;(2,5)\r\n12s:(2,5)-&gt;(3,5)\r\n13s:(3,5)-&gt;(4,5)\r\n14s:FIGHT AT (4,5)\r\nFINISH\r\nGod please help our poor hero.\r\nFINISH</div></pre></div>', '', '', '31.81%', NULL, '2016-06-16 16:31:07', 18, '树的BFS', -0.658213769062273, -0.466220148269317),
(253, 'http://acm.hdu.edu.cn/showproblem.php?pid=1027', '1027', 'Hdu', '1.0s', '32.0MB', 'Ignatius and the Princess II', '<div class="panel_content">Now our hero finds the door to the BEelzebub feng5166. He opens the door and finds feng5166 is about to kill our pretty Princess. But now the BEelzebub has to beat our hero first. feng5166 says, "I have three question for you, if you can work them out, I will release the Princess, or you will be my dinner, too." Ignatius says confidently, "OK, at last, I will save the Princess."<br><br>"Now I will show you the first problem." feng5166 says, "Given a sequence of number 1 to N, we define that 1,2,3...N-1,N is the smallest sequence among all the sequence which can be composed with number 1 to N(each number can be and should be use only once in this problem). So it''s easy to see the second smallest sequence is 1,2,3...N,N-1. Now I will give you two numbers, N and M. You should tell me the Mth smallest sequence which is composed with number 1 to N. It''s easy, isn''t is? Hahahahaha......"<br>Can you help Ignatius to solve this problem?<br/></br></br></br></div>', '<div class="panel_content">The input contains several test cases. Each test case consists of two numbers, N and M(1&lt;=N&lt;=1000, 1&lt;=M&lt;=10000). You may assume that there is always a sequence satisfied the BEelzebub''s demand. The input is terminated by the end of file.<br/></div>', '<div class="panel_content">For each test case, you only have to output the sequence satisfied the BEelzebub''s demand. When output a sequence, you should print a space between two numbers, but do not output any spaces after the last number.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6 4\r\n11 8</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 2 3 5 6 4\r\n1 2 3 4 5 6 7 9 8 11 10</div></pre></div>', '', '', '59.27%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', -0.860085207745861, 1.51817885185173),
(254, 'http://acm.hdu.edu.cn/showproblem.php?pid=1028', '1028', 'Hdu', '1.0s', '32.0MB', 'Ignatius and the Princess III', '<div class="panel_content">"Well, it seems the first problem is too easy. I will let you know how foolish you are later." feng5166 says.<br><br>"The second problem is, given an positive integer N, we define an equation like this:<br>  N=a[1]+a[2]+a[3]+...+a[m];<br>  a[i]&gt;0,1&lt;=m&lt;=N;<br>My question is how many different equations you can find for a given N.<br>For example, assume N is 4, we can find:<br>  4 = 4;<br>  4 = 3 + 1;<br>  4 = 2 + 2;<br>  4 = 2 + 1 + 1;<br>  4 = 1 + 1 + 1 + 1;<br>so the result is 5 when N is 4. Note that "4 = 3 + 1" and "4 = 1 + 3" is the same in this problem. Now, you do it!"<br/></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. Each test case contains a positive integer N(1&lt;=N&lt;=120) which is mentioned above. The input is terminated by the end of file.<br/></div>', '<div class="panel_content">For each test case, you have to output a line contains an integer P which indicate the different equations you have found.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n10\r\n20</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">5\r\n42\r\n627</div></pre></div>', '', '', '70.10%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.627307897655936, 2.30080963012234),
(255, 'http://acm.hdu.edu.cn/showproblem.php?pid=1029', '1029', 'Hdu', '1.0s', '31.9990234375MB', 'Ignatius and the Princess IV', '<div class="panel_content">"OK, you are not too bad, em... But you can never pass the next test." feng5166 says.<br><br>"I will tell you an odd number N, and then N integers. There will be a special integer among them, you have to tell me which integer is the special one after I tell you all the integers." feng5166 says.<br><br>"But what is the characteristic of the special integer?" Ignatius asks.<br><br>"The integer will appear at least (N+1)/2 times. If you can''t find the right integer, I will kill the Princess, and you will be my dinner, too. Hahahaha....." feng5166 says.<br><br>Can you find the special integer for Ignatius?<br/></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input contains several test cases. Each test case contains two lines. The first line consists of an odd integer N(1&lt;=N&lt;=999999) which indicate the number of the integers feng5166 will tell our hero. The second line contains the N integers. The input is terminated by the end of file.<br/></div>', '<div class="panel_content">For each test case, you have to output only one line which contains the special number you have found.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">5\r\n1 3 2 3 3\r\n11\r\n1 1 1 1 1 5 5 5 5 5 5\r\n7\r\n1 1 1 1 1 1 1</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3\r\n5\r\n1</div></pre></div>', '', '', '42.30%', NULL, '2016-06-16 16:31:07', 21, '排序', -0.456859843295737, 0.291840503998338),
(256, 'http://acm.hdu.edu.cn/showproblem.php?pid=1030', '1030', 'Hdu', '1.0s', '32.0MB', 'Delta-wave ', '<div class="panel_content">A triangle field is numbered with successive integers in the way shown on the picture below. <br><br><center><img src="http://acm.hdu.edu.cn/data/images/1030-1.jpg" style="max-width:100%;"/></center><br><br>The traveller needs to go from the cell with number M to the cell with number N. The traveller is able to enter the cell through cell edges only, he can not travel from cell to cell through vertices. The number of edges the traveller passes makes the length of the traveller''s route. <br><br>Write the program to determine the length of the shortest route connecting cells with numbers N and M. <br/></br></br></br></br></br></br></div>', '<div class="panel_content">Input contains two integer numbers M and N in the range from 1 to 1000000000 separated with space(s).</div>', '<div class="panel_content">Output should contain the length of the shortest route.</div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6 12 </div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Ural+Collegiate+Programming+Contest+1998&amp;source=1&amp;searchmode=source"> Ural Collegiate Programming Contest 1998 </a> </div>', '38.95%', NULL, '2016-06-16 16:31:07', 6, '最短路', -0.838328964713001, 0.0497524977927479),
(257, 'http://acm.hdu.edu.cn/showproblem.php?pid=1031', '1031', 'Hdu', '1.0s', '32.0MB', 'Design T-Shirt', '<div class="panel_content">Soon after he decided to design a T-shirt for our Algorithm Board on Free-City BBS, XKA found that he was trapped by all kinds of suggestions from everyone on the board. It is indeed a mission-impossible to have everybody perfectly satisfied. So he took a poll to collect people''s opinions. Here are what he obtained: N people voted for M design elements (such as the ACM-ICPC logo, big names in computer science, well-known graphs, etc.). Everyone assigned each element a number of satisfaction. However, XKA can only put K (&lt;=M) elements into his design. He needs you to pick for him the K elements such that the total number of satisfaction is maximized.<br/></div>', '<div class="panel_content">The input consists of multiple test cases. For each case, the first line contains three positive integers N, M and K where N is the number of people, M is the number of design elements, and K is the number of elements XKA will put into his design. Then N lines follow, each contains M numbers. The j-th number in the i-th line represents the i-th person''s satisfaction on the j-th element.<br/></div>', '<div class="panel_content">For each test case, print in one line the indices of the K elements you would suggest XKA to take into consideration so that the total number of satisfaction is maximized. If there are more than one solutions, you must output the one with minimal indices. The indices start from 1 and must be printed in non-increasing order. There must be exactly one space between two adjacent indices, and no extra space at the end of the line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3 6 4\r\n2 2.5 5 1 3 4\r\n5 1 3.5 2 2 2\r\n1 1 1 1 1 10\r\n3 3 2\r\n1 2 3\r\n2 3 1\r\n3 1 2</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6 5 3 1\r\n2 1</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=CYJJ%27s+Funny+Contest+%231%2C+Killing+in+Seconds&amp;source=1&amp;searchmode=source"> CYJJ''s Funny Contest #1, Killing in Seconds </a> </div>', '47.37%', NULL, '2016-06-16 16:31:07', 21, '排序', -0.83712833474544, 0.658224441748292),
(258, 'http://acm.hdu.edu.cn/showproblem.php?pid=1032', '1032', 'Hdu', '1.0s', '32.0MB', 'The 3n + 1 problem', '<div class="panel_content">Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.<br><br>Consider the following algorithm: <br><br> <br>    1.      input n<br><br>    2.      print n<br><br>    3.      if n = 1 then STOP<br><br>    4.           if n is odd then   n &lt;- 3n + 1<br><br>    5.           else   n &lt;- n / 2<br><br>    6.      GOTO 2<br><br><br>Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 <br><br>It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 &lt; n &lt; 1,000,000 (and, in fact, for many more numbers than this.) <br><br>Given an input n, it is possible to determine the number of numbers printed (including the 1). For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16. <br><br>For any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j. <br/></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 1,000,000 and greater than 0. <br><br>You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j. <br><br>You can assume that no opperation overflows a 32-bit integer.<br/></br></br></br></br></div>', '<div class="panel_content">For each pair of input integers i and j you should output i, j, and the maximum cycle length for integers between and including i and j. These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input. The integers i and j must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line). <br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 10\r\n100 200\r\n201 210\r\n900 1000</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 10 20\r\n100 200 125\r\n201 210 89\r\n900 1000 174</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=UVA&amp;source=1&amp;searchmode=source"> UVA </a> </div>', '36.19%', NULL, '2016-06-16 16:31:07', 19, '二叉树', -0.299349611861835, -0.149699113290068),
(259, 'http://acm.hdu.edu.cn/showproblem.php?pid=1033', '1033', 'Hdu', '1.0s', '32.0MB', 'Edge', '<div class="panel_content">For products that are wrapped in small packings it is necessary that the sheet of paper containing the directions for use is folded until its size becomes small enough. We assume that a sheet of paper is rectangular and only folded along lines parallel to its initially shorter edge. The act of folding along such a line, however, can be performed in two directions: either the surface on the top of the sheet is brought together, or the surface on its bottom. In both cases the two parts of the rectangle that are separated by the folding line are laid together neatly and we ignore any differences in thickness of the resulting folded sheet. <br>After several such folding steps have been performed we may unfold the sheet again and take a look at its longer edge holding the sheet so that it appears as a one-dimensional curve, actually a concatenation of line segments. If we move along this curve in a fixed direction we can classify every place where the sheet was folded as either type A meaning a clockwise turn or type V meaning a counter-clockwise turn. Given such a sequence of classifications, produce a drawing of the longer edge of the sheet assuming 90 degree turns at equidistant places.<br/></br></div>', '<div class="panel_content">The input contains several test cases, each on a separate line. Each line contains a nonempty string of characters A and V describing the longer edge of the sheet. You may assume that the length of the string is less than 200. The input file terminates immediately after the last test case.<br/></div>', '<div class="panel_content">For each test case generate a PostScript drawing of the edge with commands placed on separate lines. Start every drawing at the coordinates (300, 420) with the command "300 420 moveto". The first turn occurs at (310, 420) using the command "310 420 lineto". Continue with clockwise or counter-clockwise turns according to the input string, using a sequence of "x y lineto" commands with the appropriate coordinates. The turning points are separated at a distance of 10 units. Do not forget the end point of the edge and finish each test case by the commands stroke and showpage. <br><br>You may display such drawings with the gv PostScript interpreter, optionally after a conversion using the ps2ps utility.<br><br><center><img src="http://acm.hdu.edu.cn/data/images/1033-1.gif" style="max-width:100%;"/></center><br/></br></br></br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">V\r\nAVV</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">300 420 moveto\r\n310 420 lineto\r\n310 430 lineto\r\nstroke\r\nshowpage\r\n300 420 moveto\r\n310 420 lineto\r\n310 410 lineto\r\n320 410 lineto\r\n320 420 lineto\r\nstroke\r\nshowpage</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=University+of+Ulm+Local+Contest+2003&amp;source=1&amp;searchmode=source"> University of Ulm Local Contest 2003 </a> </div>', '63.42%', NULL, '2016-06-16 16:31:07', 3, '模拟', -0.936904825153038, 1.81807891924075),
(260, 'http://acm.hdu.edu.cn/showproblem.php?pid=1034', '1034', 'Hdu', '1.0s', '32.0MB', 'Candy Sharing Game', '<div class="panel_content">A number of students sit in a circle facing their teacher in the center. Each student initially has an even number of pieces of candy. When the teacher blows a whistle, each student simultaneously gives half of his or her candy to the neighbor on the right. Any student, who ends up with an odd number of pieces of candy, is given another piece by the teacher. The game ends when all students have the same number of pieces of candy. <br>Write a program which determines the number of times the teacher blows the whistle and the final number of pieces of candy for each student from the amount of candy each child starts with.<br/></br></div>', '<div class="panel_content">The input may describe more than one game. For each game, the input begins with the number N of students, followed by N (even) candy counts for the children counter-clockwise around the circle. The input ends with a student count of 0. Each input number is on a line by itself.<br/></div>', '<div class="panel_content">For each game, output the number of rounds of the game followed by the amount of candy each child ends up with, both on one line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">6\r\n36\r\n2\r\n2\r\n2\r\n2\r\n2\r\n11\r\n22\r\n20\r\n18\r\n16\r\n14\r\n12\r\n10\r\n8\r\n6\r\n4\r\n2\r\n4\r\n2\r\n4\r\n6\r\n8\r\n0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">15 14\r\n17 22\r\n4 8\r\n\r\n<div style="font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px"><div style="font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed"><i>Hint</i></div>\r\nThe game ends in a finite number of steps because:\r\n1. The maximum candy count can never increase.\r\n2. The minimum candy count can never decrease.\r\n3. No one with more than the minimum amount will ever decrease to the minimum.\r\n4. If the maximum and minimum candy count are not the same, at least one student with the minimum amount must have their count increase.\r\n</div><i style="font-size:1px"> </i></div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Greater+New+York+2003&amp;source=1&amp;searchmode=source"> Greater New York 2003 </a> </div>', '61.37%', NULL, '2016-06-16 16:31:07', 3, '模拟', -0.892709222036809, 1.66993551245822),
(261, 'http://acm.hdu.edu.cn/showproblem.php?pid=1035', '1035', 'Hdu', '1.0s', '32.0MB', 'Robot Motion', '<div class="panel_content"><img src="http://acm.hdu.edu.cn/data/images/1035-1.gif" style="max-width:100%;"><br><br>A robot has been programmed to follow the instructions in its path. Instructions for the next direction the robot is to move are laid down in a grid. The possible instructions are <br><br>N north (up the page)<br>S south (down the page)<br>E east (to the right on the page)<br>W west (to the left on the page)<br><br>For example, suppose the robot starts on the north (top) side of Grid 1 and starts south (down). The path the robot follows is shown. The robot goes through 10 instructions in the grid before leaving the grid.<br><br>Compare what happens in Grid 2: the robot goes through 3 instructions only once, and then starts a loop through 8 instructions, and never exits.<br><br>You are to write a program that determines how long it takes a robot to get out of the grid or how the robot loops around.<br/></br></br></br></br></br></br></br></br></br></br></br></br></br></img></div>', '<div class="panel_content">There will be one or more grids for robots to navigate. The data for each is in the following form. On the first line are three integers separated by blanks: the number of rows in the grid, the number of columns in the grid, and the number of the column in which the robot enters from the north. The possible entry columns are numbered starting with one at the left. Then come the rows of the direction instructions. Each grid will have at least one and at most 10 rows and columns of instructions. The lines of instructions contain only the characters N, S, E, or W with no blanks. The end of input is indicated by a row containing 0 0 0.<br/></div>', '<div class="panel_content">For each grid in the input there is one line of output. Either the robot follows a certain number of instructions and exits the grid on any one the four sides or else the robot follows the instructions on a certain number of locations once, and then the instructions on some number of locations repeatedly. The sample input below corresponds to the two grids above and illustrates the two forms of output. The word "step" is always immediately followed by "(s)" whether or not the number before it is 1.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3 6 5\r\nNEESWE\r\nWWWESS\r\nSNWWWW\r\n4 5 1\r\nSESWE\r\nEESNW\r\nNWEEN\r\nEWSEN\r\n0 0 </div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">10 step(s) to exit\r\n3 step(s) before a loop of 8 step(s)</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Mid-Central+USA+1999&amp;source=1&amp;searchmode=source"> Mid-Central USA 1999 </a> </div>', '46.18%', NULL, '2016-06-16 16:31:07', 17, '树的DFS', -0.804959731821497, 0.572229000737948),
(262, 'http://acm.hdu.edu.cn/showproblem.php?pid=1036', '1036', 'Hdu', '1.0s', '32.0MB', 'Average is not Fast Enough!', '<div class="panel_content">A relay is a race for two or more teams of runners. Each member of a team runs one section of the race. Your task is to help to evaluate the results of a relay race. <br><br>You have to process several teams. For each team you are given a list with the running times for every section of the race. You are to compute the average time per kilometer over the whole distance. That''s easy, isn''t it? <br>So if you like the fun and challenge competing at this contest, perhaps you like a relay race, too. Students from Ulm participated e.g. at the "SOLA" relay in Zurich, Switzerland. For more information visit http://www.sola.asvz.ethz.ch/ after the contest is over.<br/></br></br></br></div>', '<div class="panel_content">The first line of the input specifies the number of sections n followed by the total distance of the relay d in kilometers. You may safely assume that 1 &lt;= n &lt;= 20 and 0.0 &lt; d &lt; 200.0. Every following line gives information about one team: the team number t (an integer, right-justified in a field of width 3) is followed by the n results for each section, separated by a single space. These running times are given in the format "h:mm:ss" with integer numbers for the hours, minutes and seconds, respectively. In the special case of a runner being disqualified, the running time will be denoted by "-:--:--". Finally, the data on every line is terminated by a newline character. Input is terminated by EOF.<br/></div>', '<div class="panel_content">For each team output exactly one line giving the team''s number t right aligned in a field of width 3, and the average time for this team rounded to whole seconds in the format "m:ss". If at least one of the team''s runners has been disqualified, output "-" instead. Adhere to the sample output for the exact format of presentation.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2 12.5\r\n  5 0:23:21 0:25:01\r\n 42 0:23:32 -:--:--\r\n  7 0:33:20 0:41:35</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">  5: 3:52 min/km\r\n 42: -\r\n  7: 6:00 min/km</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=University+of+Ulm+Local+Contest+2001&amp;source=1&amp;searchmode=source"> University of Ulm Local Contest 2001 </a> </div>', '40.73%', NULL, '2016-06-16 16:31:07', -1, '未分类', -0.88502933034776, 0.178384333925867),
(263, 'http://acm.hdu.edu.cn/showproblem.php?pid=1037', '1037', 'Hdu', '1.0s', '32.0MB', 'Keep on Truckin''', '<div class="panel_content">Boudreaux and Thibodeaux are on the road again . . .<br><br>"Boudreaux, we have to get this shipment of mudbugs to Baton Rouge by tonight!"<br><br>"Don''t worry, Thibodeaux, I already checked ahead. There are three underpasses and our 18-wheeler will fit through all of them, so just keep that motor running!"<br><br>"We''re not going to make it, I say!"<br><br>So, which is it: will there be a very messy accident on Interstate 10, or is Thibodeaux just letting the sound of his own wheels drive him crazy?<br/></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">Input to this problem will consist of a single data set. The data set will be formatted according to the following description.<br><br>The data set will consist of a single line containing 3 numbers, separated by single spaces. Each number represents the height of a single underpass in inches. Each number will be between 0 and 300 inclusive.<br/></br></br></div>', '<div class="panel_content">There will be exactly one line of output. This line will be:<br><br>   NO CRASH<br><br>if the height of the 18-wheeler is less than the height of each of the underpasses, or:<br><br>   CRASH X<br><br>otherwise, where X is the height of the first underpass in the data set that the 18-wheeler is unable to go under (which means its height is less than or equal to the height of the 18-wheeler). <br>The height of the 18-wheeler is 168 inches.<br/></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">180 160 170</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">CRASH 160</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=South+Central+USA+2003&amp;source=1&amp;searchmode=source"> South Central USA 2003 </a> </div>', '68.54%', NULL, '2016-06-16 16:31:07', 6, '最短路', -0.740270617190015, 2.18807611081467),
(264, 'http://acm.hdu.edu.cn/showproblem.php?pid=1038', '1038', 'Hdu', '1.0s', '32.0MB', 'Biker''s Trip Odometer', '<div class="panel_content">Most bicycle speedometers work by using a Hall Effect sensor fastened to the front fork of the bicycle. A magnet is attached to one of the spokes on the front wheel so that it will line up with the Hall Effect switch once per revolution of the wheel. The speedometer monitors the sensor to count wheel revolutions. If the diameter of the wheel is known, the distance traveled can be easily be calculated if you know how many revolutions the wheel has made. In addition, if the time it takes to complete the revolutions is known, the average speed can also be calculated. <br>For this problem, you will write a program to determine the total distance traveled (in miles) and the average speed (in Miles Per Hour) given the wheel diameter, the number of revolutions and the total time of the trip. You can assume that the front wheel never leaves the ground, and there is no slipping or skidding.<br/></br></div>', '<div class="panel_content">Input consists of multiple datasets, one per line, of the form:<br><br>diameter revolutions time<br><br>The diameter is expressed in inches as a floating point value. The revolutions is an integer value. The time is expressed in seconds as a floating point value. Input ends when the value of revolutions is 0 (zero).<br/></br></br></br></br></div>', '<div class="panel_content">For each data set, print:<br><br>Trip #N: distance MPH<br><br>Of course N should be replaced by the data set number, distance by the total distance in miles (accurate to 2 decimal places) and MPH by the speed in miles per hour (accurate to 2 decimal places). Your program should not generate any output for the ending case when revolutions is 0.<br><br>Constants<br><br>For p use the value: 3.1415927.<br>There are 5280 feet in a mile.<br>There are 12 inches in a foot.<br>There are 60 minutes in an hour.<br>There are 60 seconds in a minute.<br>There are 201.168 meters in a furlong.<br/></br></br></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">26 1000 5\r\n27.25 873234 3000\r\n26 0 1000</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Trip #1: 1.29 928.20\r\nTrip #2: 1179.86 1415.84</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Greater+New+York+2003&amp;source=1&amp;searchmode=source"> Greater New York 2003 </a> </div>', '67.06%', NULL, '2016-06-16 16:31:07', 4, '动规', -0.886892376849147, 2.08112379762533),
(265, 'http://acm.hdu.edu.cn/showproblem.php?pid=1039', '1039', 'Hdu', '1.0s', '32.0MB', 'Easier Done Than Said?', '<div class="panel_content">Password security is a tricky thing. Users prefer simple passwords that are easy to remember (like buddy), but such passwords are often insecure. Some sites use random computer-generated passwords (like xvtpzyo), but users have a hard time remembering them and sometimes leave them written on notes stuck to their computer. One potential solution is to generate "pronounceable" passwords that are relatively secure but still easy to remember.<br><br>FnordCom is developing such a password generator. You work in the quality control department, and it''s your job to test the generator and make sure that the passwords are acceptable. To be acceptable, a password must satisfy these three rules:<br><br>It must contain at least one vowel.<br><br>It cannot contain three consecutive vowels or three consecutive consonants.<br><br>It cannot contain two consecutive occurrences of the same letter, except for ''ee'' or ''oo''.<br><br>(For the purposes of this problem, the vowels are ''a'', ''e'', ''i'', ''o'', and ''u''; all other letters are consonants.) Note that these rules are not perfect; there are many common/pronounceable words that are not acceptable.<br/></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input consists of one or more potential passwords, one per line, followed by a line containing only the word ''end'' that signals the end of the file. Each password is at least one and at most twenty letters long and consists only of lowercase letters.<br/></div>', '<div class="panel_content">For each password, output whether or not it is acceptable, using the precise format shown in the example.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">a\r\ntv\r\nptoui\r\nbontres\r\nzoggax\r\nwiinq\r\neep\r\nhouctuh\r\nend</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">&lt;a&gt; is acceptable.\r\n&lt;tv&gt; is not acceptable.\r\n&lt;ptoui&gt; is not acceptable.\r\n&lt;bontres&gt; is not acceptable.\r\n&lt;zoggax&gt; is not acceptable.\r\n&lt;wiinq&gt; is not acceptable.\r\n&lt;eep&gt; is acceptable.\r\n&lt;houctuh&gt; is acceptable.</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Mid-Central+USA+2000&amp;source=1&amp;searchmode=source"> Mid-Central USA 2000 </a> </div>', '48.50%', NULL, '2016-06-16 16:31:07', -1, '未分类', -0.761302342139002, 0.739883978169879),
(266, 'http://acm.hdu.edu.cn/showproblem.php?pid=1040', '1040', 'Hdu', '1.0s', '32.0MB', 'As Easy As A+B', '<div class="panel_content">These days, I am thinking about a question, how can I get a problem as easy as A+B? It is fairly difficulty to do such a thing. Of course, I got it after many waking nights.<br>Give you some integers, your task is to sort these number ascending (升序).<br>You should know how easy the problem is now!<br>Good luck!<br/></br></br></br></div>', '<div class="panel_content">Input contains multiple test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow. Each test case contains an integer N (1&lt;=N&lt;=1000 the number of integers to be sorted) and then N integers follow in the same line. <br>It is guarantied that all integers are in the range of 32-int.<br/></br></div>', '<div class="panel_content">For each case, print the sorting result, and one line one case.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n3 2 1 3\r\n9 1 4 7 2 5 8 3 6 9</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1 2 3\r\n1 2 3 4 5 6 7 8 9</div></pre></div>', '', '', '42.96%', NULL, '2016-06-16 16:31:07', 23, '堆排序', 0.113915503179094, 0.339535454474664),
(267, 'http://acm.hdu.edu.cn/showproblem.php?pid=1041', '1041', 'Hdu', '1.0s', '32.0MB', 'Computer Transformation', '<div class="panel_content">A sequence consisting of one digit, the number 1 is initially written into a computer. At each successive time step, the computer simultaneously tranforms each digit 0 into the sequence 1 0 and each digit 1 into the sequence 0 1. So, after the first time step, the sequence 0 1 is obtained; after the second, the sequence 1 0 0 1, after the third, the sequence 0 1 1 0 1 0 0 1 and so on. <br><br>How many pairs of consequitive zeroes will appear in the sequence after n steps? <br/></br></br></div>', '<div class="panel_content">Every input line contains one natural number n (0 &lt; n ≤1000). </div>', '<div class="panel_content">For each input n print the number of consecutive zeroes pairs that will appear in the sequence after n steps.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2\r\n3</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n1</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Southeastern+Europe+2005&amp;source=1&amp;searchmode=source"> Southeastern Europe 2005 </a> </div>', '36.72%', NULL, '2016-06-16 16:31:07', -1, '未分类', -0.847457892569795, -0.111398622756049),
(268, 'http://acm.hdu.edu.cn/showproblem.php?pid=1042', '1042', 'Hdu', '5.0s', '256.0MB', 'N!', '<div class="panel_content">Given an integer N(0 ≤ N ≤ 10000), your task is to calculate N!<br/></div>', '<div class="panel_content">One N in one line, process to the end of file.<br/></div>', '<div class="panel_content">For each N, output N! in one line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n2\r\n3</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n2\r\n6</div></pre></div>', '', '', '29.03%', NULL, '2016-06-16 16:31:07', 3, '模拟', 0.528981563171364, -0.667117060881718),
(269, 'http://acm.hdu.edu.cn/showproblem.php?pid=1043', '1043', 'Hdu', '5.0s', '32.0MB', 'Eight', '<div class="panel_content">The 15-puzzle has been around for over 100 years; even if you don''t know it by that name, you''ve seen it. It is constructed with 15 sliding tiles, each with a number from 1 to 15 on it, and all packed into a 4 by 4 frame with one tile missing. Let''s call the missing tile ''x''; the object of the puzzle is to arrange the tiles so that they are ordered as: <br><pre><br> 1  2  3  4<br> 5  6  7  8<br> 9 10 11 12<br>13 14 15  x<br/></br></br></br></br></pre><br>where the only legal operation is to exchange ''x'' with one of the tiles with which it shares an edge. As an example, the following sequence of moves solves a slightly scrambled puzzle: <br><pre><br> 1  2  3  4     1  2  3  4     1  2  3  4     1  2  3  4<br> 5  6  7  8     5  6  7  8     5  6  7  8     5  6  7  8<br> 9  x 10 12     9 10  x 12     9 10 11 12     9 10 11 12<br>13 14 11 15    13 14 11 15    13 14  x 15    13 14 15  x<br>            r-&gt;            d-&gt;            r-&gt;<br/></br></br></br></br></br></pre><br>The letters in the previous row indicate which neighbor of the ''x'' tile is swapped with the ''x'' tile at each step; legal values are ''r'',''l'',''u'' and ''d'', for right, left, up, and down, respectively. <br><br>Not all puzzles can be solved; in 1870, a man named Sam Loyd was famous for distributing an unsolvable version of the puzzle, and <br>frustrating many people. In fact, all you have to do to make a regular puzzle into an unsolvable one is to swap two tiles (not counting the missing ''x'' tile, of course). <br><br>In this problem, you will write a program for solving the less well-known 8-puzzle, composed of tiles on a three by three <br>arrangement.<br/></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">You will receive, several descriptions of configuration of the 8 puzzle. One description is just a list of the tiles in their initial positions, with the rows listed from top to bottom, and the tiles listed from left to right within a row, where the tiles are represented by numbers 1 to 8, plus ''x''. For example, this puzzle <br><br> 1  2  3 <br> x  4  6 <br> 7  5  8 <br><br>is described by this list: <br><br>1 2 3 x 4 6 7 5 8<br/></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">You will print to standard output either the word ``unsolvable'''', if the puzzle has no solution, or a string consisting entirely of the letters ''r'', ''l'', ''u'' and ''d'' that describes a series of moves that produce a solution. The string should include no spaces and start at the beginning of the line. Do not print a blank line between cases.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">2  3  4  1  5  x  7  6  8</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">ullddrurdllurdruldr</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=South+Central+USA+1998+%28Sepcial+Judge+Module+By+JGShining%29&amp;source=1&amp;searchmode=source"> South Central USA 1998 (Sepcial Judge Module By JGShining) </a> </div>', '27.04%', NULL, '2016-06-16 16:31:07', 18, '树的BFS', -0.608408325925202, -0.810924563075487);
INSERT INTO `mixojapp_problem` (`id`, `url`, `sourceid`, `ojname`, `time_limit`, `memory_limit`, `title`, `description`, `pinput`, `poutput`, `sample_input`, `sample_output`, `hint`, `source`, `ac_rate`, `user_ac_rate`, `update_time`, `knowledge_tree_node_id`, `knowledge_tree_node_name`, `hot_degree`, `difficult`) VALUES
(270, 'http://acm.hdu.edu.cn/showproblem.php?pid=1044', '1044', 'Hdu', '1.0s', '32.0MB', 'Collect More Jewels', '<div class="panel_content">It is written in the Book of The Lady: After the Creation, the cruel god Moloch rebelled against the authority of Marduk the Creator.Moloch stole from Marduk the most powerful of all the artifacts of the gods, the Amulet of Yendor, and he hid it in the dark cavities of Gehennom, the Under World, where he now lurks, and bides his time.<br><br>Your goddess The Lady seeks to possess the Amulet, and with it to gain deserved ascendance over the other gods.<br><br>You, a newly trained Rambler, have been heralded from birth as the instrument of The Lady. You are destined to recover the Amulet for your deity, or die in the attempt. Your hour of destiny has come. For the sake of us all: Go bravely with The Lady!<br><br>If you have ever played the computer game NETHACK, you must be familiar with the quotes above. If you have never heard of it, do not worry. You will learn it (and love it) soon.<br><br>In this problem, you, the adventurer, are in a dangerous dungeon. You are informed that the dungeon is going to collapse. You must find the exit stairs within given time. However, you do not want to leave the dungeon empty handed. There are lots of rare jewels in the dungeon. Try collecting some of them before you leave. Some of the jewels are cheaper and some are more expensive. So you will try your best to maximize your collection, more importantly, leave the dungeon in time.<br/></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">Standard input will contain multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;= 10) which is the number of test cases. T test cases follow, each preceded by a single blank line.<br><br>The first line of each test case contains four integers W (1 &lt;= W &lt;= 50), H (1 &lt;= H &lt;= 50), L (1 &lt;= L &lt;= 1,000,000) and M (1 &lt;= M &lt;= 10). The dungeon is a rectangle area W block wide and H block high. L is the time limit, by which you need to reach the exit. You can move to one of the adjacent blocks up, down, left and right in each time unit, as long as the target block is inside the dungeon and is not a wall. Time starts at 1 when the game begins. M is the number of jewels in the dungeon. Jewels will be collected once the adventurer is in that block. This does not cost extra time.<br><br>The next line contains M integers，which are the values of the jewels.<br><br>The next H lines will contain W characters each. They represent the dungeon map in the following notation:<br>&gt; [*] marks a wall, into which you can not move;<br>&gt; [.] marks an empty space, into which you can move;<br>&gt; [@] marks the initial position of the adventurer;<br>&gt; [&lt;] marks the exit stairs;<br>&gt; [A] - [J] marks the jewels.<br/></br></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">Results should be directed to standard output. Start each case with "Case #:" on a single line, where # is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<br><br>If the adventurer can make it to the exit stairs in the time limit, print the sentence "The best score is S.", where S is the maximum value of the jewels he can collect along the way; otherwise print the word "Impossible" on a single line.<br/></br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3\r\n\r\n4 4 2 2\r\n100 200\r\n****\r\n*@A*\r\n*B&lt;*\r\n****\r\n\r\n4 4 1 2\r\n100 200\r\n****\r\n*@A*\r\n*B&lt;*\r\n****\r\n\r\n12 5 13 2\r\n100 200\r\n************\r\n*B.........*\r\n*.********.*\r\n*@...A....&lt;*\r\n************</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">Case 1:\r\nThe best score is 200.\r\n\r\nCase 2:\r\nImpossible\r\n\r\nCase 3:\r\nThe best score is 300.</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Asia+2005%2C+Hangzhou+%28Mainland+China%29%2C+Preliminary&amp;source=1&amp;searchmode=source"> Asia 2005, Hangzhou (Mainland China), Preliminary </a> </div>', '23.06%', NULL, '2016-06-16 16:31:07', 18, '树的BFS', -0.866874977217581, -1.09853956746302),
(271, 'http://acm.hdu.edu.cn/showproblem.php?pid=1045', '1045', 'Hdu', '1.0s', '32.0MB', 'Fire Net', '<div class="panel_content">Suppose that we have a square city with straight streets. A map of a city is a square board with n rows and n columns, each representing a street or a piece of wall. <br><br>A blockhouse is a small castle that has four openings through which to shoot. The four openings are facing North, East, South, and West, respectively. There will be one machine gun shooting through each opening. <br><br>Here we assume that a bullet is so powerful that it can run across any distance and destroy a blockhouse on its way. On the other hand, a wall is so strongly built that can stop the bullets. <br><br>The goal is to place as many blockhouses in a city as possible so that no two can destroy each other. A configuration of blockhouses is legal provided that no two blockhouses are on the same horizontal row or vertical column in a map unless there is at least one wall separating them. In this problem we will consider small square cities (at most 4x4) that contain walls through which bullets cannot run through. <br><br>The following image shows five pictures of the same board. The first picture is the empty board, the second and third pictures show legal configurations, and the fourth and fifth pictures show illegal configurations. For this board, the maximum number of blockhouses in a legal configuration is 5; the second picture shows one way to do it, but there are several other ways. <br><br><img src="http://acm.hdu.edu.cn/data/images/1045-1.jpg" style="max-width:100%;"><br><br>Your task is to write a program that, given a description of a map, calculates the maximum number of blockhouses that can be placed in the city in a legal configuration. <br/></br></br></img></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input file contains one or more map descriptions, followed by a line containing the number 0 that signals the end of the file. Each map description begins with a line containing a positive integer n that is the size of the city; n will be at most 4. The next n lines each describe one row of the map, with a ''.'' indicating an open space and an uppercase ''X'' indicating a wall. There are no spaces in the input file. <br/></div>', '<div class="panel_content">For each test case, output one line containing the maximum number of blockhouses that can be placed in the city in a legal configuration.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">4\r\n.X..\r\n....\r\nXX..\r\n....\r\n2\r\nXX\r\n.X\r\n3\r\n.X.\r\nX.X\r\n.X.\r\n3\r\n...\r\n.XX\r\n.XX\r\n4\r\n....\r\n....\r\n....\r\n....\r\n0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">5\r\n1\r\n5\r\n2\r\n4</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Zhejiang+University+Local+Contest+2001&amp;source=1&amp;searchmode=source"> Zhejiang University Local Contest 2001 </a> </div>', '58.28%', NULL, '2016-06-16 16:31:07', 13, '图的DFS', -0.801378542435498, 1.44663642613725),
(272, 'http://acm.hdu.edu.cn/showproblem.php?pid=1047', '1047', 'Hdu', '1.0s', '32.0MB', 'Integer Inquiry', '<div class="panel_content">One of the first users of BIT''s new supercomputer was Chip Diller. He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers. <br>``This supercomputer is great,'''' remarked Chip. ``I only wish Timothy were here to see these results.'''' (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.) <br/></br></div>', '<div class="panel_content">The input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative). <br><br>The final input line will contain a single zero on a line by itself.<br/></br></br></div>', '<div class="panel_content">Your program should output the sum of the VeryLongIntegers given in the input. <br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br/></br></br></br></br></br></br></br></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">1\r\n\r\n\r\n123456789012345678901234567890\r\n123456789012345678901234567890\r\n123456789012345678901234567890\r\n0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">370370367037037036703703703670</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=East+Central+North+America+1996&amp;source=1&amp;searchmode=source"> East Central North America 1996 </a> </div>', '25.99%', NULL, '2016-06-16 16:31:07', 19, '二叉树', -0.636374723962685, -0.886802893378732),
(273, 'http://acm.hdu.edu.cn/showproblem.php?pid=1048', '1048', 'Hdu', '1.0s', '32.0MB', 'The Hardest Problem Ever', '<div class="panel_content">Julius Caesar lived in a time of danger and intrigue. The hardest situation Caesar ever faced was keeping himself alive. In order for him to survive, he decided to create one of the first ciphers. This cipher was so incredibly sound, that no one could figure it out without knowing how it worked. <br>You are a sub captain of Caesar''s army. It is your job to decipher the messages sent by Caesar and provide to your general. The code is simple. For each letter in a plaintext message, you shift it five places to the right to create the secure message (i.e., if the letter is ''A'', the cipher text would be ''F''). Since you are creating plain text out of Caesar''s messages, you will do the opposite: <br><br>Cipher text<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z<br><br>Plain text<br>V W X Y Z A B C D E F G H I J K L M N O P Q R S T U <br><br>Only letters are shifted in this cipher. Any non-alphabetical character should remain the same, and all alphabetical characters will be upper case.<br/></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. All characters will be uppercase. <br><br>A single data set has 3 components: <br><br>Start line - A single line, "START" <br><br>Cipher message - A single line containing from one to two hundred characters, inclusive, comprising a single message from Caesar <br><br>End line - A single line, "END" <br><br>Following the final data set will be a single line, "ENDOFINPUT".<br/></br></br></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">For each data set, there will be exactly one line of output. This is the original message by Caesar.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">START\r\nNS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\r\nEND\r\nSTART\r\nN BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ\r\nEND\r\nSTART\r\nIFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ\r\nEND\r\nENDOFINPUT</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\r\nI WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME\r\nDANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=South+Central+USA+2002&amp;source=1&amp;searchmode=source"> South Central USA 2002 </a> </div>', '47.31%', NULL, '2016-06-16 16:31:07', 21, '排序', -0.533286150885955, 0.653888537159535),
(274, 'http://acm.hdu.edu.cn/showproblem.php?pid=1049', '1049', 'Hdu', '1.0s', '32.0MB', 'Climbing Worm', '<div class="panel_content">An inch worm is at the bottom of a well n inches deep. It has enough energy to climb u inches every minute, but then has to rest a minute before climbing again. During the rest, it slips down d inches. The process of climbing and resting then repeats. How long before the worm climbs out of the well? We''ll always count a portion of a minute as a whole minute and if the worm just reaches the top of the well at the end of its climbing, we''ll assume the worm makes it out.<br/></div>', '<div class="panel_content">There will be multiple problem instances. Each line will contain 3 positive integers n, u and d. These give the values mentioned in the paragraph above. Furthermore, you may assume d &lt; u and n &lt; 100. A value of n = 0 indicates end of output.<br/></div>', '<div class="panel_content">Each input instance should generate a single integer on a line, indicating the number of minutes it takes for the worm to climb out of the well.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">10 2 1\r\n20 3 1\r\n0 0 0</div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">17\r\n19</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=East+Central+North+America+2002&amp;source=1&amp;searchmode=source"> East Central North America 2002 </a> </div>', '68.21%', NULL, '2016-06-16 16:31:07', 3, '模拟', -0.658958987662828, 2.1642286355765),
(275, 'http://acm.hdu.edu.cn/showproblem.php?pid=1050', '1050', 'Hdu', '1.0s', '32.0MB', 'Moving Tables', '<div class="panel_content">The famous ACM (Advanced Computer Maker) Company has rented a floor of a building whose shape is in the following figure. <br><br><center><img src="http://acm.hdu.edu.cn/data/images/1050-1.gif" style="max-width:100%;"/></center><br><br>The floor has 200 rooms each on the north side and south side along the corridor. Recently the Company made a plan to reform its system. The reform includes moving a lot of tables between rooms. Because the corridor is narrow and all the tables are big, only one table can pass through the corridor. Some plan is needed to make the moving efficient. The manager figured out the following plan: Moving a table from a room to another room can be done within 10 minutes. When moving a table from room i to room j, the part of the corridor between the front of room i and the front of room j is used. So, during each 10 minutes, several moving between two rooms not sharing the same part of the corridor will be done simultaneously. To make it clear the manager illustrated the possible cases and impossible cases of simultaneous moving. <br><br><center><img src="http://acm.hdu.edu.cn/data/images/1050-2.gif" style="max-width:100%;"/></center><br><br>For each room, at most one table will be either moved in or moved out. Now, the manager seeks out a method to minimize the time to move all the tables. Your job is to write a program to solve the manager’s problem.<br/></br></br></br></br></br></br></br></br></div>', '<div class="panel_content">The input consists of T test cases. The number of test cases ) (T is given in the first line of the input. Each test case begins with a line containing an integer N , 1&lt;=N&lt;=200 , that represents the number of tables to move. Each of the following N lines contains two positive integers s and t, representing that a table is to move from room number s to room number t (each room number appears at most once in the N lines). From the N+3-rd line, the remaining test cases are listed in the same manner as above.<br/></div>', '<div class="panel_content">The output should contain the minimum time in minutes to complete the moving, one per line.<br/></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">3 \r\n4 \r\n10 20 \r\n30 40 \r\n50 60 \r\n70 80 \r\n2 \r\n1 3 \r\n2 200 \r\n3 \r\n10 100 \r\n20 80 \r\n30 50 </div></pre></div>', '<div class="panel_content"><pre><div style="font-family:Courier New,Courier,monospace;">10\r\n20\r\n30</div></pre></div>', '', '<div class="panel_content"> <a href="/search.php?field=problem&amp;key=Asia+2001%2C+Taejon+%28South+Korea%29&amp;source=1&amp;searchmode=source"> Asia 2001, Taejon (South Korea) </a> </div>', '32.83%', NULL, '2016-06-16 16:31:07', 25, '贪心', -0.403224804572483, -0.392509770260451),
(276, 'http://poj.org/problem?id=3220', '3220', 'Poj', ' 2000MS', ' 131072K', 'Context-Free Languages', '<div class="ptx" lang="en-US"><span lang="en-us"><p><i>Context-free grammars</i> (CFG) are a powerful method of describing languages. The syntax of most programming languages including C, C++, Java and Pascal, compilers for which are provided in this online judge system, is specified using CFGs.</p><p>In this problem, we work with CFGs in a generative manner. A CFG consists of a set of <i>production rules</i> for transforming strings. Every rule is of the form</p><blockquote><p><i>V</i> → <i>w</i></p></blockquote><p>where <i>V</i> is a <i>symbol</i> and <i>w</i> is a string of symbols. Symbols are classified into <i>terminals</i> and <i>variables</i>. In the rule above, <i>V</i> is restricted to be a variable, while <i>w</i> can contain terminals and/or variables. The term “context-free” expresses the fact that <i>V</i> can always be replaced by <i>w</i>, regardless of the context in which it occurs. Among variables, exactly one of them is designated as the <i>start variable</i>. To generate a string using the CFG, one begins with a string consisting of only a single start variable, and then applies the rules successively and arbitrarily to rewrite the string until only terminals are left.</p><p>For example, the alphabet of terminals consists of <code>z</code>, the start variable is <i>S</i> and we we have the following rules:</p><ol><li><i>S</i> → <i>CB</i></li><li><i>S</i> → <i>ZZ</i></li><li><i>A</i> → <i>CB</i></li><li><i>A</i> → <i>ZZ</i></li><li><i>B</i> → <i>ZZ</i></li><li><i>C</i> → <i>BA</i></li><li><i>Z</i> → <code>z</code></li></ol><p>then we start with <i>S</i>, and we can choose a rule to apply to it. If we choose rule 1, we replace <i>S</i> with <i>CB</i> and obtain the string <i>CB</i>. If we then choose rule 6, we replace <i>C</i> with <i>BA</i> and obtain the string <i>BAB</i>. If we now choose rule 4, we replace <i>A</i> with <i>ZZ</i> and obtain the string <i>BZZB</i>. We can write this series of choice more briefly, using symbols: <i>S</i> ⇒ <i>CB</i> ⇒ <i>BAB</i> ⇒ <i>BZZB</i> ⇒ <i>ZZZZB</i> ⇒ <i>ZZZZZZ</i> ⇒ <code>z</code><i>ZZZZZ</i> ⇒ <code>zz</code><i>ZZZZ</i> ⇒ <code>zzz</code><i>ZZZ</i> ⇒ <code>zzzz</code><i>ZZ</i> ⇒ <code>zzzzz</code><i>Z</i> ⇒ <code>zzzzzz</code>. The language of the grammar is the set of all strings consisting of twice an odd number of <code>z</code>’s.</p><p>Given a CFG and some strings, determine whether each string belongs to the language of the grammar.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>To make everything brief, we group together all rules with the same variable to the left of “→”  in the CFG. For example, we group the following three rules</p><blockquote><p><i>S</i> → <i>u</i><br><i>S</i> → <i>v</i><br><i>S</i> → <i>w</i></br></br></p></blockquote><p>into</p><blockquote><p><i>S</i> → <i>u</i> | <i>v</i> | <i>w</i></p></blockquote><p>And the CFG is given in a special form called <i>Chomsky normal form</i> (CNF). A CFG in CNF only contains rules of the form</p><blockquote><p><i>A</i> → <i>BC</i><br><i>A</i> → <i>a</i></br></p></blockquote><p>where <i>a</i> is any terminal and <i>A</i>, <i>B</i>, and <i>C</i> are any variables except that <i>B</i> and <i>C</i> may not be the start variable. CNF also permits the rule <i>S</i> → <i>ε</i>, where <i>S</i> is the start variable and <i>ε</i> represents the empty string, so that the CFG can generate the empty string. We ignore this case just for this problem.</p><p>The input contains exactly one CFG in CNF and no more than 50 strings. We use single lowercase letters as terminals and single uppercase letters as variables. <i>S</i> will always be the start variable. The CFG is given in several lines. A line contains all production rules for one variable grouped together as described above. “→” will be replaced by “<code>-&gt;</code>”. Not all possible variables are involved in the CFG, but every involved one will has at least one production rule. The CFG ends with a line containing only a single “<code>#</code>”. Following the CFG come the strings, one on a separate line. The input ends where no more strings can be found. Spaces and blank lines will not show up in the input.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>For each string, output exactly one line. If the string belongs to the language of the given CFG, the line should read “<code>YES</code>” (without quotes); otherwise it should read “<code>NO</code>” (without quotes).</p></span></div>', '<pre class="sio">S-&gt;CB|ZZ\r\nA-&gt;CB|ZZ\r\nB-&gt;ZZ\r\nC-&gt;BA\r\nZ-&gt;z\r\n#\r\nzzzzzz\r\nz\r\na</pre>', '<pre class="sio">YES\r\nNO\r\nNO</pre>', '', 'PKU Local 2007 (POJ Monthly--2007.04.28)', '27.35%', '77.78%', '2016-06-16 16:31:33', 19, '二叉树', -0.975580522891494, -0.881374089696567),
(277, 'http://poj.org/problem?id=3221', '3221', 'Poj', ' 2000MS', ' 131072K', 'Diamond Puzzle', '<div class="ptx" lang="en-US"><p>A diamond puzzle is played on a tessellated hexagon like the one shown in <b>Figure 1</b> below. And in this problem the faces produced by the tessellation are identified as they are numbered in the same figure. If two faces share a side, they are called neighboring faces. Thus, even-numbered faces have three neighboring faces, while odd-numbered faces have only two. At any point during the play of the puzzle, six of the seven faces hold a unique digit ranging from 1 to 6, and the other one is empty. A move in the puzzle is to move a digit from one face to a neighboring empty one.</p><div align="center"><img src="http://poj.org/images/3221_1.png"/></div><p>Starting from any configuration, some series of moves can always make the puzzle look identical to either one shown in <b>Figures 2</b> and <b>3</b>. Your task is to calculate the minimum number of moves to make it become the one in <b>Figure 2</b>.</p></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The input contains multiple test cases. The first contains an integer <i>N</i> (0 ≤ <i>N</i> ≤ 5,040), the number of test cases. Then follow <i>N</i> lines, each with a permutation of {0, 1, 2, 3, 4, 5, 6} describing a starting configuration of the puzzle. The <i>i</i>th digit in the permutation is the one in the face numbered <i>i</i> − 1. A zero means the face is empty.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>For each test cases, output the minimum number of moves the configuration takes to reach the one shown in <b>Figure 2</b>. If this is impossible, just output “<code>-1</code>” and nothing else.</p></span></div>', '<pre class="sio">3\r\n1324506\r\n2410653\r\n0123456</pre>', '<pre class="sio">10\r\n-1\r\n0</pre>', '', 'PKU Local 2007 (POJ Monthly--2007.04.28)', '55.40%', '92.64%', '2016-06-16 16:31:34', 18, '树的BFS', -0.960463703729086, 1.44823368843194),
(278, 'http://poj.org/problem?id=3222', '3222', 'Poj', ' 3000MS', ' 131072K', 'Edge Pairing', '<div class="ptx" lang="en-US"><p>Given a simple connected undirected graph with <i>n</i> vertices and <i>m</i> edges, where <i>m</i> is even, your task is to find a pairing of the edges such that each pair of edges shares a vertex.</p></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The input contains exactly one test cases. On the first line of the test case there are two integers <i>n</i> and <i>m</i> (3 ≤ <i>n</i> ≤ 20,000, 2 ≤ <i>m</i> ≤ 100,000, <i>m</i> is even) which indicate the size of the graph. Next come <i>m</i> lines each with a pair of integers <i>a</i> and <i>b</i> representing an edge (<i>a</i>, <i>b</i>). The vertices are numbered 1 through <i>n</i>.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>If a pairing exists, output it in <sup><i>m</i></sup>⁄<sub>2</sub> lines. Each line contains three integers <i>a</i>, <i>b</i> and <i>c</i> in this order, indicating that the edges (<i>a</i>, <i>b</i>) and (<i>b</i>, <i>c</i>) are paired together. If no pairing exists, just output “<code>NO</code>” and nothing else.</p></span></div>', '<pre class="sio">7 10\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n4 5\r\n4 6\r\n5 7\r\n6 7\r\n2 5\r\n3 6</pre>', '<pre class="sio">1 2 4\r\n1 3 4\r\n4 5 2\r\n4 6 3\r\n5 7 6</pre>', '<div class="ptx" lang="en-US"><p>Illustration of the sample test case:</p><div align="center"><img src="http://poj.org/images/3222_1.png"/></div></div>', 'PKU Local 2007 (POJ Monthly--2007.04.28)', '39.45%', '81.56%', '2016-06-16 16:31:35', 13, '图的DFS', -0.970658767815361, 0.123554755770632),
(279, 'http://poj.org/problem?id=3223', '3223', 'Poj', ' 2000MS', ' 131072K', 'Football Game', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Football fans from NJU and PKU ACM-ICPC teams are going to have a football match, with frkstyc as the referee due to his incompetence in sports (and Ikki says, “This is the fact.”). But because they are unable to find enough men to build up two 11-player teams for a full match, they have decided on a modified version of penalty shootout!</p><p>In a normal penalty shootout, the ball should always be put on the spot in the area before the taker tries his luck. Yet for these fans, this is far too unchallenging for the goalkeepers among them. Now the penalty takers are allowed more choices of positions for the ball – anywhere on a straight line segment that is chosen in advance.</p><p>Players tend to carefully choose the point to place the ball so that the field angle spanned by the goal with respect to the ball is as large as possible, hoping to have a better chance in hitting the bottom of the net. In real situations, to make the angle really the largest one seems to be impossible, for man’s perception works seemingly better with fuzziness than accuracy. But for you, a contestant in programming, this would not be too difficult for you have the computer before your eyes as an aid, provided that you are given the exact descriptions of the goal and the line segment for placing the ball.</p></span></div>', '<div class="ptx" lang="en-US"><script lang="text/javascript">function vec(v, a){var V = document.getElementById(v);var A = document.getElementById(a);	A.style.verticalAlign=V.offsetHeight/2;A.style.marginLeft=-(A.offsetWidth+V.offsetWidth)/2;A.style.marginRight=(V.offsetWidth-A.offsetWidth)/2;}</script><span lang="en-us"><p>The input contains multiple test cases. Each test case consists of a single line with the coordinates of four points <i>A</i>, <i>B</i>, <i>U</i> and <i>V</i> in the form <code>(</code><i>x</i><code>,</code><i>y</i><code>)</code> separated by spaces. The four points do not coincide with each other. <i>A</i> and <i>B</i> describe the goal. The two posts are located on <i>A</i> and <i>B</i>, and when looking along the vector <span id="AB1"><i>AB</i></span><span id="rarr1">→</span><script lang="text/javascript">vec("AB1","rarr1");</script>  while standing on <i>A</i>, one will find the goal facing his right hand side. <i>U</i> and <i>V</i> describe the line segment. When looking along the vector <span id="UV2"><i>UV</i></span><span id="rarr2">→</span><script lang="text/javascript">vec("UV2","rarr2");</script> while standing on <i>U</i>, one will find both <i>A</i> and <i>B</i> on his left hand side. It is possible that a portion of the segment lies off the pitch, where a play is also allowed. It is also possible that a portion of the segment lies behind the goal, where a play, however, is disallowed.</p><p>All coordinates consist of nonnegative integers not exceeding 10,000. End of file (EOF) indicates the end of input.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>For each test case, you have to find a point <i>P</i> on the segment <i>UV</i> from which the goal <i>AB</i> is visible in the front such that the angle ∠<i>APB</i> is maximized. If such <i>P</i> does not exist, the answer is assumed to be 0. Output the angle in degrees accurate to the third digit beyond the decimal point. An error within 0.001° is allowed.</p></span></div>', '<pre class="sio">(36,89) (79,97) (11,88) (72,32)</pre>', '<pre class="sio">56.167</pre>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Illustration of the sample test case:</p><div align="center"><img src="http://poj.org/images/3223_1.png"/></div><p><i>BA</i> is extended to intersect <i>UV</i> at <i>R</i>. When a ball placed somewhere on <i>UR</i>, it lies behind the goal, therefore this is disallowed. Alternatively, it can be placed anywhere on <i>RV</i>. Among all possible positions, <i>P</i> maximizes the angle ∠<i>APB</i>. The coordinates of <i>P</i> are roughly (42.3679, 59.1950).</p></span></div>', 'PKU Local 2007 (POJ Monthly--2007.04.28)', '14.69%', '57.98%', '2016-06-16 16:31:37', 19, '二叉树', -0.979745084878991, -1.93281203875564),
(280, 'http://poj.org/problem?id=3224', '3224', 'Poj', ' 1000MS', ' 131072K', 'Go for Lab Cup!', '<div class="ptx" lang="en-US"><p>The Lab Cup Table Tennis Competition is going to take place soon among laboratories in PKU. Students from the AI Lab are all extreme enthusiasts in table tennis and hold strong will to represent the lab in the competition. Limited by the quota, however, only one of them can be selected to play in the competition.</p><p>To make the selection fair, they agreed on a single round robin tournament, in which every pair of students played a match decided by best of 5 games. The one winning the most matches would become representative of the lab. Now Ava, head of the lab, has in hand a form containing the scores of all matches. Who should she decide on for the competition?</p></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The input contains exactly one test case. The test case starts with a line containing <i>n</i> (2 ≤ <i>n</i> ≤ 100), the number of students in the lab. Then follows an <i>n</i> × <i>n</i> matrix <i>A</i>. Each element in the matrix will be one of 0, 1, 2 and 3. The element at row <i>i</i> and column <i>j</i>, <i>a<sub>ij</sub></i>, is the number of games won by the <i>i</i>th student in his/her match with the <i>j</i>th student. Exactly one of <i>a<sub>ij</sub></i> and <i>a<sub>ji</sub></i> (<i>i</i> ≠ <i>j</i>) is 3 and the other one will be less than 3. All diagonal elements of the matrix are 0’s.</p></span></div>', '<div class="ptx" lang="en-US"><p>Output the number of the student who won the most matches. In the case of a tie, choose the one numbered the smallest.</p></div>', '<pre class="sio">4\r\n0 0 3 2\r\n3 0 3 1\r\n2 2 0 2\r\n3 3 3 0</pre>', '<pre class="sio">4</pre>', '', 'PKU Local 2007 (POJ Monthly--2007.04.28)', '50.92%', '95.24%', '2016-06-16 16:31:39', 19, '二叉树', -0.745961718762674, 1.07616085969698),
(281, 'http://poj.org/problem?id=3225', '3225', 'Poj', ' 6000MS', ' 131072K', 'Help with Intervals', '<div class="ptx" lang="en-US"><span lang="en-us"><p>LogLoader, Inc. is a company specialized in providing products for analyzing logs. While Ikki is working on graduation design, he is also engaged in an internship at LogLoader. Among his tasks, one is to write a module for manipulating time intervals, which have confused him a lot. Now he badly needs your help.</p><p>In discrete mathematics, you have studied several basic set operations, namely union, intersection, relative complementation and symmetric difference, which naturally apply to the specialization of sets as intervals.. For your quick reference they are summarized in the table below:</p><blockquote><table border="1" bordercolor="#000000" id="table1" style="border-collapse: collapse"><tr><th>Operation</th><th>Notation</th><th><p align="left">Definition</p></th></tr><tr><td align="center">Union</td><td align="center"><i>A</i> ∪ <i>B</i></td><td>{<i>x</i> : <i>x</i> ∈ <i>A</i> or <i>x</i> ∈ <i>B</i>}</td></tr><tr><td align="center">Intersection</td><td align="center"><i>A</i> ∩ <i>B</i></td><td>{<i>x</i> : <i>x</i> ∈ <i>A</i> and <i>x</i> ∈ <i>B</i>}</td></tr><tr><td align="center">Relative complementation</td><td align="center"><i>A</i> − <i>B</i></td><td>{<i>x</i> : <i>x</i> ∈ <i>A</i> but <script lang="javascript">document.write(navigator.userAgent.indexOf("MSIE 6.0")!=-1?"not <i>x</i> &isin;":"<i>x</i> &notin;");</script><i> B</i>}</td></tr><tr><td align="right">Symmetric difference</td><td align="center"><i>A</i> ⊕ <i>B</i></td><td>(<i>A</i> − <i>B</i>) ∪ (<i>B</i> − <i>A</i>)</td></tr></table></blockquote><p>Ikki has abstracted the interval operations emerging from his job as a tiny programming language. He wants you to implement an interpreter for him. The language maintains a set <i>S</i>, which starts out empty and is modified as specified by the following commands:</p><blockquote><table border="1" bordercolor="#000000" id="table2" style="border-collapse: collapse"><tr><th>Command</th><th>Semantics</th></tr><tr><td align="center"><code>U</code> <i>T</i></td><td><i>S</i> ← <i>S</i> ∪ <i>T</i></td></tr><tr><td align="center"><code>I</code> <i>T</i></td><td><i>S</i> ← <i>S</i> ∩ <i>T</i></td></tr><tr><td align="center"><code>D</code> <i>T</i></td><td><i>S</i> ← <i>S</i> − <i>T</i></td></tr><tr><td align="center"><code>C</code> <i>T</i></td><td><i>S</i> ← <i>T</i> − <i>S</i></td></tr><tr><td align="center"><code>S</code> <i>T</i></td><td><i>S</i> ← <i>S</i> ⊕ <i>T</i></td></tr></table></blockquote></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>The input contains exactly one test case, which consists of between 0 and 65,535 (inclusive) commands of the language. Each command occupies a single line and appears like</p><blockquote><p><code>X</code> <i>T</i></p></blockquote><p>where <code>X</code> is one of ‘<code>U</code>’, ‘<code>I</code>’, ‘<code>D</code>’, ‘<code>C</code>’ and ‘<code>S</code>’ and <i>T</i> is an interval in one of the forms <code>(</code><i>a</i><code>,</code><i>b</i><code>)</code>, <code>(</code><i>a</i><code>,</code><i>b</i><code>]</code>, <code>[</code><i>a</i><code>,</code><i>b</i><code>)</code> and <code>[</code><i>a</i><code>,</code><i>b</i><code>]</code> (<i>a</i>, <i>b</i> ∈ <i><b>Z</b></i>, 0 ≤ <i>a</i> ≤ <i>b</i> ≤ 65,535), which take their usual meanings. The commands are executed in the order they appear in the input.</p><p>End of file (EOF) indicates the end of input.</p></span></div>', '<div class="ptx" lang="en-US"><span lang="en-us"><p>Output the set <i>S</i> as it is after the last command is executed as the union of a minimal collection of disjoint intervals. The intervals should be printed on one line separated by single spaces and appear in increasing order of their endpoints. If <i>S</i> is empty, just print “<code>empty set</code>” and nothing else.</p></span></div>', '<pre class="sio">U [1,5]\r\nD [3,3]\r\nS [2,4]\r\nC (1,5)\r\nI (2,3]</pre>', '<pre class="sio">(2,3)</pre>', '', 'PKU Local 2007 (POJ Monthly--2007.04.28)', '24.81%', '88.01%', '2016-06-16 16:31:41', 19, '二叉树', -0.680978326191533, -1.09232609527398),
(282, 'http://poj.org/problem?id=3226', '3226', 'Poj', ' 1000MS', ' 65536K', 'String''s Puzzle', '<div class="ptx" lang="en-US"><img align="right" hspace="10" src="http://poj.org/images/3226_1.jpg" vspace="10">Zhu Ming and Small Li find a strange stone tablet, which has some capitals printed on it. Capitals in every string are different with each other, and every capital string is followed by a number. Because of their supernormal intelligence, Zhu Ming and Small Li find the number following the string is numbered in the order of dictionary sequence from little to big (the original number is 0).For example, when the length of capital string is 3, number following the string will be: <br>　<table align="center" border="0" id="table1" width="250"><tr><td width="50%">ABC</td><td>0</td></tr><tr><td>ABD</td><td>1</td></tr><tr><td>……</td><td>　</td></tr><tr><td>ZYX</td><td>15599</td></tr></table><p>To better study this puzzle, please make a program to given a n-length string (1&lt;=n&lt;=26), output the number of the string. </p></br></img></div>', '<div class="ptx" lang="en-US">There are several test cases.<br>Each data is made up of two lines.<br>The first line is number n (1&lt;=n&lt;=26)<br>The second line is a string with its length of n.<br>n=0 means end of the input.<br/></br></br></br></br></div>', '<div class="ptx" lang="en-US">Output the string number for each group of data tested.</div>', '<pre class="sio">3\r\nABC\r\n3\r\nZYX \r\n3\r\nABD\r\n4\r\nABCD\r\n0</pre>', '<pre class="sio">0\r\n15599\r\n1\r\n0</pre>', '', 'South Central China 2007 hosted by NUDT', '40.34%', '85.39%', '2016-06-16 16:31:43', 19, '二叉树', -0.936855504929832, 0.197471009693426),
(283, 'http://poj.org/problem?id=3227', '3227', 'Poj', ' 1000MS', ' 65536K', 'Mountains', '<div class="ptx" lang="en-US"><img align="right" hspace="10" src="http://poj.org/images/3227_1.jpg" vspace="10">Octopus and Penguin love sports, especially the climb. They step on the most top building of Changsha to view the Yuelu Mountain in weekend and are attracted by the imposing landscape. However, they can''t see the whole mountain because the building is not high enough. Please help them to calculate the total length of surface for mountain they can see.<br>Suppose Octopus and Penguin''s coordinate is (0，h) and the mountain is composed by n points which satisfy: <br>1． All points'' coordinates are equal to or larger than zero.<br>2． The first point is 0, it''s coordinate is (<i>w</i><sub>0</sub>, 0)(<i>w</i><sub>0</sub> &gt;= 0).<br>3． n points are listing in ascending sort by x-axis.<br>4． Odd points'' y-axis is larger than the former one.<br>5． Even points'' y-axis (except for 0 point) is small than the former one.<br>Condition 3,4 and 5 is means for three nearby points (<i>w</i><sub>2k</sub>, <i>h</i><sub>2k</sub>), (<i>w</i><sub>2k+1</sub>, <i>h</i><sub>2k+1</sub>) and (<i>w</i><sub>2k+2</sub>, <i>h</i><sub>2k+2</sub>)(<i>k </i>∈<i>N</i><sup>*</sup>,2<i>k</i>+2&lt;<i>n</i>), satisfied <i>w</i><sub>2k </sub>&lt;<i> w</i><sub>2k+1 </sub>&lt;<i> w</i><sub>2k+2</sub>, <i>h</i><sub>2k+1 </sub>&gt;<i> h</i><sub>2k</sub> and <i>h</i><sub>2k+2</sub> &lt;<i> h</i><sub>2k+1</sub>.<br>6． The last point is (<i>w</i><sub>n-1</sub>, 0).<br><br>The figure below corresponding sample input one: <br><img src="http://poj.org/images/3227_2.gif"> </img></br></br></br></br></br></br></br></br></br></br></br></img></div>', '<div class="ptx" lang="en-US">There are several test cases. For each case, the first line is two integers n (0&lt;n&lt;=1000) and h. Then n lines follow and each line is two integers x and y(0&lt;=x,y&lt;=1000) describe the coordinates of mountains. n=h=0 means end of the input.</div>', '<div class="ptx" lang="en-US">For each case, output the surface length of mountain they can see.</div>', '<pre class="sio">3 5\r\n0 0\r\n1 1\r\n2 0\r\n5 5\r\n0 0\r\n2 2\r\n3 1\r\n5 3\r\n8 0\r\n5 4\r\n0 0\r\n2 2\r\n3 1\r\n5 3\r\n8 0\r\n0 0</pre>', '<pre class="sio">2.83\r\n7.07\r\n5.66</pre>', '', 'South Central China 2007 hosted by NUDT', '27.15%', '79.68%', '2016-06-16 16:31:44', 29, '几何', -0.956975206999299, -0.897984483836521),
(284, 'http://poj.org/problem?id=3228', '3228', 'Poj', ' 2000MS', ' 65536K', 'Gold Transportation', '<div class="ptx" lang="en-US"><img align="right" hspace="10" src="http://poj.org/images/3228_1.jpg" vspace="10">Recently, a number of gold mines have been discovered in Zorroming State. To protect this treasure, we must transport this gold to the storehouses as quickly as possible. Suppose that the Zorroming State consists of N towns and there are M bidirectional roads among these towns. The gold mines are only discovered in parts of the towns, while the storehouses are also owned by parts of the towns. The storage of the gold mine and storehouse for each town is finite. The truck drivers in the Zorroming State are famous for their bad temper that they would not like to drive all the time and they need a bar and an inn available in the trip for a good rest. Therefore, your task is to minimize the maximum adjacent distance among all the possible transport routes on the condition that all the gold is safely transported to the storehouses. </img></div>', '<div class="ptx" lang="en-US">The input contains several test cases. For each case, the first line is integer N(1&lt;=N&lt;=200). The second line is N integers associated with the storage of the gold mine in every towns .The third line is also N integers associated with the storage of the storehouses in every towns .Next is integer M(0&lt;=M&lt;=(n-1)*n/2).Then M lines follow. Each line is three integers x y and d(1&lt;=x,y&lt;=N,0&lt;d&lt;=10000), means that there is a road between x and y for distance of d. N=0 means end of the input.</div>', '<div class="ptx" lang="en-US">For each case, output the minimum of the maximum adjacent distance on the condition that all the gold has been transported to the storehouses or "No Solution".</div>', '<pre class="sio">4\r\n3 2 0 0\r\n0 0 3 3\r\n6\r\n1 2 4\r\n1 3 10\r\n1 4 12\r\n2 3 6\r\n2 4 8\r\n3 4 5\r\n0</pre>', '<pre class="sio">6</pre>', '', 'South Central China 2007 hosted by NUDT', '35.45%', '91.56%', '2016-06-16 16:31:46', 8, '最大流', -0.914112669660448, -0.208653127028442),
(285, 'http://poj.org/problem?id=3229', '3229', 'Poj', ' 2000MS', ' 65536K', 'The Best Travel Design', '<div class="ptx" lang="en-US"><img align="right" hspace="10" src="http://poj.org/images/3229_1.jpg" vspace="10">Dou Nai is an excellent ACM programmer, and he felt so tired recently that he wants to release himself from the hard work. He plans a travel to Xin Jiang .With the influence of literature, he wishes to visit Tian Chi, Da Ban Town, Lou Lan mysterious town , Yi Li , and other sights that also have great attraction to him. But the summer vocation time is not long. He must come back before the end of the summer vocation. For visiting more sights and all the necessary sights, he should make a thorough plan. Unfortunately, he is too tired to move, so you must help him to make this plan. Here are some prerequisites: there are two ways of transportation, bus and train, and velocity of the bus is 120km/h and the train is 80km/h. Suppose the travel is started from Urumuqi (point 1), and the end of the travel route is Urumuqi too. You need to spend some time to visit the sights, but the time of each visit is not always equal. Suppose we spend 12 hours on traveling every day.</img></div>', '<div class="ptx" lang="en-US">There are several test cases. For each case, the first line is three integers N, M and K. N (1&lt;=n&lt;=15) is the number of sights, M(0&lt;=M&lt;=N) is total sights he must arrived (sight 1 is always must be arrived) and K is total traveling time (per day). The second line is M integers which sights he must visited. The third line is N integers, the i<sub>th</sub> integer means the time he will stay in the sight i (per hour). Then several lines follow. Each line is four integers x, y, len and kind, 1&lt;=x, y&lt;=n, 0&lt;len&lt;=1000, means there is a bidirectional path between sights x and y, the distance is len, kind=0 means x and y are connected by train, kind=1 is by bus.<br>x=y=len=kind=0 means end of the path explanation.<br>N=M=K=0 means end of the input.<br/></br></br></div>', '<div class="ptx" lang="en-US">For each case, output maximum sights he will travel with all necessary sights visited or "No Solution" if he can''t travel all the sights he like best in time.</div>', '<pre class="sio">3 3 3\r\n1 2 3\r\n10 8 6\r\n1 2 120 0\r\n1 3 60 1\r\n2 3 50 1\r\n0 0 0 0\r\n3 3 2\r\n1 2 3\r\n10 8 6\r\n1 2 120 0\r\n1 3 60 1\r\n2 3 50 1\r\n0 0 0 0\r\n0 0 0</pre>', '<pre class="sio">3\r\nNo Solution</pre>', '', 'South Central China 2007 hosted by NUDT', '27.16%', '79.79%', '2016-06-16 16:31:49', 8, '最大流', -0.957678314867318, -0.897153964129523),
(286, 'http://poj.org/problem?id=3230', '3230', 'Poj', ' 1000MS', ' 65536K', 'Travel', '<div class="ptx" lang="en-US"><p>One traveler travels among cities. He has to pay for this while he can get some incomes.</p><p>Now there are n cities, and the traveler has m days for traveling. Everyday he may go to another city or stay there and pay some money. When he come to a city ,he can get some money. Even when he stays in the city, he can also get the next day''s income. All the incomes may change everyday. The traveler always starts from city 1.</p><p>Now is your turn to find the best way for traveling to maximize the total income. </p></div>', '<div class="ptx" lang="en-US"><p>There are multiple cases.</p><p>The first line of one case is two positive integers, n and m .n is the number of cities, and m is the number of traveling days. There follows n lines, one line n integers. The j integer in the i line is the expense of traveling from city i to city j. If i equals to j it means the expense of staying in the city.</p><p>After an empty line there are m lines, one line has n integers. The j integer in the i line means the income from city j in the i day.</p><p>The input is finished with two zeros.<br>n,m&lt;100.</br></p></div>', '<div class="ptx" lang="en-US">You must print one line for each case. It is the max income.</div>', '<pre class="sio">3 3\r\n3 1 2\r\n2 3 1\r\n1 3 2\r\n\r\n2 4 3\r\n4 3 2\r\n3 4 2\r\n\r\n0 0</pre>', '<pre class="sio">8</pre>', '<div class="ptx" lang="en-US">In the Sample, the traveler can first go to city 2, then city 1, and finish his travel in city 1. The total income is:<br>-1+4-2+4-1+4=8;</br></div>', 'South Central China 2007 hosted by NUDT', '41.64%', '93.18%', '2016-06-16 16:31:51', 4, '动规', -0.880958429422322, 0.305438571603125);

-- --------------------------------------------------------

--
-- 表的结构 `mixojapp_problemdegree`
--

CREATE TABLE IF NOT EXISTS `mixojapp_problemdegree` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ojname` varchar(30) NOT NULL,
  `hot_average_sub` double NOT NULL,
  `hot_average_sqrt` double NOT NULL,
  `dif_average_ac` double NOT NULL,
  `difaverage_sqrt` double NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=11 ;

--
-- 转存表中的数据 `mixojapp_problemdegree`
--

INSERT INTO `mixojapp_problemdegree` (`id`, `ojname`, `hot_average_sub`, `hot_average_sqrt`, `dif_average_ac`, `difaverage_sqrt`) VALUES
(1, 'Poj', 11362.152, 36978.6787811873, 37.96232, 12.0406534796746),
(2, 'Zoj', 9963.2, 28945.7606658903, 29.789, 9.43148763451451),
(3, 'UVALive', 98.3888888888889, 181.975673505003, 25.6116666666667, 14.9587853227905),
(4, 'Sgu', 0, 0, 0, 0),
(5, 'Ural', 3475.72727272727, 3342.00689052979, 22.4190909090909, 13.1824983523578),
(6, 'Hust', 18.9166666666667, 36.5149005607706, 29.7833333333333, 32.4419782928778),
(7, 'Hysbz', 1897.58333333333, 3718.309254616, 49.51, 13.6858893268456),
(8, 'Hdu', 17101.125, 48307.9729534461, 38.2615277777778, 13.8379428725397),
(9, 'Codeforces', 0, 0, 0, 0),
(10, 'Uva', 1186.38636363636, 1760.93826031191, 39.6518181818182, 11.6175269768506);

-- --------------------------------------------------------

--
-- 表的结构 `mixojapp_problemstatus`
--

CREATE TABLE IF NOT EXISTS `mixojapp_problemstatus` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `total_sub` varchar(8) DEFAULT NULL,
  `user_sub` varchar(8) DEFAULT NULL,
  `user_ac` varchar(8) DEFAULT NULL,
  `ac` varchar(8) DEFAULT NULL,
  `pe` varchar(8) DEFAULT NULL,
  `tle` varchar(8) DEFAULT NULL,
  `mle` varchar(8) DEFAULT NULL,
  `wa` varchar(8) DEFAULT NULL,
  `re` varchar(8) DEFAULT NULL,
  `ole` varchar(8) DEFAULT NULL,
  `ce` varchar(8) DEFAULT NULL,
  `se` varchar(8) DEFAULT NULL,
  `waiting` varchar(8) DEFAULT NULL,
  `fpe` varchar(8) DEFAULT NULL,
  `sf` varchar(8) DEFAULT NULL,
  `nzec` varchar(8) DEFAULT NULL,
  `problem_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `problem_id` (`problem_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=281 ;

--
-- 转存表中的数据 `mixojapp_problemstatus`
--

INSERT INTO `mixojapp_problemstatus` (`id`, `total_sub`, `user_sub`, `user_ac`, `ac`, `pe`, `tle`, `mle`, `wa`, `re`, `ole`, `ce`, `se`, `waiting`, `fpe`, `sf`, `nzec`, `problem_id`) VALUES
(1, '2210', '532', '289', '449', '12', '266', '57', '704', '411', '25', '285', '1', NULL, NULL, NULL, NULL, 1),
(2, '9990', '2385', '1968', '3037', '663', '397', '121', '4459', '413', '143', '756', '1', NULL, NULL, NULL, NULL, 2),
(3, '16015', '5747', '5287', '6409', '3427', '41', '30', '4260', '422', '152', '1266', '2', '6', NULL, NULL, NULL, 3),
(4, '1239', '457', '378', '494', '42', '61', '25', '319', '128', '41', '129', NULL, NULL, NULL, NULL, NULL, 4),
(5, '968', '339', '267', '378', '9', '76', '4', '368', '51', '9', '73', NULL, NULL, NULL, NULL, NULL, 5),
(6, '1558', '833', '743', '836', '110', '8', '8', '306', '96', '24', '170', NULL, NULL, NULL, NULL, NULL, 6),
(7, '4987', '2171', '2027', '2642', '6', '92', '14', '1528', '114', '47', '541', '3', NULL, NULL, NULL, NULL, 7),
(8, '5432', '2497', '2339', '2719', '20', '116', '15', '953', '1265', '25', '315', '2', '2', NULL, NULL, NULL, 8),
(9, '284', '182', '138', '158', '1', '3', '4', '38', '35', '8', '37', NULL, NULL, NULL, NULL, NULL, 9),
(10, '269', '137', '89', '97', '5', '9', '57', '17', '24', '60', NULL, NULL, NULL, NULL, NULL, NULL, 10),
(11, '399', '227', '179', '207', '2', '6', '1', '103', '18', '6', '55', '1', NULL, NULL, NULL, NULL, 11),
(12, '185515', NULL, NULL, '74138', '895', '8820', '441', '49712', NULL, NULL, '40473', NULL, NULL, '120', '1537', '7157', 12),
(13, '45055', NULL, NULL, '14525', '89', '1419', '59', '14932', NULL, NULL, '11491', NULL, NULL, '83', '1367', '451', 13),
(14, '33426', NULL, NULL, '8400', '17', '2086', '70', '15787', NULL, NULL, '5127', NULL, NULL, '234', '992', '291', 14),
(15, '15588', NULL, NULL, '6271', '1905', '537', '56', '3514', NULL, NULL, '2412', NULL, NULL, '4', '557', '114', 15),
(16, '17826', NULL, NULL, '7155', '5', '1612', '391', '4236', NULL, NULL, '2123', NULL, NULL, '105', '860', '91', 16),
(17, '14023', NULL, NULL, '6170', '50', '290', '6', '4279', NULL, NULL, '2468', NULL, NULL, '19', '423', '70', 17),
(18, '8451', NULL, NULL, '3623', '0', '654', '20', '2376', NULL, NULL, '1574', NULL, NULL, '4', '24', '75', 18),
(19, '20819', NULL, NULL, '4516', '902', '7023', '102', '4746', NULL, NULL, '2598', NULL, NULL, '30', '616', '65', 19),
(20, '9172', NULL, NULL, '2071', '433', '313', '27', '4128', NULL, NULL, '900', NULL, NULL, '85', '934', '34', 20),
(21, '10859', NULL, NULL, '2526', '0', '179', '5', '6461', NULL, NULL, '1352', NULL, NULL, '12', '200', '38', 21),
(22, '4584', NULL, NULL, '1026', '196', '177', '66', '1515', NULL, NULL, '566', NULL, NULL, '0', '847', '60', 22),
(23, '3357', NULL, NULL, '716', '188', '249', '4', '1470', NULL, NULL, '428', NULL, NULL, '1', '252', '11', 23),
(24, '6028', NULL, NULL, '1726', '282', '477', '228', '2201', NULL, NULL, '812', NULL, NULL, '28', '197', '31', 24),
(25, '2722', NULL, NULL, '593', '129', '115', '9', '945', NULL, NULL, '364', NULL, NULL, '20', '389', '26', 25),
(26, '5170', NULL, NULL, '1381', '186', '742', '102', '1520', NULL, NULL, '528', NULL, NULL, '1', '632', '10', 26),
(27, '11712', NULL, NULL, '4655', '2392', '143', '24', '2245', NULL, NULL, '1423', NULL, NULL, '0', '591', '41', 27),
(28, '569', NULL, NULL, '179', '8', '170', '4', '98', NULL, NULL, '82', NULL, NULL, '2', '18', '0', 28),
(29, '365', NULL, NULL, '84', '0', '60', '1', '154', NULL, NULL, '38', NULL, NULL, '1', '22', '0', 29),
(30, '1742', NULL, NULL, '696', '0', '57', '8', '739', NULL, NULL, '173', NULL, NULL, '1', '49', '9', 30),
(31, '1545', NULL, NULL, '134', '2', '520', '88', '375', NULL, NULL, '125', NULL, NULL, '0', '258', '6', 31),
(32, '38', '10', '3', '5', NULL, '16', NULL, '13', NULL, NULL, '2', '2', NULL, NULL, NULL, NULL, 32),
(33, '57', '31', '24', '24', NULL, '1', NULL, '31', '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 33),
(34, '102', '9', '8', '10', NULL, NULL, NULL, '86', NULL, NULL, '4', '2', NULL, NULL, NULL, NULL, 34),
(35, '26', '6', '2', '2', NULL, NULL, '1', '19', NULL, NULL, '4', NULL, NULL, NULL, NULL, NULL, 35),
(36, '76', '47', '42', '43', '1', '1', NULL, '22', '2', NULL, '6', '1', NULL, NULL, NULL, NULL, 36),
(37, '722', '232', '196', '255', '55', '16', NULL, '236', '14', NULL, '134', '12', NULL, NULL, NULL, NULL, 37),
(38, '292', '80', '59', '75', '3', '42', '6', '76', '60', NULL, '30', NULL, NULL, NULL, NULL, NULL, 38),
(39, '50', '23', '19', '21', NULL, '2', NULL, '12', '6', NULL, '8', '1', NULL, NULL, NULL, NULL, 39),
(40, '37', '11', '1', '2', NULL, NULL, NULL, '6', '17', NULL, '12', NULL, NULL, NULL, NULL, NULL, 40),
(41, '7074', '4198', '4086', '4666', '106', '40', '1590', '59', '96', '515', '1', '1', NULL, NULL, NULL, NULL, 41),
(42, '9460', '2233', '1963', '3029', '4', '976', '12', '3579', '1101', '31', '726', '2', NULL, NULL, NULL, NULL, 42),
(43, '1542', '360', '266', '376', '229', '13', '693', '78', '10', '141', '2', NULL, NULL, NULL, NULL, NULL, 43),
(44, '3280', '873', '762', '1141', '3', '509', '1082', '346', '12', '187', NULL, NULL, NULL, NULL, NULL, NULL, 44),
(45, '2916', '452', '370', '645', '322', '6', '1545', '270', '2', '120', '5', '1', NULL, NULL, NULL, NULL, 45),
(46, '1426', '197', '129', '307', '180', '2', '856', '38', '4', '39', NULL, NULL, NULL, NULL, NULL, NULL, 46),
(47, '1048', NULL, '118', '265', '1', '76', '1', '621', '39', '0', '45', '0', NULL, NULL, NULL, NULL, 47),
(48, '1726', NULL, '237', '707', '0', '327', '15', '498', '60', '0', '119', '0', NULL, NULL, NULL, NULL, 48),
(49, '95', NULL, '20', '25', '0', '7', '0', '44', '7', '0', '12', '0', NULL, NULL, NULL, NULL, 49),
(50, '31', NULL, '0', '0', '0', '13', '0', '4', '9', '0', '5', '0', NULL, NULL, NULL, NULL, 50),
(51, '897', NULL, '126', '278', '142', '168', '55', '170', '34', '0', '50', '0', NULL, NULL, NULL, NULL, 51),
(52, '319', NULL, '90', '172', '1', '29', '1', '84', '9', '0', '23', '0', NULL, NULL, NULL, NULL, 52),
(53, '2690', NULL, '260', '622', '0', '1105', '9', '838', '33', '0', '83', '0', NULL, NULL, NULL, NULL, 53),
(54, '377', NULL, '39', '60', '0', '54', '2', '237', '14', '0', '10', '0', NULL, NULL, NULL, NULL, 54),
(55, '833', NULL, '204', '424', '1', '136', '29', '134', '55', '0', '55', '0', NULL, NULL, NULL, NULL, 55),
(56, '587', NULL, '64', '112', '0', '203', '72', '79', '89', '0', '32', '0', NULL, NULL, NULL, NULL, 56),
(57, '632', NULL, '89', '156', '0', '75', '11', '262', '96', '6', '26', '0', NULL, NULL, NULL, NULL, 57),
(58, '5164', NULL, '900', '1806', '7', '273', '67', '2298', '520', '9', '184', '0', NULL, NULL, NULL, NULL, 58),
(59, '1992', NULL, '476', '759', '0', '79', '7', '903', '163', '5', '77', '0', NULL, NULL, NULL, NULL, 59),
(60, '405', NULL, '127', '191', '0', '101', '0', '84', '10', '0', '19', '0', NULL, NULL, NULL, NULL, 60),
(61, '354', NULL, '60', '127', '0', '18', '1', '139', '16', '3', '50', '0', NULL, NULL, NULL, NULL, 61),
(62, '206', NULL, '41', '60', '0', '19', '14', '48', '35', '1', '29', '0', NULL, NULL, NULL, NULL, 62),
(63, '852', NULL, '196', '315', '0', '9', '0', '476', '4', '5', '43', '0', NULL, NULL, NULL, NULL, 63),
(64, '341', NULL, '101', '162', '0', '7', '0', '143', '7', '1', '21', '0', NULL, NULL, NULL, NULL, 64),
(65, '252', NULL, '62', '102', '0', '15', '0', '81', '22', '0', '32', '0', NULL, NULL, NULL, NULL, 65),
(66, '137', NULL, '24', '33', '0', '16', '20', '40', '3', '3', '22', '0', NULL, NULL, NULL, NULL, 66),
(67, '14', NULL, '3', '3', '0', '1', '0', '4', '3', '0', '3', '0', NULL, NULL, NULL, NULL, 67),
(68, '4427', '1534', '1432', '2438', '81', '91', '103', '464', '669', '102', '478', '1', NULL, NULL, NULL, NULL, 68),
(69, '444', '295', '281', '326', '1', '4', '48', '11', '6', '48', NULL, NULL, NULL, NULL, NULL, NULL, 69),
(70, '38433', '14241', '13783', '22305', '70', '760', '16', '7173', '2921', '282', '4886', '7', '13', NULL, NULL, NULL, 70),
(71, '3531', '685', '453', '1001', '4', '728', '181', '1235', '187', NULL, '176', '19', NULL, NULL, NULL, NULL, 71),
(72, '979', '359', '303', '384', '12', '47', NULL, '318', '105', NULL, '77', '35', NULL, NULL, NULL, NULL, 72),
(73, '1356', '335', '290', '517', '76', '17', NULL, '627', '17', NULL, '81', '20', NULL, NULL, NULL, NULL, 73),
(74, '5099', '1032', '922', '1512', '4', '62', NULL, '2909', '362', NULL, '211', '36', NULL, NULL, NULL, NULL, 74),
(75, '1153', '324', '230', '316', '51', '34', '4', '651', '41', NULL, '43', '13', NULL, NULL, NULL, NULL, 75),
(76, '3907', '805', '675', '1183', '16', '318', '40', '1815', '349', NULL, '153', '31', NULL, NULL, NULL, NULL, 76),
(77, '376', '109', '82', '104', NULL, '40', NULL, '158', '64', NULL, '8', '2', NULL, NULL, NULL, NULL, 77),
(78, '3760', '1406', '1322', '1776', '3', '519', NULL, '1183', '73', NULL, '174', '31', NULL, NULL, NULL, NULL, 78),
(79, '3073', '951', '768', '1081', '9', '642', '84', '725', '372', NULL, '133', '26', NULL, NULL, NULL, NULL, 79),
(80, '822', '213', '156', '190', '28', '49', '1', '378', '74', NULL, '74', '28', NULL, NULL, NULL, NULL, 80),
(81, '761', '231', '199', '394', '8', '12', '2', '252', '19', NULL, '65', '9', NULL, NULL, NULL, NULL, 81),
(82, '1783', '563', '450', '727', '2', '191', NULL, '692', '71', NULL, '86', '14', NULL, NULL, NULL, NULL, 82),
(83, '677', '205', '161', '193', NULL, '51', NULL, '357', '36', NULL, '31', '9', NULL, NULL, NULL, NULL, 83),
(84, '758', '127', '107', '310', NULL, '148', '2', '208', '34', NULL, '50', '6', NULL, NULL, NULL, NULL, 84),
(85, '5019', '2120', '1917', '2358', '11', '23', NULL, '2159', '81', NULL, '349', '38', NULL, NULL, NULL, NULL, 85),
(86, '2988', '567', '411', '810', '4', '907', '78', '786', '202', NULL, '178', '23', NULL, NULL, NULL, NULL, 86),
(87, '803', '217', '187', '424', '2', '34', '1', '281', '18', NULL, '38', '5', NULL, NULL, NULL, NULL, 87),
(88, '1700', '835', '771', '977', '10', '28', '4', '573', '26', NULL, '72', '10', NULL, NULL, NULL, NULL, 88),
(89, '925', '483', '442', '518', '6', '4', '1', '256', '33', NULL, '103', '3', NULL, NULL, NULL, NULL, 89),
(90, '1489', '651', '574', '818', '2', '47', '1', '487', '42', NULL, '77', '15', NULL, NULL, NULL, NULL, 90),
(91, '9853', '4894', '4549', '5912', '10', '319', '105', '1598', '999', NULL, '853', '50', NULL, NULL, NULL, NULL, 91),
(92, '11433', '1536', '1302', '3609', NULL, '2317', '715', '2753', '1488', NULL, '482', NULL, NULL, NULL, NULL, NULL, 92),
(93, '257', '128', '122', '163', NULL, '32', '', '32', '15', NULL, '15', NULL, NULL, NULL, NULL, NULL, 93),
(94, '967', '346', '334', '536', NULL, '75', '1', '261', '53', NULL, '29', NULL, NULL, NULL, NULL, NULL, 94),
(95, '9603', '1978', '1797', '3379', NULL, '1396', '38', '3028', '1327', NULL, '390', NULL, NULL, NULL, NULL, NULL, 95),
(96, '213', '81', '75', '93', NULL, '16', '1', '78', '14', NULL, '10', NULL, NULL, NULL, NULL, NULL, 96),
(97, '298', '169', '160', '202', NULL, '3', '', '71', '4', NULL, '15', NULL, NULL, NULL, NULL, NULL, 97),
(98, '7179', NULL, NULL, '1087', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 98),
(99, '5006', NULL, NULL, '1637', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 99),
(100, '12312', NULL, NULL, '5336', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 100),
(101, '6100', NULL, NULL, '424', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 101),
(102, '4409', NULL, NULL, '342', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 102),
(103, '2291', NULL, NULL, '174', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 103),
(104, '164', '69', '25', '34', '8', '1', '43', '26', '50', '2', NULL, NULL, NULL, NULL, NULL, NULL, 104),
(105, '1325', '485', '405', '500', '2', '26', '16', '595', '49', '15', '121', '1', NULL, NULL, NULL, NULL, 105),
(106, '7975', '2772', '2675', '4894', '3', '149', '15', '1877', '282', '17', '735', '3', NULL, NULL, NULL, NULL, 106),
(107, '32746', '10115', '9387', '12810', '22', '485', '69', '13937', '1524', '388', '3502', '3', '6', NULL, NULL, NULL, 107),
(108, '26', '6', '4', '5', '0', '9', '0', '6', '2', '0', '4', NULL, NULL, NULL, NULL, NULL, 108),
(109, '4', '3', '0', '0', '0', '0', '0', '2', '0', '0', '2', NULL, NULL, NULL, NULL, NULL, 109),
(110, '8', '6', '1', '1', '0', '5', '0', '2', '0', '0', '0', NULL, NULL, NULL, NULL, NULL, 110),
(111, '3', '1', '1', '3', '0', '0', '0', '0', '0', '0', '0', NULL, NULL, NULL, NULL, NULL, 111),
(112, '51', '9', '7', '13', '0', '5', '0', '30', '1', '0', '2', NULL, NULL, NULL, NULL, NULL, 112),
(113, '135', '16', '12', '29', '0', '9', '0', '65', '4', '0', '28', NULL, NULL, NULL, NULL, NULL, 113),
(114, '26', '9', '6', '8', NULL, NULL, NULL, '18', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 114),
(115, '48', '32', '20', '24', NULL, NULL, NULL, '17', NULL, NULL, '6', '1', NULL, NULL, NULL, NULL, 115),
(116, '933', '240', '179', '309', '68', '45', '332', '104', '11', '64', NULL, NULL, NULL, NULL, NULL, NULL, 116),
(117, '493', '219', '189', '247', '1', '46', '1', '147', '8', '2', '41', NULL, NULL, NULL, NULL, NULL, 117),
(118, '4390', '1355', '1231', '1470', '37', '236', '2016', '214', '24', '393', NULL, NULL, NULL, NULL, NULL, NULL, 118),
(119, '1794', '620', '534', '691', '210', '23', '567', '162', '5', '136', NULL, NULL, NULL, NULL, NULL, NULL, 119),
(120, '1380', '279', '216', '370', '4', '113', '1', '696', '58', '13', '121', '1', '3', NULL, NULL, NULL, 120),
(121, '493', '168', '144', '216', '59', '148', '22', '1', '46', '1', NULL, NULL, NULL, NULL, NULL, NULL, 121),
(122, '157261', '40557', '27817', '38300', '1001', '2813', '442', '69258', '9566', '2910', '32922', '12', '36', NULL, NULL, NULL, 122),
(123, '274873', '36734', '27022', '49048', '491', '52308', '2708', '100574', '30560', '901', '38190', '29', '63', NULL, NULL, NULL, 123),
(124, '116944', '48698', '46467', '57065', '4379', '5151', '101', '28282', '2699', '1866', '17367', '5', '29', NULL, NULL, NULL, 124),
(125, '174339', '55566', '52902', '65363', '1351', '784', '42', '41557', '3488', '782', '60921', '6', '45', NULL, NULL, NULL, 125),
(126, '97783', '37528', '35973', '42553', '4147', '496', '63', '32301', '1234', '720', '16253', '5', '11', NULL, NULL, NULL, 126),
(127, '127727', '31728', '28477', '40464', '2275', '6074', '412', '60190', '6404', '1035', '10833', '6', '33', NULL, NULL, NULL, 127),
(128, '10786', NULL, NULL, '1322', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 129),
(129, '7089', NULL, NULL, '2200', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 130),
(130, '4208', NULL, NULL, '1755', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 131),
(131, '8133', NULL, NULL, '2491', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 132),
(132, '8953', NULL, NULL, '1567', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 133),
(133, '1389', '230', '156', '401', '30', '400', '9', '348', '112', NULL, '69', '20', NULL, NULL, NULL, NULL, 134),
(134, '2520', '542', '484', '912', '2', '56', '1288', '81', '40', '139', '2', NULL, NULL, NULL, NULL, NULL, 135),
(135, '12133', '5874', '5657', '6506', '58', '238', '4', '2907', '200', '69', '2144', '2', '5', NULL, NULL, NULL, 136),
(136, '5645', '959', '652', '1253', '2', '537', '14', '2588', '655', '19', '577', NULL, NULL, NULL, NULL, NULL, 137),
(137, '1150', '202', '165', '280', '24', '43', '722', '18', '1', '59', '1', '2', NULL, NULL, NULL, NULL, 138),
(138, '1391', '580', '541', '693', '17', '6', '519', '9', '54', '56', '37', NULL, NULL, NULL, NULL, NULL, 139),
(139, '12735', '1875', '1631', '3280', '2', '1461', '7', '6035', '1154', '70', '721', '5', NULL, NULL, NULL, NULL, 140),
(140, '1158', '404', '376', '562', '17', '67', '430', '11', '4', '67', NULL, NULL, NULL, NULL, NULL, NULL, 141),
(141, '135', '29', '14', '23', NULL, '1', NULL, '94', '1', NULL, '16', NULL, NULL, NULL, NULL, NULL, 142),
(142, '93', '37', '20', '22', '2', NULL, '1', '54', '1', NULL, '13', NULL, NULL, NULL, NULL, NULL, 143),
(143, '222', '57', '41', '46', NULL, NULL, '2', '148', '7', NULL, '15', '4', NULL, NULL, NULL, NULL, 144),
(144, '904', '178', '140', '207', '4', '17', '12', '444', '65', NULL, '148', '7', NULL, NULL, NULL, NULL, 145),
(145, '261', '47', '18', '30', '3', '19', NULL, '171', '26', NULL, '10', '2', NULL, NULL, NULL, NULL, 146),
(146, '151', '34', '15', '15', '7', '2', '1', '83', '7', NULL, '36', NULL, NULL, NULL, NULL, NULL, 147),
(147, '20434', NULL, '5423', '6631', '114', '120', '23', '11124', '103', '515', '1808', '0', NULL, NULL, NULL, NULL, 148),
(148, '22243', NULL, '7841', '9617', '90', '67', '2', '9970', '179', '605', '1717', '0', NULL, NULL, NULL, NULL, 149),
(149, '46179', '17601', '16173', '24393', '69', '3633', '695', '9287', '1744', '148', '6194', '7', '9', NULL, NULL, NULL, 150),
(150, '7856', '4285', '4045', '4493', '135', '45', '23', '1516', '504', '42', '1095', '3', NULL, NULL, NULL, NULL, 151),
(151, '790', '335', '248', '319', '2', '1', '303', '39', '16', '110', NULL, NULL, NULL, NULL, NULL, NULL, 152),
(152, '3080', '1289', '1140', '1410', '64', '5', '1059', '112', '177', '252', '1', NULL, NULL, NULL, NULL, NULL, 153),
(153, '11609', '2228', '1883', '3475', '1', '2185', '248', '3676', '693', '40', '1286', '2', '3', NULL, NULL, NULL, 154),
(154, '981', '306', '214', '289', '90', '17', '9', '394', '62', '7', '113', NULL, NULL, NULL, NULL, NULL, 155),
(155, '12786', '4833', '4582', '6135', '94', '206', '169', '3057', '1058', '1069', '996', '2', NULL, NULL, NULL, NULL, 156),
(156, '2155', '986', '882', '1061', '127', '17', '34', '560', '97', '19', '236', '4', NULL, NULL, NULL, NULL, 157),
(157, '1560', '431', '308', '472', '13', '703', '144', '66', '162', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 158),
(158, '39396', '958', '791', '887', '15', '20', '6', '416', '138', '9', '37903', '2', NULL, NULL, NULL, NULL, 159),
(159, '4420', '1672', '1540', '2006', '24', '289', '61', '1425', '282', '21', '311', '1', NULL, NULL, NULL, NULL, 160),
(160, '302', '71', '62', '111', NULL, '18', NULL, '151', '8', NULL, '14', NULL, NULL, NULL, NULL, NULL, 166),
(161, '8687', '4234', '3981', '5198', '18', '79', '65', '1817', '274', '116', '1118', '2', NULL, NULL, NULL, NULL, 167),
(162, '7286', '1642', '1300', '1976', '376', '109', '3766', '475', '55', '526', '3', NULL, NULL, NULL, NULL, NULL, 168),
(163, '34300', '6392', '5820', '11696', '5', '609', '51', '15173', '1324', '175', '5256', '2', '9', NULL, NULL, NULL, 169),
(164, '719', '375', '302', '374', '13', '14', '181', '28', '6', '103', NULL, NULL, NULL, NULL, NULL, NULL, 170),
(165, '243', '107', '60', '89', '9', '5', '96', '17', '2', '25', NULL, NULL, NULL, NULL, NULL, NULL, 171),
(166, '840', '258', '187', '289', '2', '43', '6', '417', '6', '4', '73', NULL, NULL, NULL, NULL, NULL, 172),
(167, '3878', '1002', '739', '981', '32', '290', '15', '1878', '125', '57', '495', '4', '1', NULL, NULL, NULL, 173),
(168, '24645', '5567', '4833', '7724', '55', '3489', '157', '8589', '2376', '148', '2100', '3', '4', NULL, NULL, NULL, 174),
(169, '4655', '1379', '1290', '2537', '488', '93', '1117', '144', '2', '274', NULL, NULL, NULL, NULL, NULL, NULL, 175),
(170, '6752', '964', '750', '2000', '2327', '86', '1477', '286', '23', '550', '2', '1', NULL, NULL, NULL, NULL, 176),
(171, '20404', '6288', '6010', '9416', '6', '429', '29', '9053', '248', '20', '1199', '2', '2', NULL, NULL, NULL, 177),
(172, '7340', '1181', '1037', '3061', '509', '180', '2241', '610', '104', '629', '6', NULL, NULL, NULL, NULL, NULL, 178),
(173, '59446', '11587', '10533', '20673', '12', '4573', '9358', '13699', '5638', '289', '5185', '7', '12', NULL, NULL, NULL, 179),
(174, '18360', '5841', '5486', '9869', '5', '1098', '278', '4298', '879', '102', '1823', '1', '7', NULL, NULL, NULL, 180),
(175, '7761', '2140', '1898', '3754', '6', '293', '83', '2470', '469', '13', '672', '1', NULL, NULL, NULL, NULL, 181),
(176, '393', '157', '104', '152', '95', '4', '74', '11', '57', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 182),
(177, '44061', '19096', '18433', '26588', '58', '2534', '156', '5886', '2781', '324', '5716', '2', '15', NULL, NULL, NULL, 183),
(178, '7249', '3425', '3218', '4048', '52', '33', '131', '1812', '368', '19', '784', '2', NULL, NULL, NULL, NULL, 184),
(179, '1984', '682', '551', '835', '11', '287', '21', '455', '88', '12', '273', '2', NULL, NULL, NULL, NULL, 185),
(180, '15974', '5231', '4616', '6508', '102', '1978', '311', '4055', '958', '217', '1836', '4', '5', NULL, NULL, NULL, 186),
(181, '6106', '1045', '806', '1672', '1853', '44', '1837', '233', '10', '456', '1', NULL, NULL, NULL, NULL, NULL, 187),
(182, '797', '212', '160', '279', '3', '155', '4', '228', '46', '3', '79', NULL, NULL, NULL, NULL, NULL, 188),
(183, '1135', '577', '516', '609', '4', '12', '4', '334', '45', '2', '125', NULL, NULL, NULL, NULL, NULL, 189),
(184, '4844', '1490', '1344', '2023', '1', '284', '66', '1628', '500', '13', '323', '6', NULL, NULL, NULL, NULL, 190),
(185, '12250', '2290', '1685', '3359', '1', '2064', '78', '5047', '777', '32', '888', '1', '3', NULL, NULL, NULL, 191),
(186, '1202', '324', '215', '264', '24', '4', '794', '35', '5', '75', '1', NULL, NULL, NULL, NULL, NULL, 192),
(187, '956', '314', '260', '341', '1', '47', '42', '338', '86', '11', '89', '1', NULL, NULL, NULL, NULL, 193),
(188, '2472', '662', '484', '745', '43', '201', '49', '705', '371', '58', '300', NULL, NULL, NULL, NULL, NULL, 194),
(189, '1734', '588', '492', '660', '3', '29', '21', '700', '114', '13', '194', NULL, NULL, NULL, NULL, NULL, 195),
(190, '388167', '154853', '145518', '217189', '1229', '3780', '1241', '39990', '8487', '2378', '113611', '140', '122', NULL, NULL, NULL, 196),
(191, '95156', '31464', '28926', '38282', '1046', '1293', '403', '26673', '10531', '2967', '13941', '2', '18', NULL, NULL, NULL, 197),
(192, '74145', '20031', '18139', '22839', '1074', '599', '207', '32825', '7933', '506', '8137', '2', '22', NULL, NULL, NULL, 198),
(193, '20375', '4699', '3369', '4789', '18', '2854', '790', '5587', '2686', '129', '3496', '26', NULL, NULL, NULL, NULL, 199),
(194, '17859', '4182', '3419', '5130', '204', '2052', '320', '5063', '1753', '253', '3079', '1', '4', NULL, NULL, NULL, 200),
(195, '136014', '21197', '14802', '31985', '217', '44370', '712', '36673', '6836', '1060', '14101', '8', '51', NULL, NULL, NULL, 201),
(196, '52214', '16740', '14840', '19884', '568', '17449', '544', '5129', '2521', '369', '5735', '1', '14', NULL, NULL, NULL, 202),
(197, '44184', '13169', '11376', '14002', '388', '593', '56', '21113', '2128', '451', '5439', '3', '11', NULL, NULL, NULL, 203),
(198, '67229', '12564', '10288', '17477', '2784', '11416', '693', '22459', '6700', '890', '4791', '1', '18', NULL, NULL, NULL, 204),
(199, '27484', '5500', '4332', '7265', '1582', '477', '10341', '3966', '241', '3605', '2', '5', NULL, NULL, NULL, NULL, 205),
(200, '20012', '6040', '5453', '6707', '261', '517', '93', '8407', '1607', '329', '2090', '1', NULL, NULL, NULL, NULL, 206),
(201, '50813', '14402', '12881', '17184', '136', '746', '108', '25025', '2110', '807', '4675', '1', '21', NULL, NULL, NULL, 207),
(202, '26569', '7523', '6481', '9476', '164', '1890', '256', '9475', '1861', '206', '3235', '2', '4', NULL, NULL, NULL, 208),
(203, '37702', '10450', '7991', '10887', '95', '4843', '558', '11551', '3629', '341', '5780', '7', '11', NULL, NULL, NULL, 209),
(204, '16448', '3808', '3063', '5361', '8', '3125', '74', '5783', '633', '111', '1347', '3', '3', NULL, NULL, NULL, 210),
(205, '3610', '1474', '1256', '1619', '10', '42', '54', '1122', '118', '8', '634', '3', NULL, NULL, NULL, NULL, 211),
(206, '2314', '732', '577', '774', '2', '48', '27', '844', '278', '8', '333', NULL, NULL, NULL, NULL, NULL, 212),
(207, '10517', '3086', '2726', '3575', '54', '304', '34', '4692', '475', '65', '1304', '2', '12', NULL, NULL, NULL, 213),
(208, '2602', '847', '663', '916', '3', '125', '68', '1094', '102', '9', '284', '1', NULL, NULL, NULL, NULL, 214),
(209, '1880', '508', '338', '451', '7', '68', '22', '826', '173', '9', '324', NULL, NULL, NULL, NULL, NULL, 215),
(210, '21097', '4675', '3864', '5780', '1688', '4578', '366', '4582', '2468', '198', '1422', '2', '13', NULL, NULL, NULL, 216),
(211, '5338', '1721', '1462', '2014', '185', '469', '56', '1694', '180', '75', '662', '1', '2', NULL, NULL, NULL, 217),
(212, '32791', '12045', '11071', '14632', '229', '561', '132', '10267', '2697', '265', '3999', '9', NULL, NULL, NULL, NULL, 218),
(213, '18264', '4861', '3793', '5128', '7', '119', '2', '10464', '394', '114', '2028', '8', NULL, NULL, NULL, NULL, 219),
(214, '2245', '604', '436', '560', '1', '69', '25', '1175', '55', '19', '341', NULL, NULL, NULL, NULL, NULL, 220),
(215, '2597', '1216', '1086', '1229', '96', '140', '3', '799', '117', '14', '199', NULL, NULL, NULL, NULL, NULL, 221),
(216, '355', '194', '140', '158', '11', '5', '77', '12', '13', '79', NULL, NULL, NULL, NULL, NULL, NULL, 222),
(217, '2830', '764', '625', '868', '163', '68', '29', '1034', '357', '86', '225', NULL, NULL, NULL, NULL, NULL, 223),
(218, '400', '150', '101', '140', '5', '26', '3', '161', '11', '54', NULL, NULL, NULL, NULL, NULL, NULL, 224),
(219, '428', '149', '101', '126', '48', '19', '177', '11', '5', '42', NULL, NULL, NULL, NULL, NULL, NULL, 225),
(220, '33450', '12223', '11854', '18428', '213', '163', '81', '10305', '591', '169', '3488', '5', '7', NULL, NULL, NULL, 226),
(221, '410265', NULL, '76418', '103169', '57015', '15949', '96', '177514', '3271', '3056', '50172', '39', NULL, NULL, NULL, NULL, 227),
(222, '310540', NULL, '40336', '60058', '49805', '4068', '171', '147668', '8850', '3864', '36008', '1', NULL, NULL, NULL, NULL, 228),
(223, '211162', NULL, '29471', '49563', '13761', '19446', '1882', '97430', '11155', '439', '17515', '0', NULL, NULL, NULL, NULL, 229),
(224, '104347', NULL, '28061', '40166', '1029', '6963', '260', '35317', '7234', '393', '12968', '0', NULL, NULL, NULL, NULL, 230),
(225, '149748', NULL, '23538', '36472', '532', '19896', '8717', '40644', '31879', '228', '11390', '0', NULL, NULL, NULL, NULL, 231),
(226, '16943', NULL, '3370', '4173', '76', '3369', '76', '4863', '96', '1564', '2732', '0', NULL, NULL, NULL, NULL, 232),
(227, '45426', NULL, '5073', '11818', '74', '12618', '634', '10125', '4588', '311', '5270', '0', NULL, NULL, NULL, NULL, 233),
(228, '62381', NULL, '25005', '34259', '614', '1211', '12', '19882', '573', '91', '5653', '0', NULL, NULL, NULL, NULL, 234),
(229, '64197', NULL, '13422', '21755', '453', '2439', '139', '29995', '3234', '115', '6060', '0', NULL, NULL, NULL, NULL, 235),
(230, '103798', NULL, '10883', '28154', '92', '24704', '889', '38178', '1779', '295', '9714', '0', NULL, NULL, NULL, NULL, 236),
(231, '16576', NULL, '2262', '4426', '8', '482', '206', '8659', '1469', '7', '1319', '0', NULL, NULL, NULL, NULL, 237),
(232, '41181', NULL, '15408', '18737', '1024', '1253', '5', '16493', '248', '74', '3351', '0', NULL, NULL, NULL, NULL, 238),
(233, '68647', NULL, '15591', '21464', '132', '5217', '63', '35196', '1500', '18', '5050', '0', NULL, NULL, NULL, NULL, 239),
(234, '25257', NULL, '7673', '9966', '7702', '1168', '23', '4205', '478', '86', '1632', '0', NULL, NULL, NULL, NULL, 240),
(235, '12281', NULL, '4445', '6347', '69', '297', '0', '3872', '96', '19', '1581', '0', NULL, NULL, NULL, NULL, 241),
(236, '41306', NULL, '10073', '18291', '5541', '2902', '91', '8201', '291', '868', '5113', '0', NULL, NULL, NULL, NULL, 242),
(237, '36471', NULL, '8919', '11653', '7209', '652', '5', '14766', '255', '9', '1920', '0', NULL, NULL, NULL, NULL, 243),
(238, '34230', NULL, '12201', '16190', '238', '2902', '864', '5160', '847', '75', '7966', '0', NULL, NULL, NULL, NULL, 244),
(239, '45031', NULL, '10970', '16922', '212', '5250', '61', '17530', '1880', '0', '3176', '0', NULL, NULL, NULL, NULL, 245),
(240, '39155', NULL, '13120', '17331', '778', '1057', '6', '15170', '1589', '17', '3213', '0', NULL, NULL, NULL, NULL, 246),
(241, '51547', NULL, '17558', '24387', '194', '2581', '460', '13614', '6682', '41', '3588', '0', NULL, NULL, NULL, NULL, 247),
(242, '30715', NULL, '7163', '11597', '157', '784', '41', '13456', '2044', '373', '2218', '0', NULL, NULL, NULL, NULL, 248),
(243, '7948', NULL, '3352', '4266', '20', '283', '45', '2133', '231', '120', '858', '0', NULL, NULL, NULL, NULL, 249),
(244, '24637', NULL, '4032', '8480', '27', '3782', '518', '8305', '1311', '82', '2145', '0', NULL, NULL, NULL, NULL, 250),
(245, '21957', NULL, '3537', '6255', '1143', '3926', '110', '8559', '793', '44', '1136', '0', NULL, NULL, NULL, NULL, 251),
(246, '16511', NULL, '3133', '5252', '33', '1747', '720', '5437', '1667', '298', '1315', '40', NULL, NULL, NULL, NULL, 252),
(247, '6759', NULL, '3103', '4006', '303', '563', '8', '964', '218', '46', '651', '0', NULL, NULL, NULL, NULL, 253),
(248, '18004', NULL, '8095', '12620', '57', '1834', '9', '1649', '244', '169', '1425', '0', NULL, NULL, NULL, NULL, 254),
(249, '26238', NULL, '6656', '11098', '99', '4933', '1174', '4253', '2895', '21', '1771', '0', NULL, NULL, NULL, NULL, 255),
(250, '7810', NULL, '2175', '3042', '19', '132', '15', '2755', '74', '106', '1667', '0', NULL, NULL, NULL, NULL, 256),
(251, '7868', NULL, '2862', '3727', '363', '1072', '36', '1567', '359', '25', '721', '0', NULL, NULL, NULL, NULL, 257),
(252, '33847', NULL, '9011', '12249', '228', '1879', '238', '15047', '1772', '2', '2426', '0', NULL, NULL, NULL, NULL, 258),
(253, '3048', NULL, '1615', '1933', '35', '44', '1', '719', '29', '37', '252', '0', NULL, NULL, NULL, NULL, 259),
(254, '5183', NULL, '2569', '3181', '74', '285', '4', '1081', '73', '2', '482', '0', NULL, NULL, NULL, NULL, 260),
(255, '9422', NULL, '2991', '4351', '94', '314', '24', '3780', '206', '12', '638', '0', NULL, NULL, NULL, NULL, 261),
(256, '5554', NULL, '1735', '2262', '205', '202', '2', '2332', '69', '18', '469', '0', NULL, NULL, NULL, NULL, 262),
(257, '12547', NULL, '7353', '8600', '1153', '280', '1', '1567', '83', '8', '861', '0', NULL, NULL, NULL, NULL, 263),
(258, '5464', NULL, '3205', '3664', '257', '179', '1', '926', '21', '9', '399', '0', NULL, NULL, NULL, NULL, 264),
(259, '11531', NULL, '4538', '5593', '106', '169', '0', '4687', '95', '29', '853', '0', NULL, NULL, NULL, NULL, 265),
(260, '53811', NULL, '16878', '23115', '11868', '1747', '30', '9308', '2465', '12', '5268', '0', NULL, NULL, NULL, NULL, 266),
(261, '7369', NULL, '2039', '2706', '36', '706', '78', '2766', '328', '6', '743', '0', NULL, NULL, NULL, NULL, 267),
(262, '73862', NULL, '12799', '21441', '343', '5879', '2072', '31877', '3785', '354', '8109', '0', NULL, NULL, NULL, NULL, 268),
(263, '18917', NULL, '1620', '5116', '0', '4736', '1560', '4297', '1317', '126', '1756', '7', NULL, NULL, NULL, NULL, 269),
(264, '6431', NULL, '753', '1483', '129', '1809', '272', '1780', '423', '36', '500', '0', NULL, NULL, NULL, NULL, 270),
(265, '9595', NULL, '3370', '5592', '29', '152', '15', '2583', '128', '7', '1089', '0', NULL, NULL, NULL, NULL, 271),
(266, '17566', NULL, '3210', '4565', '2455', '460', '16', '8423', '426', '18', '1202', '0', NULL, NULL, NULL, NULL, 272),
(267, '22546', NULL, '8098', '10666', '1124', '1089', '2', '5239', '2225', '34', '2139', '1', NULL, NULL, NULL, NULL, 273),
(268, '16475', NULL, '8810', '11237', '130', '307', '0', '3601', '144', '12', '1046', '0', NULL, NULL, NULL, NULL, 274),
(269, '28829', NULL, '5933', '9466', '47', '640', '14', '16110', '538', '6', '2006', '0', NULL, NULL, NULL, NULL, 275),
(270, '903', '162', '126', '247', '10', '265', '9', '190', '95', '11', '76', NULL, NULL, NULL, NULL, NULL, 276),
(271, '1462', '652', '604', '810', '1', '351', '3', '152', '62', '7', '76', NULL, NULL, NULL, NULL, NULL, 277),
(272, '1085', '358', '292', '428', '201', '3', '289', '87', '8', '68', '1', NULL, NULL, NULL, NULL, NULL, 278),
(273, '749', '119', '69', '110', '90', '2', '468', '6', '15', '58', NULL, NULL, NULL, NULL, NULL, NULL, 279),
(274, '9394', '4479', '4266', '4783', '3', '66', '1', '3718', '103', '10', '709', '1', NULL, NULL, NULL, NULL, 280),
(275, '11797', '1460', '1285', '2927', '100', '1473', '12', '4367', '1913', '292', '712', '1', NULL, NULL, NULL, NULL, 281),
(276, '2335', '924', '789', '942', '3', '42', '1', '981', '111', '21', '234', NULL, NULL, NULL, NULL, NULL, 282),
(277, '1591', '379', '302', '432', '48', '1008', '14', '5', '83', '1', NULL, NULL, NULL, NULL, NULL, NULL, 283),
(278, '3176', '758', '694', '1126', '9', '332', '1', '1301', '259', '4', '142', '2', NULL, NULL, NULL, NULL, 284),
(279, '1565', '282', '225', '425', '125', '6', '786', '145', '15', '63', NULL, NULL, NULL, NULL, NULL, NULL, 285),
(280, '4402', '1480', '1379', '1833', '23', '388', '5', '1817', '86', '17', '233', NULL, NULL, NULL, NULL, NULL, 286);

-- --------------------------------------------------------

--
-- 表的结构 `mixojapp_spojproblem`
--

CREATE TABLE IF NOT EXISTS `mixojapp_spojproblem` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(100) NOT NULL,
  `sourceid` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `sourceid` (`sourceid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `oj`
--

CREATE TABLE IF NOT EXISTS `oj` (
  `name` varchar(100) NOT NULL,
  `parent` varchar(100) DEFAULT NULL,
  `abbr` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `oj`
--

INSERT INTO `oj` (`name`, `parent`, `abbr`) VALUES
('POJ', 'China', ''),
('ZOJ', 'China', '');

-- --------------------------------------------------------

--
-- 表的结构 `sourcetree`
--

CREATE TABLE IF NOT EXISTS `sourcetree` (
  `name` varchar(100) NOT NULL,
  `parent` varchar(100) DEFAULT NULL,
  `needShow` int(11) DEFAULT NULL,
  `haveProblem` int(11) DEFAULT NULL,
  `theType` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `sourcetree`
--

INSERT INTO `sourcetree` (`name`, `parent`, `needShow`, `haveProblem`, `theType`) VALUES
('2011', 'Asia', 1, 0, 'custom'),
('2011year', 'Asia', 1, 0, 'custom'),
('Aabenraa', 'Denmark', 0, 0, 'city'),
('Aalborg', 'Denmark', 0, 0, 'city'),
('Aalesund', 'Norway', 0, 0, 'city'),
('Aarhus', 'Denmark', 0, 0, 'city'),
('Abadan', 'Iran', 0, 0, 'city'),
('Abu Dhabi', 'United Arab Emirates', 0, 0, 'city'),
('Acapulco', 'Mexico', 0, 0, 'city'),
('Adelaide', 'Australia', 0, 0, 'city'),
('Afghanistan', 'Asia', 1, 0, 'country'),
('Africa', 'Root', 1, 0, 'continent'),
('Agricultural University Of Anhui', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of He nan', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of Hebei', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of Hunan', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of Jiangxi', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of Nanjing', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of Shanxi', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of Shenyang', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of South China', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of Southwest', 'China', 0, 0, 'chinauniversity'),
('Agricultural University Of The Inner Mongol', 'China', 0, 0, 'chinauniversity'),
('Albania', 'Europe', 1, 0, 'country'),
('Alexandria', 'Egypt', 0, 0, 'city'),
('Algeria', 'Africa', 1, 0, 'country'),
('Algiers', 'Algeria', 0, 0, 'city'),
('Amsterdam', 'Netherlands', 0, 0, 'city'),
('Ancona', 'Italy', 0, 0, 'city'),
('Andorra', 'Europe', 1, 0, 'country'),
('Angola', 'Africa', 1, 0, 'country'),
('Anhui Normal University', 'China', 0, 0, 'chinauniversity'),
('Anhui University of Engineering Science   Technology', 'China', 0, 0, 'chinauniversity'),
('Anhui University of Science and Technology', 'China', 0, 0, 'chinauniversity'),
('Anhui University of Technology', 'China', 0, 0, 'chinauniversity'),
('Annaba', 'Algeria', 0, 0, 'city'),
('Antigua and Barbuda', 'North America', 1, 0, 'country'),
('Antwerp', 'Belgium', 0, 0, 'city'),
('Aqaba', 'Jordan', 0, 0, 'city'),
('Argentina', 'South America', 1, 0, 'country'),
('Arica', 'Chile', 0, 0, 'city'),
('Armenia', 'Asia', 1, 0, 'country'),
('Asia', 'Root', 1, 14, 'continent'),
('Athens', 'Greece', 0, 0, 'city'),
('Auckland', 'New Zealand', 0, 0, 'city'),
('Australia', 'Oceania', 1, 0, 'country'),
('Austria', 'Europe', 1, 0, 'country'),
('Aviation Engineering Institutes Of Nanchang', 'China', 0, 0, 'chinauniversity'),
('Azerbaijan', 'Asia', 1, 0, 'country'),
('Bahamas', 'North America', 1, 0, 'country'),
('Bahia Blanca', 'Argentina', 0, 0, 'city'),
('Bahrain', 'Asia', 1, 0, 'country'),
('Bandar Khomeini', 'Iran', 0, 0, 'city'),
('Bangkok', 'Thailand', 0, 0, 'city'),
('Bangladesh', 'Asia', 1, 0, 'country'),
('Barbados', 'North America', 1, 0, 'country'),
('Barcelona', 'Spain', 0, 0, 'city'),
('Bassein', 'Myanmar', 0, 0, 'city'),
('Beijing Foreign Studies University', 'China', 0, 0, 'chinauniversity'),
('Beijing Forestry University', 'China', 0, 0, 'chinauniversity'),
('Beijing Jiaotong University', 'China', 0, 0, 'chinauniversity'),
('Beijing Language and Culture University', 'China', 0, 0, 'chinauniversity'),
('Beijing Normal University', 'China', 0, 0, 'chinauniversity'),
('Beijing Sport University', 'China', 0, 0, 'chinauniversity'),
('Beijing University', 'China', 0, 0, 'chinauniversity'),
('Beijing University Of Chinese Medicine', 'China', 0, 0, 'chinauniversity'),
('Beijing University Of Posts and Telecommunications', 'China', 0, 0, 'chinauniversity'),
('Beijing University Studies', 'China', 0, 0, 'chinauniversity'),
('Belarus', 'Europe', 1, 0, 'country'),
('Belgium', 'Europe', 1, 0, 'country'),
('Benin', 'Africa', 1, 0, 'country'),
('Bermuda', 'North America', 1, 0, 'country'),
('Bhutan', 'Asia', 1, 0, 'country'),
('Bilbao', 'Spain', 0, 0, 'city'),
('Bolivia', 'South America', 1, 0, 'country'),
('Bombay', 'Indonesia', 0, 0, 'city'),
('Bordeaux', 'France', 0, 0, 'city'),
('Boston', 'United States of America', 0, 0, 'city'),
('Botswana', 'Africa', 1, 0, 'country'),
('Bourgas', 'Bulgaria', 0, 0, 'city'),
('Brazil', 'South America', 1, 0, 'country'),
('Bremen', 'Germany', 0, 0, 'city'),
('Brisbane', 'Australia', 0, 0, 'city'),
('Bruseel', 'Belgium', 0, 0, 'city'),
('Buenos Aires', 'Argentina', 0, 0, 'city'),
('Bulgaria', 'Europe', 1, 0, 'country'),
('Bunbury', 'Australia', 0, 0, 'city'),
('Burkina Faso', 'Africa', 1, 0, 'country'),
('Burundi', 'Africa', 1, 0, 'country'),
('Bushire', 'Iran', 0, 0, 'city'),
('Butterworth Malacca Penang', 'Malaysia', 0, 0, 'city'),
('Cadiz', 'Spain', 0, 0, 'city'),
('Calcutta', 'Indonesia', 0, 0, 'city'),
('Callao', 'Peru', 0, 0, 'city'),
('Cameroon', 'Africa', 1, 0, 'country'),
('Canada', 'North America', 1, 0, 'country'),
('Cape Town', 'South Africa', 0, 0, 'city'),
('Cape Verde', 'Africa', 1, 0, 'country'),
('Caracas Maracaibo', 'Venezuela', 0, 0, 'city'),
('Cebu', 'Philippines', 0, 0, 'city'),
('Central African Republic', 'Africa', 1, 0, 'country'),
('Central China Agricultural University', 'China', 0, 0, 'chinauniversity'),
('Central China Normal University', 'China', 0, 0, 'chinauniversity'),
('Central China University Science and Technology', 'China', 0, 0, 'chinauniversity'),
('Central European', 'Europe', 1, 2, 'custom'),
('Central Judicial Police Officer s Institutes', 'China', 0, 0, 'chinauniversity'),
('Central University For Nationalities', 'China', 0, 0, 'chinauniversity'),
('Ceramic Institutes Of Jingdezhen', 'China', 0, 0, 'chinauniversity'),
('Chad', 'Africa', 1, 0, 'country'),
('Chalna', 'Bangladesh', 0, 0, 'city'),
('Changchun', 'China', 1, 1, 'custom'),
('Changjiang University', 'China', 0, 0, 'chinauniversity'),
('Changsha', 'China', 1, 0, 'custom'),
('Changsha University', 'China', 0, 0, 'chinauniversity'),
('ChengDu', 'China', 1, 1, 'custom'),
('Chicago', 'United States of America', 0, 0, 'city'),
('Chile', 'South America', 1, 0, 'country'),
('China', 'Asia', 1, 8, 'country'),
('China Agricultural University', 'China', 0, 0, 'chinauniversity'),
('China Measures The Institute', 'China', 0, 0, 'chinauniversity'),
('China Medicine University', 'China', 0, 0, 'chinauniversity'),
('China Mining University', 'China', 0, 0, 'chinauniversity'),
('China Science Technology University', 'China', 0, 0, 'chinauniversity'),
('China University Of Geosciences', 'China', 0, 0, 'chinauniversity'),
('China University Of Petroleum Beijing', 'China', 0, 0, 'chinauniversity'),
('China University Of Political Science and Law', 'China', 0, 0, 'chinauniversity'),
('Chinese Marine University', 'China', 0, 0, 'chinauniversity'),
('Chinese Medical Sciences University', 'China', 0, 0, 'chinauniversity'),
('Chinese Peking Union Medical College', 'China', 0, 0, 'chinauniversity'),
('Chinese People  S Institute Of Armed Police Force', 'China', 0, 0, 'chinauniversity'),
('Chittagong', 'Bangladesh', 0, 0, 'city'),
('Chongqing Sanxia Institute', 'China', 0, 0, 'chinauniversity'),
('Chris Church Dunedin', 'New Zealand', 0, 0, 'city'),
('Civil Aeronautical Engineering Institutes Of China', 'China', 0, 0, 'chinauniversity'),
('Collects The American University', 'China', 0, 0, 'chinauniversity'),
('Colleges Of Traditional Chinese Medicine Of Fujian', 'China', 0, 0, 'chinauniversity'),
('Colleges Of Traditional Chinese Medicine Of Guangxi', 'China', 0, 0, 'chinauniversity'),
('Colleges Of Traditional Chinese Medicine Of Shanxi', 'China', 0, 0, 'chinauniversity'),
('Colombia', 'South America', 1, 0, 'country'),
('Colombo', 'Sri Lanka', 0, 0, 'city'),
('Colon', 'Panama', 0, 0, 'city'),
('Comoros', 'Africa', 1, 0, 'country'),
('Congo', 'Africa', 1, 0, 'country'),
('Congo Democratic Republic', 'Africa', 1, 0, 'country'),
('Constantsa', 'Romania', 0, 0, 'city'),
('Cook Islands', 'Oceania', 1, 0, 'country'),
('Copenhagen', 'Denmark', 0, 0, 'city'),
('Cork', 'Ireland', 0, 0, 'city'),
('Costa Rica', 'North America', 1, 0, 'country'),
('Cotonou', 'Benin', 0, 0, 'city'),
('Croatia', 'Europe', 1, 1, 'country'),
('Cuba', 'North America', 1, 0, 'country'),
('Czech Republic', 'Europe', 1, 0, 'country'),
('Dacca', 'Bangladesh', 0, 0, 'city'),
('Dammam', 'Saudi Arabia', 0, 0, 'city'),
('Darwin', 'Australia', 0, 0, 'city'),
('Denmark', 'Europe', 1, 0, 'country'),
('Detroit', 'United States of America', 0, 0, 'city'),
('Djibouti', 'Africa', 1, 0, 'country'),
('Doha', 'Qatar', 0, 0, 'city'),
('Dominica', 'North America', 1, 0, 'country'),
('Donghua University', 'China', 0, 0, 'chinauniversity'),
('Douala', 'Cameroon', 0, 0, 'city'),
('Dubai', 'United Arab Emirates', 0, 0, 'city'),
('Dublin', 'Ireland', 0, 0, 'city'),
('Dunkirk Le Havre Marsei', 'France', 0, 0, 'city'),
('Durban', 'South Africa', 0, 0, 'city'),
('Durresi', 'Albania', 0, 0, 'city'),
('East China Institute Of Technology', 'China', 0, 0, 'chinauniversity'),
('East China Normal University', 'China', 0, 0, 'chinauniversity'),
('East China University Of Politics and Law', 'China', 0, 0, 'chinauniversity'),
('East China University Of Science', 'China', 0, 0, 'chinauniversity'),
('East London', 'South Africa', 0, 0, 'city'),
('East Timor', 'Asia', 1, 0, 'country'),
('Ecuador', 'South America', 1, 0, 'country'),
('Egypt', 'Africa', 1, 0, 'country'),
('El Salvador', 'North America', 1, 0, 'country'),
('Electronic Engineering Institutes Of Guilin', 'China', 0, 0, 'chinauniversity'),
('Electronic University Of Science  Technology Of Hangzhou', 'China', 0, 0, 'chinauniversity'),
('Ensenada', 'Mexico', 0, 0, 'city'),
('Equatorial Guinea', 'Africa', 1, 0, 'country'),
('Estonia', 'Europe', 1, 0, 'country'),
('Ethiopia', 'Africa', 1, 0, 'country'),
('Europe', 'Root', 1, 17, 'continent'),
('Finance and Economics Institute Of The Inner Mongol', 'China', 0, 0, 'chinauniversity'),
('Finance and Economics University Of Jiangxi', 'China', 0, 0, 'chinauniversity'),
('Finance and Economics University Of Tianjin', 'China', 0, 0, 'chinauniversity'),
('Finland', 'Europe', 1, 0, 'country'),
('Five City University', 'China', 0, 0, 'chinauniversity'),
('France', 'Europe', 1, 0, 'country'),
('Frankfurt', 'Germany', 0, 0, 'city'),
('French Guiana', 'South America', 1, 0, 'country'),
('Fudan University', 'China', 0, 0, 'chinauniversity'),
('Fujian Normal University', 'China', 0, 0, 'chinauniversity'),
('Fujian University of Technology', 'China', 0, 0, 'chinauniversity'),
('Fukuo', 'Japan', 0, 0, 'city'),
('Gabon', 'Africa', 1, 0, 'country'),
('Gambia', 'Africa', 1, 0, 'country'),
('Gdynia', 'Poland', 0, 0, 'city'),
('Geneva', 'Italy', 0, 0, 'city'),
('Georgia', 'Asia', 1, 0, 'country'),
('Germany', 'Europe', 1, 0, 'country'),
('Ghana', 'Africa', 1, 0, 'country'),
('Ghent', 'Belgium', 0, 0, 'city'),
('Gibraltar', 'Europe', 1, 0, 'country'),
('Gothenburg', 'Sweden', 0, 0, 'city'),
('Great Britain', 'Europe', 1, 0, 'country'),
('Greece', 'Europe', 1, 0, 'country'),
('Grenada', 'North America', 1, 0, 'country'),
('Guam', 'Oceania', 1, 0, 'country'),
('Guangdong University of Technology', 'China', 0, 0, 'chinauniversity'),
('Guangxi Medical University', 'China', 0, 0, 'chinauniversity'),
('Guangxi Normal University', 'China', 0, 0, 'chinauniversity'),
('Guangxi Teachers College', 'China', 0, 0, 'chinauniversity'),
('Guangxi Technical College', 'China', 0, 0, 'chinauniversity'),
('Guangxi University', 'China', 0, 0, 'chinauniversity'),
('Guangzhou University', 'China', 0, 0, 'chinauniversity'),
('Guatemala', 'North America', 1, 0, 'country'),
('Guaymas', 'Mexico', 0, 0, 'city'),
('Guinea', 'Africa', 1, 0, 'country'),
('GuineaBissau', 'Africa', 1, 0, 'country'),
('Guyana', 'South America', 1, 0, 'country'),
('Gwadur', 'Pakistan', 0, 0, 'city'),
('Hai Phong', 'Viet Nam', 0, 0, 'city'),
('Haifa', 'Israel', 0, 0, 'city'),
('Hainan Medical College', 'China', 0, 0, 'chinauniversity'),
('Hainan Teachers College', 'China', 0, 0, 'chinauniversity'),
('Halmstad', 'Sweden', 0, 0, 'city'),
('Hamina', 'Finland', 0, 0, 'city'),
('Hangzhou University', 'China', 0, 0, 'chinauniversity'),
('Hanoi', 'Viet Nam', 0, 0, 'city'),
('Haugesund', 'Norway', 0, 0, 'city'),
('He nan Normal University', 'China', 0, 0, 'chinauniversity'),
('He nan University', 'China', 0, 0, 'chinauniversity'),
('He nan University of Technology', 'China', 0, 0, 'chinauniversity'),
('Hebei Institute Of Civil Engineering', 'China', 0, 0, 'chinauniversity'),
('Hebei Medical University', 'China', 0, 0, 'chinauniversity'),
('Hebei Normal University', 'China', 0, 0, 'chinauniversity'),
('Hebei University of Technology', 'China', 0, 0, 'chinauniversity'),
('HeFei University of Technology', 'China', 0, 0, 'chinauniversity'),
('Helsingborg', 'Sweden', 0, 0, 'city'),
('Helsingor', 'Denmark', 0, 0, 'city'),
('Helsinki', 'Finland', 0, 0, 'city'),
('Hiroshima', 'Japan', 0, 0, 'city'),
('Ho Chi Minh City', 'Viet Nam', 0, 0, 'city'),
('Honduras', 'North America', 1, 0, 'country'),
('Houston', 'United States of America', 0, 0, 'city'),
('Huaqiao University', 'China', 0, 0, 'chinauniversity'),
('Hubei College Of Traditional Chinese Medicine', 'China', 0, 0, 'chinauniversity'),
('Hubei Institute For Nationalities', 'China', 0, 0, 'chinauniversity'),
('Hubei Institute Of Fine Acts', 'China', 0, 0, 'chinauniversity'),
('Hubei Normal University', 'China', 0, 0, 'chinauniversity'),
('Hubei University', 'China', 0, 0, 'chinauniversity'),
('Hubei University Of Technology', 'China', 0, 0, 'chinauniversity'),
('Humburg', 'Germany', 0, 0, 'city'),
('Hunan Normal University', 'China', 0, 0, 'chinauniversity'),
('Hunan University', 'China', 0, 0, 'chinauniversity'),
('Hungary', 'Europe', 1, 0, 'country'),
('Hungnam', 'North Korea', 0, 0, 'city'),
('Iceland', 'Europe', 1, 0, 'country'),
('Inchon', 'South Korea', 0, 0, 'city'),
('India', 'Asia', 1, 0, 'country'),
('Indonesia', 'Asia', 1, 0, 'country'),
('Industrial and Commercial University Of Chongqing', 'China', 0, 0, 'chinauniversity'),
('Inner Mongol Normal University', 'China', 0, 0, 'chinauniversity'),
('Inner Mongol University of Technology', 'China', 0, 0, 'chinauniversity'),
('Institute Of Technology Of Dalian', 'China', 0, 0, 'chinauniversity'),
('Institute Of Unity and Coherence In Writing Of Chongqing', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Chifeng', 'China', 0, 0, 'chinauniversity'),
('Institutes Of HulunBuir', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Jiaxing', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of Changsha', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of He nan', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of Hebei', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of Jiangxi', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of Nanjing', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of South China', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of Taiyuan', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of Tianjin', 'China', 0, 0, 'chinauniversity'),
('Institutes Of Technology Of Zhejiang', 'China', 0, 0, 'chinauniversity'),
('Iquique', 'Chile', 0, 0, 'city'),
('Iran', 'Asia', 1, 1, 'country'),
('Iraq', 'Asia', 1, 0, 'country'),
('Ireland', 'Europe', 1, 0, 'country'),
('Israel', 'Asia', 1, 0, 'country'),
('Italy', 'Europe', 1, 0, 'country'),
('Jamaica', 'North America', 1, 0, 'country'),
('Japan', 'Asia', 1, 1, 'country'),
('Jeddah', 'Saudi Arabia', 0, 0, 'city'),
('Ji nan University', 'China', 0, 0, 'chinauniversity'),
('Jianghan University', 'China', 0, 0, 'chinauniversity'),
('Jiangxi Normal University', 'China', 0, 0, 'chinauniversity'),
('Jordan', 'Asia', 1, 0, 'country'),
('Kagoshima', 'Japan', 0, 0, 'city'),
('Kakinada', 'Indonesia', 0, 0, 'city'),
('Kaliningrad', 'Russian Federation', 0, 0, 'city'),
('Karachi', 'Pakistan', 0, 0, 'city'),
('Kawasaki', 'Japan', 0, 0, 'city'),
('Kazakhstan', 'Asia', 1, 0, 'country'),
('Kemi', 'Finland', 0, 0, 'city'),
('Kenya', 'Africa', 1, 0, 'country'),
('Kholmsk Leninggrad', 'Russian Federation', 0, 0, 'city'),
('Kiribati', 'Oceania', 1, 0, 'country'),
('Kitakyushu', 'Japan', 0, 0, 'city'),
('Kobe', 'Japan', 0, 0, 'city'),
('Kuwait', 'Asia', 1, 0, 'country'),
('La Guaira', 'Venezuela', 0, 0, 'city'),
('La Paz', 'Mexico', 0, 0, 'city'),
('Laos', 'Asia', 1, 0, 'country'),
('Launceston', 'Australia', 0, 0, 'city'),
('Lebanon', 'Asia', 1, 0, 'country'),
('Lesotho', 'Africa', 1, 0, 'country'),
('Liaoning Project Technology University', 'China', 0, 0, 'chinauniversity'),
('Liaoning University', 'China', 0, 0, 'chinauniversity'),
('Liberia', 'Africa', 1, 0, 'country'),
('Libya', 'Africa', 1, 0, 'country'),
('Light Engineering Institutes Of Zhengzhou', 'China', 0, 0, 'chinauniversity'),
('Lisbon', 'Portugal', 0, 0, 'city'),
('Lithuania', 'Europe', 1, 0, 'country'),
('Liverpool', 'United Kingdom', 0, 0, 'city'),
('London', 'United Kingdom', 0, 0, 'city'),
('Los Angeles', 'United States of America', 0, 0, 'city'),
('Luxembourg', 'Europe', 1, 0, 'country'),
('Lyttelton', 'New Zealand', 0, 0, 'city'),
('Madagascar', 'Africa', 1, 0, 'country'),
('Majunga', 'Madagascar', 0, 0, 'city'),
('Malaga', 'Spain', 0, 0, 'city'),
('Malawi', 'Africa', 1, 0, 'country'),
('Malaysia', 'Asia', 1, 0, 'country'),
('Maldives', 'Asia', 1, 0, 'country'),
('Mali', 'Africa', 1, 0, 'country'),
('Malmo', 'Sweden', 0, 0, 'city'),
('Malta', 'Europe', 1, 0, 'country'),
('Management Colleges Of Aircraft Industry Of Zhengzhou', 'China', 0, 0, 'chinauniversity'),
('Manages The Medical College Long', 'China', 0, 0, 'chinauniversity'),
('Manchester', 'United Kingdom', 0, 0, 'city'),
('Manila', 'Philippines', 0, 0, 'city'),
('Manzanillo', 'Mexico', 0, 0, 'city'),
('Marine University Of Zhanjiang', 'China', 0, 0, 'chinauniversity'),
('Maritime Affairs University Of Dalian', 'China', 0, 0, 'chinauniversity'),
('Marshall Islands', 'Oceania', 1, 0, 'country'),
('Mauritania', 'Africa', 1, 0, 'country'),
('Mauritius', 'Africa', 1, 0, 'country'),
('Medical Colleges Of Guilin', 'China', 0, 0, 'chinauniversity'),
('Medical Colleges Of The Inner Mongol', 'China', 0, 0, 'chinauniversity'),
('Medical University Of Anhui', 'China', 0, 0, 'chinauniversity'),
('Medical University Of Chongqing', 'China', 0, 0, 'chinauniversity'),
('Medical University Of Fujian', 'China', 0, 0, 'chinauniversity'),
('Medical University Of Tianjin', 'China', 0, 0, 'chinauniversity'),
('Melborne', 'Australia', 0, 0, 'city'),
('Mexico', 'North America', 1, 0, 'country'),
('Miami', 'United States of America', 0, 0, 'city'),
('Middle and Southern University', 'China', 0, 0, 'chinauniversity'),
('Mikpo Pusan', 'South Korea', 0, 0, 'city'),
('Mobile', 'United States of America', 0, 0, 'city'),
('Moldova', 'Europe', 1, 0, 'country'),
('Monaco', 'Europe', 1, 0, 'country'),
('Mongolia', 'Asia', 1, 0, 'country'),
('Monrovia', 'Liberia', 0, 0, 'city'),
('Montreal', 'Canada', 0, 0, 'city'),
('Morocco', 'Africa', 1, 0, 'country'),
('Mountain Western Medicine S University', 'China', 0, 0, 'chinauniversity'),
('Mozambique', 'Africa', 1, 0, 'country'),
('Muscat', 'Oman', 0, 0, 'city'),
('Myanmar', 'Asia', 1, 0, 'country'),
('Nagasaki', 'Japan', 0, 0, 'city'),
('Nagoya', 'Japan', 0, 0, 'city'),
('Nakhodka Murmansk', 'Russian Federation', 0, 0, 'city'),
('Namibia', 'Africa', 1, 0, 'country'),
('Nampo', 'North Korea', 0, 0, 'city'),
('Nanchang University of Technology', 'China', 0, 0, 'chinauniversity'),
('Nandar Abbas', 'Iran', 0, 0, 'city'),
('Nanjing Aero Space University', 'China', 0, 0, 'chinauniversity'),
('Nanjing University', 'China', 0, 0, 'chinauniversity'),
('Nankai University', 'China', 0, 0, 'chinauniversity'),
('Napier', 'New Zealand', 0, 0, 'city'),
('Naples', 'Italy', 0, 0, 'city'),
('National Medical College Of Right Rivers', 'China', 0, 0, 'chinauniversity'),
('National University Of The Inner Mongol', 'China', 0, 0, 'chinauniversity'),
('Nauru', 'Oceania', 1, 0, 'country'),
('Nepal', 'Asia', 1, 0, 'country'),
('Netherlands', 'Europe', 1, 0, 'country'),
('New Castle', 'United Kingdom', 0, 0, 'city'),
('New Plymouth', 'New Zealand', 0, 0, 'city'),
('New York', 'United States of America', 0, 0, 'city'),
('New Zealand', 'Oceania', 1, 0, 'country'),
('Nicaragua', 'North America', 1, 0, 'country'),
('Niger', 'Africa', 1, 0, 'country'),
('Nigeria', 'Africa', 1, 0, 'country'),
('ningxia', 'China', 1, 0, 'custom'),
('North America', 'Root', 1, 26, 'continent'),
('North China Electric Power University', 'China', 0, 0, 'chinauniversity'),
('North China Institute of Water Conservancy and Hydroelectric Power', 'China', 0, 0, 'chinauniversity'),
('Northeastern University', 'China', 0, 0, 'chinauniversity'),
('Northern Mariana Islands', 'Oceania', 1, 0, 'country'),
('Norway', 'Europe', 1, 0, 'country'),
('NWERC', 'Europe', 1, 1, 'custom'),
('Oakland', 'United States of America', 0, 0, 'city'),
('Oceania', 'Root', 1, 0, 'continent'),
('Oceanography Institute Of Zhejiang', 'China', 0, 0, 'chinauniversity'),
('Odessa', 'Ukraine', 0, 0, 'city'),
('Oman', 'Asia', 1, 0, 'country'),
('Oran', 'Algeria', 0, 0, 'city'),
('Osaka', 'Japan', 0, 0, 'city'),
('Oslo', 'Norway', 0, 0, 'city'),
('Oulu', 'Finland', 0, 0, 'city'),
('Pakistan', 'Asia', 1, 0, 'country'),
('Palau', 'Oceania', 1, 0, 'country'),
('Panama', 'North America', 1, 0, 'country'),
('Papua New Guinea', 'Oceania', 1, 0, 'country'),
('Paraguay', 'South America', 1, 0, 'country'),
('Paramaribo', 'Suriname', 0, 0, 'city'),
('Paranagua', 'Brazil', 0, 0, 'city'),
('Perth', 'Australia', 0, 0, 'city'),
('Peru', 'South America', 1, 0, 'country'),
('Philadedlphi', 'United States of America', 0, 0, 'city'),
('Philippines', 'Asia', 1, 0, 'country'),
('Piraeus', 'Greece', 0, 0, 'city'),
('POJ', 'China', 0, 0, 'oj'),
('Poland', 'Europe', 1, 0, 'country'),
('Port Elizabeth', 'South Africa', 0, 0, 'city'),
('Port Kelang', 'Malaysia', 0, 0, 'city'),
('Port Kembla', 'Australia', 0, 0, 'city'),
('Port of Argentina', 'Argentina', 0, 0, 'city'),
('Port Said', 'Egypt', 0, 0, 'city'),
('Portland New Orleans', 'United States of America', 0, 0, 'city'),
('Porto Novo', 'Benin', 0, 0, 'city'),
('Portugal', 'Europe', 1, 0, 'country'),
('Post and Telecommunications Institutes Of Chongqing', 'China', 0, 0, 'chinauniversity'),
('Puerto Cabello', 'Venezuela', 0, 0, 'city'),
('Qatar', 'Asia', 1, 0, 'country'),
('Quebec', 'Canada', 0, 0, 'city'),
('Rabat', 'Morocco', 0, 0, 'city'),
('Railway Institutes Of Shijiazhuang', 'China', 0, 0, 'chinauniversity'),
('Rangoon', 'Myanmar', 0, 0, 'city'),
('Recife', 'Brazil', 0, 0, 'city'),
('Renmin University Of China', 'China', 0, 0, 'chinauniversity'),
('Reykjavik', 'Iceland', 0, 0, 'city'),
('Rijeka', 'Croatia', 0, 0, 'city'),
('Rio de janeiro', 'Brazil', 0, 0, 'city'),
('Rio Grande Salvador', 'Brazil', 0, 0, 'city'),
('River Sea University', 'China', 0, 0, 'chinauniversity'),
('Romania', 'Europe', 1, 0, 'country'),
('Rostock', 'Germany', 0, 0, 'city'),
('Rotterdam', 'Netherlands', 0, 0, 'city'),
('Russian Federation', 'Europe', 1, 6, 'country'),
('Saint Kitts and Nevis', 'North America', 1, 0, 'country'),
('Saint Lucia', 'North America', 1, 0, 'country'),
('San Diego', 'United States of America', 0, 0, 'city'),
('San Francisco', 'United States of America', 0, 0, 'city'),
('San Juan', 'Peru', 0, 0, 'city'),
('San Marino', 'Europe', 1, 0, 'country'),
('Santander', 'Spain', 0, 0, 'city'),
('Santos', 'Brazil', 0, 0, 'city'),
('Saudi Arabia', 'Asia', 1, 0, 'country'),
('Scientific and Technological Institutes Of Zhejiang', 'China', 0, 0, 'chinauniversity'),
('Senegal', 'Africa', 1, 0, 'country'),
('Sete', 'France', 0, 0, 'city'),
('Seychelles', 'Africa', 1, 0, 'country'),
('Shandong Agricultural University', 'China', 0, 0, 'chinauniversity'),
('Shandong Normal University', 'China', 0, 0, 'chinauniversity'),
('Shandong Traditional Chinese Medicine University', 'China', 0, 0, 'chinauniversity'),
('Shandong University', 'China', 0, 0, 'chinauniversity'),
('Shanghai Conservatory Of Music', 'China', 0, 0, 'chinauniversity'),
('Shanghai Institute Of Foreign Trade', 'China', 0, 0, 'chinauniversity'),
('Shanghai Institute Of Technology', 'China', 0, 0, 'chinauniversity'),
('Shanghai International Studies University', 'China', 0, 0, 'chinauniversity'),
('Shanghai Jiao Tong University', 'China', 0, 0, 'chinauniversity'),
('Shanghai Maritime University', 'China', 0, 0, 'chinauniversity'),
('Shanghai Normal University', 'China', 0, 0, 'chinauniversity'),
('Shanghai Theatre Academy', 'China', 0, 0, 'chinauniversity'),
('Shanghai University', 'China', 0, 0, 'chinauniversity'),
('Shanghai University Of Electric Power', 'China', 0, 0, 'chinauniversity'),
('Shanghai University Of Engineering Science', 'China', 0, 0, 'chinauniversity'),
('Shanghai University Of Finance', 'China', 0, 0, 'chinauniversity'),
('Shanghai University Of Sport', 'China', 0, 0, 'chinauniversity'),
('Shanghai University Of Technology', 'China', 0, 0, 'chinauniversity'),
('Shanxi Finance and Economics University', 'China', 0, 0, 'chinauniversity'),
('Shanxi Normal University', 'China', 0, 0, 'chinauniversity'),
('Sharjah', 'United Arab Emirates', 0, 0, 'city'),
('Shenyang University of Technology', 'China', 0, 0, 'chinauniversity'),
('Shenzhen University', 'China', 0, 0, 'chinauniversity'),
('Sierra Leone', 'Africa', 1, 0, 'country'),
('Singapore', 'Asia', 1, 0, 'country'),
('Slovak Republic', 'Europe', 1, 0, 'country'),
('sola', 'Norway', 0, 0, 'city'),
('Solomon Islands', 'Oceania', 1, 0, 'country'),
('South Africa', 'Africa', 1, 0, 'country'),
('South America', 'Root', 1, 0, 'continent'),
('South Center University For Nationalities', 'China', 0, 0, 'chinauniversity'),
('South Korea', 'Asia', 1, 1, 'country'),
('Southeast China University', 'China', 0, 0, 'chinauniversity'),
('Southwest Politics and Law University', 'China', 0, 0, 'chinauniversity'),
('Southwestern Normal University', 'China', 0, 0, 'chinauniversity'),
('Spain', 'Europe', 1, 0, 'country'),
('Sri Lanka', 'Asia', 1, 0, 'country'),
('Sudan', 'Africa', 1, 0, 'country'),
('Suez', 'Egypt', 0, 0, 'city'),
('Suriname', 'South America', 1, 0, 'country'),
('Swaziland', 'Africa', 1, 0, 'country'),
('Sweden', 'Europe', 1, 0, 'country'),
('Switzerland', 'Europe', 1, 0, 'country'),
('Sydney', 'Australia', 0, 0, 'city'),
('Szozecin', 'Poland', 0, 0, 'city'),
('Tabaco', 'Philippines', 0, 0, 'city'),
('Tajikistan', 'Asia', 1, 0, 'country'),
('Talin', 'Estonia', 0, 0, 'city'),
('Tamatave', 'Madagascar', 0, 0, 'city'),
('Tampico', 'Mexico', 0, 0, 'city'),
('Tangier', 'Morocco', 0, 0, 'city'),
('Tanzania', 'Africa', 1, 0, 'country'),
('Technical Colleges Of Guilin', 'China', 0, 0, 'chinauniversity'),
('Technical Colleges Of Zhuzhou', 'China', 0, 0, 'chinauniversity'),
('Technological Institute Of Qingdao Harbor', 'China', 0, 0, 'chinauniversity'),
('Tel Aviv', 'Israel', 0, 0, 'city'),
('Thailand', 'Asia', 1, 0, 'country'),
('The Central University Of Finance and Economics', 'China', 0, 0, 'chinauniversity'),
('Thessaloniki', 'Greece', 0, 0, 'city'),
('Tianjin Normal University', 'China', 0, 0, 'chinauniversity'),
('Tianjin University of Technology', 'China', 0, 0, 'chinauniversity'),
('Tokelau', 'Oceania', 1, 0, 'country'),
('Tokyo', 'Japan', 0, 0, 'city'),
('Tongji University', 'China', 0, 0, 'chinauniversity'),
('Toronto', 'Canada', 0, 0, 'city'),
('Toulon', 'France', 0, 0, 'city'),
('Traditional Chinese Medicine University Of Guangzhou', 'China', 0, 0, 'chinauniversity'),
('Traffic Institutes Of Chongqing', 'China', 0, 0, 'chinauniversity'),
('Traffic University Of East China', 'China', 0, 0, 'chinauniversity'),
('Trincomalee', 'Sri Lanka', 0, 0, 'city'),
('Trinidad and Tobago', 'North America', 1, 0, 'country'),
('Tropical Agricultural University Of South China', 'China', 0, 0, 'chinauniversity'),
('Tsinghua University', 'China', 0, 0, 'chinauniversity'),
('Tunisia', 'Africa', 1, 0, 'country'),
('Turkmenistan', 'Asia', 1, 0, 'country'),
('Turku', 'Finland', 0, 0, 'city'),
('Ukraine', 'Europe', 1, 0, 'country'),
('Umm Said', 'Qatar', 0, 0, 'city'),
('United Arab Emirates', 'Asia', 1, 0, 'country'),
('United Kingdom', 'Europe', 1, 0, 'country'),
('United States', 'North America', 1, 0, 'country'),
('United States of America', 'North America', 1, 15, 'country'),
('University Of Agriculture and Forestry In Fujian', 'China', 0, 0, 'chinauniversity'),
('University Of Anhui', 'China', 0, 0, 'chinauniversity'),
('University Of Business   Economics In Hebei', 'China', 0, 0, 'chinauniversity'),
('University Of Chongqing', 'China', 0, 0, 'chinauniversity'),
('University Of Dalian', 'China', 0, 0, 'chinauniversity'),
('University Of Fuzhou', 'China', 0, 0, 'chinauniversity'),
('University Of Hainan', 'China', 0, 0, 'chinauniversity'),
('University Of Hebei', 'China', 0, 0, 'chinauniversity'),
('University Of International Business and Economics', 'China', 0, 0, 'chinauniversity'),
('University Of Ji nan', 'China', 0, 0, 'chinauniversity'),
('University Of Jishou', 'China', 0, 0, 'chinauniversity'),
('University Of Nanchang', 'China', 0, 0, 'chinauniversity'),
('University Of Nanhua', 'China', 0, 0, 'chinauniversity'),
('University Of Ningbo', 'China', 0, 0, 'chinauniversity'),
('University Of Qingdao', 'China', 0, 0, 'chinauniversity'),
('University Of Science and Technology Beijing', 'China', 0, 0, 'chinauniversity'),
('University Of Science and Technology Of He nan', 'China', 0, 0, 'chinauniversity'),
('University Of Science and Technology Of Hebei', 'China', 0, 0, 'chinauniversity'),
('University Of Science and Technology Of Hunan', 'China', 0, 0, 'chinauniversity'),
('University Of Science and Technology Of Shandong', 'China', 0, 0, 'chinauniversity'),
('University Of Science and Technology Of Taiyuan', 'China', 0, 0, 'chinauniversity'),
('University Of Science and Technology Of The Inner Mongol', 'China', 0, 0, 'chinauniversity'),
('University Of Science and Technology Of Tianjin', 'China', 0, 0, 'chinauniversity'),
('University Of Shantou', 'China', 0, 0, 'chinauniversity'),
('University Of Shanxi', 'China', 0, 0, 'chinauniversity'),
('University Of Shenyang', 'China', 0, 0, 'chinauniversity'),
('University Of Suzhou', 'China', 0, 0, 'chinauniversity'),
('University Of The Inner Mongol', 'China', 0, 0, 'chinauniversity'),
('University Of The South', 'China', 0, 0, 'chinauniversity'),
('University Of Tianjin', 'China', 0, 0, 'chinauniversity'),
('University Of Xiangtan', 'China', 0, 0, 'chinauniversity'),
('University Of Yantai', 'China', 0, 0, 'chinauniversity'),
('University On The Mountain Of Swallows', 'China', 0, 0, 'chinauniversity'),
('Urban Construction Institutes Of Tianjin', 'China', 0, 0, 'chinauniversity'),
('USACO', 'United States of America', 1, 1, 'custom'),
('Uzbekistan', 'Asia', 1, 0, 'country'),
('Valona', 'Albania', 0, 0, 'city'),
('Valparaiso', 'Chile', 0, 0, 'city'),
('Vancouver', 'Canada', 0, 0, 'city'),
('Varna', 'Bulgaria', 0, 0, 'city'),
('Vasa', 'Finland', 0, 0, 'city'),
('Venezuela', 'South America', 1, 0, 'country'),
('Venice', 'Italy', 0, 0, 'city'),
('Victoria', 'Malta', 0, 0, 'city'),
('Viet Nam', 'Asia', 1, 0, 'country'),
('Visby', 'Sweden', 0, 0, 'city'),
('Vosochny', 'Russian Federation', 0, 0, 'city'),
('Wallhamn', 'Sweden', 0, 0, 'city'),
('Wellington', 'New Zealand', 0, 0, 'city'),
('Western Anhui University', 'China', 0, 0, 'chinauniversity'),
('Wuhan Conservatory Of Music', 'China', 0, 0, 'chinauniversity'),
('Wuhan Institute Of Sport', 'China', 0, 0, 'chinauniversity'),
('Wuhan Institute Of Technology', 'China', 0, 0, 'chinauniversity'),
('Wuhan University', 'China', 0, 0, 'chinauniversity'),
('Wuhan University Of Science and Engineering', 'China', 0, 0, 'chinauniversity'),
('Wuhan University Of Technology', 'China', 0, 0, 'chinauniversity'),
('Xiamen University', 'China', 0, 0, 'chinauniversity'),
('Yalta', 'Russian Federation', 0, 0, 'city'),
('Yang en University', 'China', 0, 0, 'chinauniversity'),
('Yekaterinburg', 'Russian Federation', 0, 0, 'city'),
('Yokohama', 'Japan', 0, 0, 'city'),
('Zeebrugge', 'Belgium', 0, 0, 'city'),
('Zhejiang Normal University', 'China', 0, 0, 'chinauniversity'),
('Zhejiang University', 'China', 0, 0, 'chinauniversity'),
('Zhejiang University of Technology', 'China', 0, 0, 'chinauniversity'),
('Zhengzhou University', 'China', 0, 0, 'chinauniversity'),
('Zhongnan University Of Economics   Law', 'China', 0, 0, 'chinauniversity'),
('Zhongshan University', 'China', 0, 0, 'chinauniversity'),
('ZOJ', 'China', 0, 0, 'oj');

-- --------------------------------------------------------

--
-- 表的结构 `sourcetreeref`
--

CREATE TABLE IF NOT EXISTS `sourcetreeref` (
  `source` varchar(200) NOT NULL,
  `level` varchar(100) DEFAULT NULL,
  `date` varchar(20) DEFAULT NULL,
  `parent` varchar(100) DEFAULT NULL,
  `isUser` int(11) DEFAULT NULL,
  PRIMARY KEY (`source`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `sourcetreeref`
--

INSERT INTO `sourcetreeref` (`source`, `level`, `date`, `parent`, `isUser`) VALUES
('', 'Unknown', 'none', 'Root', 0),
('2008 East Central Regional Contest', 'Regional', '2008', 'Root', 0),
('Asia 1996, Shanghai (Mainland China)', 'Unknown', '1996', 'China', 0),
('Asia 2001, Taejon (South Korea)', 'Unknown', '2001', 'South Korea', 0),
('Asia 2002, Dhaka (Bengal)', 'Unknown', '2002', 'Asia', 0),
('Asia 2005, Hangzhou (Mainland China), Preliminary', 'Unknown', '2005', 'China', 0),
('Baidu Star 2006 Preliminary', 'Unknown', '2006', 'Root', 0),
('Central Europe 1995', 'Unknown', '1995', 'Europe', 0),
('Central Europe 1996', 'Unknown', '1996', 'Europe', 0),
('Central European Programming Contest 2008', 'Unknown', '2008', 'Central European', 0),
('Croatia OI 2002 Final Exam - Second Day', 'Unknown', '2002', 'Croatia', 0),
('CYJJ''s Funny Contest #1, Killing in Seconds', 'Unknown', 'none', 'Root', 0),
('East Central North America 1988', 'Unknown', '1988', 'North America', 0),
('East Central North America 1994', 'Unknown', '1994', 'North America', 0),
('East Central North America 1996', 'Unknown', '1996', 'North America', 0),
('East Central North America 1998', 'Unknown', '1998', 'North America', 0),
('East Central North America 1999', 'Unknown', '1999', 'North America', 0),
('East Central North America 1999, Practice', 'Unknown', '1999', 'North America', 0),
('East Central North America 2001', 'Unknown', '2001', 'North America', 0),
('East Central North America 2002', 'Unknown', '2002', 'North America', 0),
('East Central North America 2003, Practice', 'Unknown', '2003', 'North America', 0),
('Greater New York 2000', 'Unknown', '2000', 'United States of America', 0),
('Greater New York 2001', 'Unknown', '2001', 'United States of America', 0),
('Greater New York 2003', 'Unknown', '2003', 'United States of America', 0),
('IOI 1994', 'Unknown', '1994', 'Root', 0),
('IOI 1995', 'Unknown', '1995', 'Root', 0),
('IOI 1998', 'Unknown', '1998', 'Root', 0),
('IOI 1999', 'Unknown', '1999', 'Root', 0),
('IOI 2000', 'Unknown', '2000', 'Root', 0),
('IOI 2002', 'Unknown', '2002', 'Root', 0),
('Japan 2004', 'Unknown', '2004', 'Japan', 0),
('Mid-Atlantic 2001', 'Unknown', '2001', 'Root', 0),
('Mid-Central European Regional Contest 1999', 'Regional', '1999', 'Central European', 0),
('Mid-Central USA 1999', 'Unknown', '1999', 'United States of America', 0),
('Mid-Central USA 2000', 'Unknown', '2000', 'United States of America', 0),
('Mid-Central USA 2001', 'Unknown', '2001', 'United States of America', 0),
('Mid-Central USA 2002', 'Unknown', '2002', 'United States of America', 0),
('Mid-Central USA 2006', 'Unknown', '2006', 'United States of America', 0),
('Northeastern Europe 1998', 'Unknown', '1998', 'Europe', 0),
('Northeastern Europe 2001', 'Unknown', '2001', 'Europe', 0),
('Northeastern Europe 2005', 'Unknown', '2005', 'Europe', 0),
('NWERC 2008', 'Regional', '2008', 'NWERC', 0),
('Pacific Northwest 1998', 'Unknown', '1998', 'Root', 0),
('POJ', 'OJ''s', 'none', 'China', 0),
('POJ Monthly--2007.04.01', 'OJ''s', '2007', 'China', 0),
('Problem Author: Den RaskovalovProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', 'Unknown', '2006', 'Russian Federation', 0),
('Problem Author: Folklore. Adapted by Stanislav VasilyevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', 'Unknown', '2006', 'Russian Federation', 0),
('Problem Author: Leonid Volkov, Stanislav VasilyevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', 'Unknown', '2006', 'Russian Federation', 0),
('Problem Author: Magaz Asanov, Alexander Mironenko, Anton Botov, Evgeny KrokhalevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', 'Unknown', '2006', 'Russian Federation', 0),
('Problem Author: Magaz Asanov, Evgeny KrokhalevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', 'Unknown', '2006', 'Russian Federation', 0),
('Problem Author: Stanislav VasilyevProblem Source: Quarter-Final of XXXI ACM ICPC - Yekaterinburg - 2006', 'Unknown', '2006', 'Russian Federation', 0),
('Problem Source: Bulgarian National Olympiad Day #2', 'Unknown', 'none', 'Root', 0),
('Problem Source: First competition for selecting the Bulgarian IOI team.', 'Unknown', 'none', 'Root', 0),
('Regionals 2002,Asia - Tehran', 'Regional', '2002', 'Asia', 0),
('Regionals 2002,Asia - Tehran,North America - Southern California', 'Regional', '2002', 'North America', 0),
('Regionals 2002,North America - Mid-Atlantic USA', 'Regional', '2002', 'United States of America', 0),
('Regionals 2004,North America - Mid-Atlantic USA', 'Regional', '2004', 'United States of America', 0),
('Regionals 2005,North America - Greater NY', 'Regional', '2005', 'North America', 0),
('Regionals 2008,Asia - ChengDu', 'Regional', '2008', 'ChengDu', 0),
('Regionals 2012,Asia - Changchun', 'Regional', '2012', 'Changchun', 0),
('Source:Asia 2001, Shanghai (Mainland China)', 'Unknown', '2001', 'China', 0),
('Source:Asia 2001, Tehran (Iran)', 'Unknown', '2001', 'Iran', 0),
('Source:Zhejiang University Local Contest 2001', 'University''s', '2001', 'Asia', 1),
('South Central USA 1996', 'Unknown', '1996', 'United States of America', 0),
('South Central USA 1998 (Sepcial Judge Module By JGShining)', 'Unknown', '1998', 'United States of America', 0),
('South Central USA 2002', 'Unknown', '2002', 'United States of America', 0),
('South Central USA 2003', 'Unknown', '2003', 'United States of America', 0),
('Southeastern Europe 2005', 'Unknown', '2005', 'Europe', 0),
('Southern African 2001', 'Unknown', '2001', 'Root', 0),
('Southwestern European Regional Contest 1996', 'Regional', '1996', 'Europe', 0),
('Svenskt Mästerskap i Programmering/Norgesmesterskapet 2003', 'Unknown', '2003', 'Root', 0),
('Taejon 2001', 'Unknown', '2001', 'Root', 0),
('Tehran 2002', 'Unknown', '2002', 'Root', 0),
('University of Ulm Local Contest 2001', 'University''s', '2001', 'Root', 0),
('University of Ulm Local Contest 2003', 'University''s', '2003', 'Root', 0),
('Unkonwn', 'Unknown', 'none', 'Root', 0),
('Ural Collegiate Programming Contest 1998', 'Unknown', '1998', 'Root', 0),
('USACO 2004 November', 'Unknown', '2004', 'USACO', 0),
('UVA', 'Unknown', 'none', 'Root', 0),
('waterloo 13 June, 2009', 'Unknown', '2009', 'Root', 0),
('waterloo 8 February, 2009', 'Unknown', '2009', 'Root', 0),
('Zhejiang University Local Contest 2001', 'University''s', '2001', 'China', 0),
('ZJCPC2004', 'Unknown', '2004', 'Root', 0),
('校庆杯Warm Up', 'Unknown', 'none', 'Root', 0);

--
-- 限制导出的表
--

--
-- 限制表 `auth_group_permissions`
--
ALTER TABLE `auth_group_permissions`
  ADD CONSTRAINT `auth_group_permissi_permission_id_84c5c92e_fk_auth_permission_id` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  ADD CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`);

--
-- 限制表 `auth_permission`
--
ALTER TABLE `auth_permission`
  ADD CONSTRAINT `auth_permissi_content_type_id_2f476e4b_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`);

--
-- 限制表 `auth_user_groups`
--
ALTER TABLE `auth_user_groups`
  ADD CONSTRAINT `auth_user_groups_group_id_97559544_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  ADD CONSTRAINT `auth_user_groups_user_id_6a12ed8b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`);

--
-- 限制表 `auth_user_user_permissions`
--
ALTER TABLE `auth_user_user_permissions`
  ADD CONSTRAINT `auth_user_user_perm_permission_id_1fbb5f2c_fk_auth_permission_id` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  ADD CONSTRAINT `auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`);

--
-- 限制表 `django_admin_log`
--
ALTER TABLE `django_admin_log`
  ADD CONSTRAINT `django_admin__content_type_id_c4bce8eb_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  ADD CONSTRAINT `django_admin_log_user_id_c564eba6_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`);

--
-- 限制表 `mixojapp_problemstatus`
--
ALTER TABLE `mixojapp_problemstatus`
  ADD CONSTRAINT `mixojapp_problemstatu_problem_id_4de470bc_fk_mixojapp_problem_id` FOREIGN KEY (`problem_id`) REFERENCES `mixojapp_problem` (`id`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
